ARM GAS  /tmp/ccfh54Yn.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1	@ Tag_ABI_HardFP_use
   3              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"collide.c"
  14              	@ GNU C17 (15:9-2019-q4-0ubuntu1) version 9.2.1 20191025 (release) [ARM/arm-9-branch revision 27759
  15              	@	compiled by GNU C version 9.2.1 20200306, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.
  16              	
  17              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  18              	@ options passed:  -I . -I .
  19              	@ -I /home/george/projects/PlaydateSDK-1.11.1//C_API
  20              	@ -imultilib thumb/v7e-m+fp/hard -MD build/src/collide.d
  21              	@ -MF build/dep/collide.o.d -MP -MQ build/src/collide.o -D__USES_INITFINI__
  22              	@ -D __FPU_USED=1 -D TARGET_PLAYDATE=1 -D TARGET_EXTENSION=1 src/collide.c
  23              	@ -mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-sp-d16
  24              	@ -march=armv7e-m+fpv5 -auxbase-strip build/src/collide.o -g -gdwarf-2 -O2
  25              	@ -Wall -Wno-unused -Wstrict-prototypes -Wno-unknown-pragmas
  26              	@ -Wdouble-promotion -falign-functions=16 -fomit-frame-pointer
  27              	@ -fverbose-asm -ffunction-sections -fdata-sections
  28              	@ options enabled:  -faggressive-loop-optimizations -falign-functions
  29              	@ -falign-jumps -falign-labels -falign-loops -fassume-phsa -fauto-inc-dec
  30              	@ -fbranch-count-reg -fcaller-saves -fcombine-stack-adjustments -fcommon
  31              	@ -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  32              	@ -fdata-sections -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
  33              	@ -fdevirtualize-speculatively -fdwarf2-cfi-asm -fearly-inlining
  34              	@ -feliminate-unused-debug-types -fexpensive-optimizations
  35              	@ -fforward-propagate -ffp-int-builtin-inexact -ffunction-cse
  36              	@ -ffunction-sections -fgcse -fgcse-lm -fgnu-runtime -fgnu-unique
  37              	@ -fguess-branch-probability -fhoist-adjacent-loads -fident -fif-conversion
  38              	@ -fif-conversion2 -findirect-inlining -finline -finline-atomics
  39              	@ -finline-functions-called-once -finline-small-functions -fipa-bit-cp
  40              	@ -fipa-cp -fipa-icf -fipa-icf-functions -fipa-icf-variables -fipa-profile
  41              	@ -fipa-pure-const -fipa-ra -fipa-reference -fipa-reference-addressable
  42              	@ -fipa-sra -fipa-stack-alignment -fipa-vrp -fira-hoist-pressure
  43              	@ -fira-share-save-slots -fira-share-spill-slots
  44              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  45              	@ -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  46              	@ -fmath-errno -fmerge-constants -fmerge-debug-strings
  47              	@ -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  48              	@ -foptimize-strlen -fpartial-inlining -fpeephole -fpeephole2 -fplt
  49              	@ -fprefetch-loop-arrays -freg-struct-return -freorder-blocks
  50              	@ -freorder-functions -frerun-cse-after-loop
  51              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  52              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  53              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  54              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  55              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  56              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  57              	@ -fsplit-ivs-in-unroller -fsplit-wide-types -fssa-backprop -fssa-phiopt
ARM GAS  /tmp/ccfh54Yn.s 			page 2


  58              	@ -fstdarg-opt -fstore-merging -fstrict-aliasing
  59              	@ -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  60              	@ -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
  61              	@ -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop -ftree-cselim
  62              	@ -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  63              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  64              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pre
  65              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr
  66              	@ -ftree-sra -ftree-switch-conversion -ftree-tail-merge -ftree-ter
  67              	@ -ftree-vrp -funit-at-a-time -fvar-tracking -fvar-tracking-assignments
  68              	@ -fverbose-asm -fzero-initialized-in-bss -masm-syntax-unified -mbe32
  69              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  70              	@ -munaligned-access -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.section	.text.ComputeIncidentEdge,"ax",%progbits
  76              		.align	1
  77              		.p2align 4,,15
  78              		.arch armv7e-m
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu fpv5-sp-d16
  83              		.type	ComputeIncidentEdge, %function
  84              	ComputeIncidentEdge:
  85              	.LVL0:
  86              	.LFB4:
  87              		.file 1 "src/collide.c"
   1:src/collide.c **** /*
   2:src/collide.c **** * Copyright (c) 2006-2007 Erin Catto http://www.gphysics.com
   3:src/collide.c **** *
   4:src/collide.c **** * Permission to use, copy, modify, distribute and sell this software
   5:src/collide.c **** * and its documentation for any purpose is hereby granted without fee,
   6:src/collide.c **** * provided that the above copyright notice appear in all copies.
   7:src/collide.c **** * Erin Catto makes no representations about the suitability 
   8:src/collide.c **** * of this software for any purpose.  
   9:src/collide.c **** * It is provided "as is" without express or implied warranty.
  10:src/collide.c **** */
  11:src/collide.c **** 
  12:src/collide.c **** 
  13:src/collide.c **** // Box vertex and edge numbering:
  14:src/collide.c **** //
  15:src/collide.c **** //        ^ y
  16:src/collide.c **** //        |
  17:src/collide.c **** //        e1
  18:src/collide.c **** //   v2 ------ v1
  19:src/collide.c **** //    |        |
  20:src/collide.c **** // e2 |        | e4  --> x
  21:src/collide.c **** //    |        |
  22:src/collide.c **** //   v3 ------ v4
  23:src/collide.c **** //        e3
  24:src/collide.c **** 
  25:src/collide.c **** #include "mathutils.h"
  26:src/collide.c **** #include "collide.h"
  27:src/collide.c **** 
ARM GAS  /tmp/ccfh54Yn.s 			page 3


  28:src/collide.c **** enum Axis
  29:src/collide.c **** {
  30:src/collide.c **** 	FACE_A_X,
  31:src/collide.c **** 	FACE_A_Y,
  32:src/collide.c **** 	FACE_B_X,
  33:src/collide.c **** 	FACE_B_Y
  34:src/collide.c **** };
  35:src/collide.c **** 
  36:src/collide.c **** enum EdgeNumbers
  37:src/collide.c **** {
  38:src/collide.c **** 	NO_EDGE = 0,
  39:src/collide.c **** 	EDGE1,
  40:src/collide.c **** 	EDGE2,
  41:src/collide.c **** 	EDGE3,
  42:src/collide.c **** 	EDGE4
  43:src/collide.c **** };
  44:src/collide.c **** 
  45:src/collide.c **** struct ClipVertex
  46:src/collide.c **** {
  47:src/collide.c **** //	ClipVertex() { fp.value = 0; }
  48:src/collide.c **** 	struct Vec2 v;
  49:src/collide.c **** 	union FeaturePair fp;
  50:src/collide.c **** };
  51:src/collide.c **** 
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
  53:src/collide.c **** {
  54:src/collide.c ****     cv->fp.value=0;
  55:src/collide.c **** }
  56:src/collide.c **** 
  57:src/collide.c **** void Swap(char* a, char* b)
  58:src/collide.c **** {
  59:src/collide.c **** 	char tmp = *a;
  60:src/collide.c **** 	*a = *b;
  61:src/collide.c **** 	*b = tmp;
  62:src/collide.c **** }
  63:src/collide.c **** 
  64:src/collide.c **** void Flip(union FeaturePair *fp)
  65:src/collide.c **** {
  66:src/collide.c **** 	Swap(&(fp->e.inEdge1), &(fp->e.inEdge2));
  67:src/collide.c **** 	Swap(&(fp->e.outEdge1), &(fp->e.outEdge2));
  68:src/collide.c **** }
  69:src/collide.c **** 
  70:src/collide.c **** int ClipSegmentToLine(struct ClipVertex vOut[2], struct ClipVertex vIn[2],
  71:src/collide.c **** 					  struct Vec2 normal, float offset, char clipEdge)
  72:src/collide.c **** {
  73:src/collide.c **** 	// Start with no output points
  74:src/collide.c **** 	int numOut = 0;
  75:src/collide.c **** 
  76:src/collide.c **** 	// Calculate the distance of end points to the line
  77:src/collide.c **** 	float distance0 = Dot(normal, vIn[0].v) - offset;
  78:src/collide.c **** 	float distance1 = Dot(normal, vIn[1].v) - offset;
  79:src/collide.c **** 
  80:src/collide.c **** 	// If the points are behind the plane
  81:src/collide.c **** 	if (distance0 <= 0.0f) vOut[numOut++] = vIn[0];
  82:src/collide.c **** 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
  83:src/collide.c **** 
  84:src/collide.c **** 	// If the points are on different sides of the plane
ARM GAS  /tmp/ccfh54Yn.s 			page 4


  85:src/collide.c **** 	if (distance0 * distance1 < 0.0f)
  86:src/collide.c **** 	{
  87:src/collide.c **** 		// Find intersection point of edge and plane
  88:src/collide.c **** 		float interp = distance0 / (distance0 - distance1);
  89:src/collide.c **** 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn[0].v)));
  90:src/collide.c **** 		if (distance0 > 0.0f)
  91:src/collide.c **** 		{
  92:src/collide.c **** 			vOut[numOut].fp = vIn[0].fp;
  93:src/collide.c **** 			vOut[numOut].fp.e.inEdge1 = clipEdge;
  94:src/collide.c **** 			vOut[numOut].fp.e.inEdge2 = NO_EDGE;
  95:src/collide.c **** 		}
  96:src/collide.c **** 		else
  97:src/collide.c **** 		{
  98:src/collide.c **** 			vOut[numOut].fp = vIn[1].fp;
  99:src/collide.c **** 			vOut[numOut].fp.e.outEdge1 = clipEdge;
 100:src/collide.c **** 			vOut[numOut].fp.e.outEdge2 = NO_EDGE;
 101:src/collide.c **** 		}
 102:src/collide.c **** 		++numOut;
 103:src/collide.c **** 	}
 104:src/collide.c **** 
 105:src/collide.c **** 	return numOut;
 106:src/collide.c **** }
 107:src/collide.c **** 
 108:src/collide.c **** static void ComputeIncidentEdge(struct ClipVertex c[2], struct Vec2 h, struct Vec2 pos,
 109:src/collide.c **** 								struct Mat22 Rot, struct Vec2 normal)
 110:src/collide.c **** {
  88              		.loc 1 110 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 96
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		.loc 1 110 1 is_stmt 0 view .LVU1
  93 0000 B0EE417A 		vmov.f32	s14, s2	@ tmp217, pos
  94 0004 F0EE617A 		vmov.f32	s15, s3	@ tmp218, pos
  95              	@ src/collide.c:113: 	struct Mat22 RotT = Transpose(Rot);
 111:src/collide.c **** 	// The normal is from the reference box. Convert it
 112:src/collide.c **** 	// to the incident boxe's frame and flip sign.
 113:src/collide.c **** 	struct Mat22 RotT = Transpose(Rot);
  96              		.loc 1 113 22 view .LVU2
  97 0008 B0EE431A 		vmov.f32	s2, s6	@, Rot
  98 000c F0EE631A 		vmov.f32	s3, s7	@, Rot
  99              	@ src/collide.c:110: {
 110:src/collide.c **** 	// The normal is from the reference box. Convert it
 100              		.loc 1 110 1 view .LVU3
 101 0010 30B5     		push	{r4, r5, lr}	@
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 12
 104              		.cfi_offset 4, -12
 105              		.cfi_offset 5, -8
 106              		.cfi_offset 14, -4
 107 0012 2DED028B 		vpush.64	{d8}	@
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 20
 110              		.cfi_offset 80, -20
 111              		.cfi_offset 81, -16
 112 0016 99B0     		sub	sp, sp, #100	@,,
 113              	.LCFI2:
 114              		.cfi_def_cfa_offset 120
ARM GAS  /tmp/ccfh54Yn.s 			page 5


 115              	@ src/collide.c:110: {
 110:src/collide.c **** 	// The normal is from the reference box. Convert it
 116              		.loc 1 110 1 view .LVU4
 117 0018 F0EE408A 		vmov.f32	s17, s0	@ tmp215, h
 118 001c B0EE608A 		vmov.f32	s16, s1	@ tmp216, h
 119 0020 0446     		mov	r4, r0	@ c, tmp214
 120              	@ src/collide.c:113: 	struct Mat22 RotT = Transpose(Rot);
 121              		.loc 1 113 22 view .LVU5
 122 0022 B0EE420A 		vmov.f32	s0, s4	@, Rot
 123              	@ src/collide.c:110: {
 110:src/collide.c **** 	// The normal is from the reference box. Convert it
 124              		.loc 1 110 1 view .LVU6
 125 0026 8DED043A 		vstr.32	s6, [sp, #16]	@ Rot, Rot
 126              	@ src/collide.c:113: 	struct Mat22 RotT = Transpose(Rot);
 127              		.loc 1 113 22 view .LVU7
 128 002a F0EE620A 		vmov.f32	s1, s5	@, Rot
 129              	@ src/collide.c:110: {
 110:src/collide.c **** 	// The normal is from the reference box. Convert it
 130              		.loc 1 110 1 view .LVU8
 131 002e 8DED067A 		vstr.32	s14, [sp, #24]	@ tmp217, pos
 132 0032 CDED053A 		vstr.32	s7, [sp, #20]	@ Rot, Rot
 133 0036 CDED077A 		vstr.32	s15, [sp, #28]	@ tmp218, pos
 134 003a 8DED004A 		vstr.32	s8, [sp]	@ tmp223, normal
 135 003e CDED014A 		vstr.32	s9, [sp, #4]	@ tmp224, normal
 136 0042 8DED022A 		vstr.32	s4, [sp, #8]	@ Rot, Rot
 137 0046 CDED032A 		vstr.32	s5, [sp, #12]	@ Rot, Rot
 138              	.LVL1:
 139              		.loc 1 113 2 is_stmt 1 view .LVU9
 140              	@ src/collide.c:113: 	struct Mat22 RotT = Transpose(Rot);
 141              		.loc 1 113 22 is_stmt 0 view .LVU10
 142 004a FFF7FEFF 		bl	Transpose		@
 143              	.LVL2:
 114:src/collide.c **** 	struct Vec2 n = minusVec2(matmul(RotT, normal));
 144              		.loc 1 114 2 is_stmt 1 view .LVU11
 145              	@ src/collide.c:114: 	struct Vec2 n = minusVec2(matmul(RotT, normal));
 146              		.loc 1 114 18 is_stmt 0 view .LVU12
 147 004e 9DED002A 		vldr.32	s4, [sp]	@, normal
 148 0052 DDED012A 		vldr.32	s5, [sp, #4]	@, normal
 149 0056 FFF7FEFF 		bl	matmul		@
 150              	.LVL3:
 151 005a FFF7FEFF 		bl	minusVec2		@
 152              	.LVL4:
 153 005e 8DED0A0A 		vstr.32	s0, [sp, #40]	@ tmp225, n
 154 0062 CDED0B0A 		vstr.32	s1, [sp, #44]	@ tmp226, n
 115:src/collide.c ****    	struct Vec2 nAbs = Absv(n);
 155              		.loc 1 115 5 is_stmt 1 view .LVU13
 156              	@ src/collide.c:115:    	struct Vec2 nAbs = Absv(n);
 157              		.loc 1 115 24 is_stmt 0 view .LVU14
 158 0066 FFF7FEFF 		bl	Absv		@
 159              	.LVL5:
 116:src/collide.c **** 
 117:src/collide.c **** 	if (nAbs.x > nAbs.y)
 160              		.loc 1 117 2 is_stmt 1 view .LVU15
 161              	@ src/collide.c:117: 	if (nAbs.x > nAbs.y)
 162              		.loc 1 117 5 is_stmt 0 view .LVU16
 163 006a B4EEE00A 		vcmpe.f32	s0, s1	@ tmp227, tmp228
 164 006e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /tmp/ccfh54Yn.s 			page 6


 165 0072 19DD     		ble	.L12		@,
 118:src/collide.c **** 	{
 119:src/collide.c **** 		if (Sign(n.x) > 0.0f)
 166              		.loc 1 119 3 is_stmt 1 view .LVU17
 167              	@ src/collide.c:119: 		if (Sign(n.x) > 0.0f)
 168              		.loc 1 119 7 is_stmt 0 view .LVU18
 169 0074 9DED0A0A 		vldr.32	s0, [sp, #40]	@, n.x
 170 0078 FFF7FEFF 		bl	Sign		@
 171              	.LVL6:
 172              	@ src/collide.c:119: 		if (Sign(n.x) > 0.0f)
 173              		.loc 1 119 6 view .LVU19
 174 007c B5EEC00A 		vcmpe.f32	s0, #0	@ tmp229
 175 0080 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 176 0084 65DD     		ble	.L13		@,
 120:src/collide.c **** 		{
 121:src/collide.c **** 
 122:src/collide.c **** 			c[0].v.x = h.x;
 177              		.loc 1 122 4 is_stmt 1 view .LVU20
 178              	@ src/collide.c:123: 			c[0].v.y = -h.y;
 123:src/collide.c **** 			c[0].v.y = -h.y;
 179              		.loc 1 123 15 is_stmt 0 view .LVU21
 180 0086 F1EE487A 		vneg.f32	s15, s16	@ tmp164, h
 181              	@ src/collide.c:124: 			c[0].fp.e.inEdge2 = EDGE3;
 124:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE3;
 182              		.loc 1 124 22 view .LVU22
 183 008a 40F20342 		movw	r2, #1027	@ tmp166,
 184              	@ src/collide.c:129: 			c[1].fp.e.inEdge2 = EDGE4;
 125:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE4;
 126:src/collide.c **** 
 127:src/collide.c **** 			c[1].v.x = h.x;
 128:src/collide.c **** 			c[1].v.y =h.y;
 129:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE4;
 185              		.loc 1 129 22 view .LVU23
 186 008e 4FF48273 		mov	r3, #260	@ tmp168,
 187              	@ src/collide.c:122: 			c[0].v.x = h.x;
 122:src/collide.c **** 			c[0].v.y = -h.y;
 188              		.loc 1 122 13 view .LVU24
 189 0092 C4ED008A 		vstr.32	s17, [r4]	@ h, c_23(D)->v.x
 123:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE3;
 190              		.loc 1 123 4 is_stmt 1 view .LVU25
 191              	@ src/collide.c:127: 			c[1].v.x = h.x;
 127:src/collide.c **** 			c[1].v.y =h.y;
 192              		.loc 1 127 13 is_stmt 0 view .LVU26
 193 0096 C4ED038A 		vstr.32	s17, [r4, #12]	@ h, MEM[(struct ClipVertex *)c_23(D) + 12B].v.x
 194              	@ src/collide.c:128: 			c[1].v.y =h.y;
 128:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE4;
 195              		.loc 1 128 13 view .LVU27
 196 009a 84ED048A 		vstr.32	s16, [r4, #16]	@ h, MEM[(struct ClipVertex *)c_23(D) + 12B].v.y
 197              	@ src/collide.c:123: 			c[0].v.y = -h.y;
 123:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE3;
 198              		.loc 1 123 13 view .LVU28
 199 009e C4ED017A 		vstr.32	s15, [r4, #4]	@ tmp164, c_23(D)->v.y
 124:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE4;
 200              		.loc 1 124 4 is_stmt 1 view .LVU29
 125:src/collide.c **** 
 201              		.loc 1 125 4 view .LVU30
 202              	@ src/collide.c:124: 			c[0].fp.e.inEdge2 = EDGE3;
ARM GAS  /tmp/ccfh54Yn.s 			page 7


 124:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE4;
 203              		.loc 1 124 22 is_stmt 0 view .LVU31
 204 00a2 6281     		strh	r2, [r4, #10]	@ movhi	@ tmp166, MEM[(union FeaturePair *)c_23(D) + 10B]
 127:src/collide.c **** 			c[1].v.y =h.y;
 205              		.loc 1 127 4 is_stmt 1 view .LVU32
 128:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE4;
 206              		.loc 1 128 4 view .LVU33
 207              		.loc 1 129 4 view .LVU34
 130:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE1;
 208              		.loc 1 130 4 view .LVU35
 209              	@ src/collide.c:129: 			c[1].fp.e.inEdge2 = EDGE4;
 129:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE1;
 210              		.loc 1 129 22 is_stmt 0 view .LVU36
 211 00a4 E382     		strh	r3, [r4, #22]	@ movhi	@ tmp168, MEM[(union FeaturePair *)c_23(D) + 22B]
 212 00a6 18E0     		b	.L6		@
 213              	.L12:
 131:src/collide.c **** 		}
 132:src/collide.c **** 		else
 133:src/collide.c **** 		{
 134:src/collide.c **** 			c[0].v.x = -h.x;
 135:src/collide.c ****             c[0].v.y = h.y;
 136:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE1;
 137:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE2;
 138:src/collide.c **** 
 139:src/collide.c **** 			c[1].v.x = -h.x;
 140:src/collide.c **** 			c[1].v.y = -h.y;
 141:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE2;
 142:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE3;
 143:src/collide.c **** 		}
 144:src/collide.c **** 	}
 145:src/collide.c **** 	else
 146:src/collide.c **** 	{
 147:src/collide.c **** 		if (Sign(n.y) > 0.0f)
 214              		.loc 1 147 3 is_stmt 1 view .LVU37
 215              	@ src/collide.c:147: 		if (Sign(n.y) > 0.0f)
 216              		.loc 1 147 7 is_stmt 0 view .LVU38
 217 00a8 9DED0B0A 		vldr.32	s0, [sp, #44]	@, n.y
 218 00ac FFF7FEFF 		bl	Sign		@
 219              	.LVL7:
 220              	@ src/collide.c:147: 		if (Sign(n.y) > 0.0f)
 221              		.loc 1 147 6 view .LVU39
 222 00b0 B5EEC00A 		vcmpe.f32	s0, #0	@ tmp230
 223 00b4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 224 00b8 5EDD     		ble	.L14		@,
 148:src/collide.c **** 		{
 149:src/collide.c **** 			c[0].v.x = h.x;
 225              		.loc 1 149 4 is_stmt 1 view .LVU40
 226              	@ src/collide.c:154: 			c[1].v.x = -h.x;
 150:src/collide.c **** 			c[0].v.y = h.y;
 151:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE4;
 152:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE1;
 153:src/collide.c **** 
 154:src/collide.c **** 			c[1].v.x = -h.x;
 227              		.loc 1 154 15 is_stmt 0 view .LVU41
 228 00ba F1EE687A 		vneg.f32	s15, s17	@ tmp178, h
 229              	@ src/collide.c:151: 			c[0].fp.e.inEdge2 = EDGE4;
 151:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE1;
ARM GAS  /tmp/ccfh54Yn.s 			page 8


 230              		.loc 1 151 22 view .LVU42
 231 00be 4FF48272 		mov	r2, #260	@ tmp177,
 232              	@ src/collide.c:156: 			c[1].fp.e.inEdge2 = EDGE1;
 155:src/collide.c **** 			c[1].v.y = h.y;
 156:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE1;
 233              		.loc 1 156 22 view .LVU43
 234 00c2 40F20123 		movw	r3, #513	@ tmp180,
 235              	@ src/collide.c:149: 			c[0].v.x = h.x;
 149:src/collide.c **** 			c[0].v.y = h.y;
 236              		.loc 1 149 13 view .LVU44
 237 00c6 C4ED008A 		vstr.32	s17, [r4]	@ h, c_23(D)->v.x
 150:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE4;
 238              		.loc 1 150 4 is_stmt 1 view .LVU45
 239              	@ src/collide.c:150: 			c[0].v.y = h.y;
 150:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE4;
 240              		.loc 1 150 13 is_stmt 0 view .LVU46
 241 00ca 84ED018A 		vstr.32	s16, [r4, #4]	@ h, c_23(D)->v.y
 151:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE1;
 242              		.loc 1 151 4 is_stmt 1 view .LVU47
 152:src/collide.c **** 
 243              		.loc 1 152 4 view .LVU48
 244              	@ src/collide.c:154: 			c[1].v.x = -h.x;
 154:src/collide.c **** 			c[1].v.y = h.y;
 245              		.loc 1 154 13 is_stmt 0 view .LVU49
 246 00ce C4ED037A 		vstr.32	s15, [r4, #12]	@ tmp178, MEM[(struct ClipVertex *)c_23(D) + 12B].v.x
 247              	@ src/collide.c:155: 			c[1].v.y = h.y;
 155:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE1;
 248              		.loc 1 155 13 view .LVU50
 249 00d2 84ED048A 		vstr.32	s16, [r4, #16]	@ h, MEM[(struct ClipVertex *)c_23(D) + 12B].v.y
 250              	@ src/collide.c:151: 			c[0].fp.e.inEdge2 = EDGE4;
 151:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE1;
 251              		.loc 1 151 22 view .LVU51
 252 00d6 6281     		strh	r2, [r4, #10]	@ movhi	@ tmp177, MEM[(union FeaturePair *)c_23(D) + 10B]
 154:src/collide.c **** 			c[1].v.y = h.y;
 253              		.loc 1 154 4 is_stmt 1 view .LVU52
 155:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE1;
 254              		.loc 1 155 4 view .LVU53
 255              		.loc 1 156 4 view .LVU54
 157:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE2;
 256              		.loc 1 157 4 view .LVU55
 257              	@ src/collide.c:156: 			c[1].fp.e.inEdge2 = EDGE1;
 156:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE2;
 258              		.loc 1 156 22 is_stmt 0 view .LVU56
 259 00d8 E382     		strh	r3, [r4, #22]	@ movhi	@ tmp180, MEM[(union FeaturePair *)c_23(D) + 22B]
 260              	.LVL8:
 261              	.L6:
 158:src/collide.c **** 		}
 159:src/collide.c **** 		else
 160:src/collide.c **** 		{
 161:src/collide.c **** 			c[0].v.x = -h.x;
 162:src/collide.c **** 			c[0].v.y = -h.y;
 163:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE2;
 164:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE3;
 165:src/collide.c **** 
 166:src/collide.c **** 			c[1].v.x = h.x;
 167:src/collide.c **** 			c[1].v.y = -h.y;
 168:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE3;
ARM GAS  /tmp/ccfh54Yn.s 			page 9


 169:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE4;
 170:src/collide.c **** 		}
 171:src/collide.c **** 	}
 172:src/collide.c **** 
 173:src/collide.c **** 	c[0].v = sumVec2(pos, matmul(Rot, c[0].v));
 262              		.loc 1 173 2 is_stmt 1 view .LVU57
 263              	@ src/collide.c:173: 	c[0].v = sumVec2(pos, matmul(Rot, c[0].v));
 264              		.loc 1 173 11 is_stmt 0 view .LVU58
 265 00da 9DED020A 		vldr.32	s0, [sp, #8]	@, Rot
 266 00de DDED030A 		vldr.32	s1, [sp, #12]	@, Rot
 267 00e2 94ED002A 		vldr.32	s4, [r4]	@, c_23(D)->v
 268 00e6 D4ED012A 		vldr.32	s5, [r4, #4]	@, c_23(D)->v
 269 00ea 9DED041A 		vldr.32	s2, [sp, #16]	@, Rot
 270 00ee DDED051A 		vldr.32	s3, [sp, #20]	@, Rot
 271 00f2 FFF7FEFF 		bl	matmul		@
 272              	.LVL9:
 273 00f6 B0EE401A 		vmov.f32	s2, s0	@ tmp231,
 274 00fa F0EE601A 		vmov.f32	s3, s1	@ tmp232,
 275 00fe 9DED060A 		vldr.32	s0, [sp, #24]	@, pos
 276 0102 DDED070A 		vldr.32	s1, [sp, #28]	@, pos
 277 0106 FFF7FEFF 		bl	sumVec2		@
 278              	.LVL10:
 279 010a 84ED000A 		vstr.32	s0, [r4]	@ tmp233, c_23(D)->v
 280 010e C4ED010A 		vstr.32	s1, [r4, #4]	@ tmp234, c_23(D)->v
 174:src/collide.c **** 	c[1].v = sumVec2(pos, matmul(Rot, c[1].v));
 281              		.loc 1 174 2 is_stmt 1 view .LVU59
 282              	@ src/collide.c:174: 	c[1].v = sumVec2(pos, matmul(Rot, c[1].v));
 283              		.loc 1 174 11 is_stmt 0 view .LVU60
 284 0112 9DED020A 		vldr.32	s0, [sp, #8]	@, Rot
 285 0116 DDED030A 		vldr.32	s1, [sp, #12]	@, Rot
 286 011a 94ED032A 		vldr.32	s4, [r4, #12]	@, _15->v
 287 011e D4ED042A 		vldr.32	s5, [r4, #16]	@, _15->v
 288 0122 9DED041A 		vldr.32	s2, [sp, #16]	@, Rot
 289 0126 DDED051A 		vldr.32	s3, [sp, #20]	@, Rot
 290 012a FFF7FEFF 		bl	matmul		@
 291              	.LVL11:
 292 012e B0EE401A 		vmov.f32	s2, s0	@ tmp235,
 293 0132 F0EE601A 		vmov.f32	s3, s1	@ tmp236,
 294 0136 9DED060A 		vldr.32	s0, [sp, #24]	@, pos
 295 013a DDED070A 		vldr.32	s1, [sp, #28]	@, pos
 296 013e FFF7FEFF 		bl	sumVec2		@
 297              	.LVL12:
 298 0142 84ED030A 		vstr.32	s0, [r4, #12]	@ tmp237, _15->v
 299 0146 C4ED040A 		vstr.32	s1, [r4, #16]	@ tmp238, _15->v
 300              	@ src/collide.c:175: }
 175:src/collide.c **** }
 301              		.loc 1 175 1 view .LVU61
 302 014a 19B0     		add	sp, sp, #100	@,,
 303              	.LCFI3:
 304              		.cfi_remember_state
 305              		.cfi_def_cfa_offset 20
 306              		@ sp needed	@
 307 014c BDEC028B 		vldm	sp!, {d8}	@
 308              	.LCFI4:
 309              		.cfi_restore 80
 310              		.cfi_restore 81
 311              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccfh54Yn.s 			page 10


 312 0150 30BD     		pop	{r4, r5, pc}	@
 313              	.LVL13:
 314              	.L13:
 315              	.LCFI5:
 316              		.cfi_restore_state
 134:src/collide.c ****             c[0].v.y = h.y;
 317              		.loc 1 134 4 is_stmt 1 view .LVU62
 318              	@ src/collide.c:134: 			c[0].v.x = -h.x;
 134:src/collide.c ****             c[0].v.y = h.y;
 319              		.loc 1 134 15 is_stmt 0 view .LVU63
 320 0152 F1EE688A 		vneg.f32	s17, s17	@ _8, h
 321              	.LVL14:
 322              	@ src/collide.c:136: 			c[0].fp.e.inEdge2 = EDGE1;
 136:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE2;
 323              		.loc 1 136 22 view .LVU64
 324 0156 40F20122 		movw	r2, #513	@ tmp170,
 325              	@ src/collide.c:140: 			c[1].v.y = -h.y;
 140:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE2;
 326              		.loc 1 140 15 view .LVU65
 327 015a F1EE487A 		vneg.f32	s15, s16	@ tmp171, h
 328              	@ src/collide.c:141: 			c[1].fp.e.inEdge2 = EDGE2;
 141:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE3;
 329              		.loc 1 141 22 view .LVU66
 330 015e 40F20233 		movw	r3, #770	@ tmp173,
 331              	@ src/collide.c:135:             c[0].v.y = h.y;
 135:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE1;
 332              		.loc 1 135 22 view .LVU67
 333 0162 84ED018A 		vstr.32	s16, [r4, #4]	@ h, c_23(D)->v.y
 334              	@ src/collide.c:134: 			c[0].v.x = -h.x;
 134:src/collide.c ****             c[0].v.y = h.y;
 335              		.loc 1 134 13 view .LVU68
 336 0166 C4ED008A 		vstr.32	s17, [r4]	@ _8, c_23(D)->v.x
 135:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE1;
 337              		.loc 1 135 13 is_stmt 1 view .LVU69
 136:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE2;
 338              		.loc 1 136 4 view .LVU70
 137:src/collide.c **** 
 339              		.loc 1 137 4 view .LVU71
 340              	@ src/collide.c:139: 			c[1].v.x = -h.x;
 139:src/collide.c **** 			c[1].v.y = -h.y;
 341              		.loc 1 139 13 is_stmt 0 view .LVU72
 342 016a C4ED038A 		vstr.32	s17, [r4, #12]	@ _8, MEM[(struct ClipVertex *)c_23(D) + 12B].v.x
 343              	@ src/collide.c:140: 			c[1].v.y = -h.y;
 140:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE2;
 344              		.loc 1 140 13 view .LVU73
 345 016e C4ED047A 		vstr.32	s15, [r4, #16]	@ tmp171, MEM[(struct ClipVertex *)c_23(D) + 12B].v.y
 346              	@ src/collide.c:136: 			c[0].fp.e.inEdge2 = EDGE1;
 136:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE2;
 347              		.loc 1 136 22 view .LVU74
 348 0172 6281     		strh	r2, [r4, #10]	@ movhi	@ tmp170, MEM[(union FeaturePair *)c_23(D) + 10B]
 139:src/collide.c **** 			c[1].v.y = -h.y;
 349              		.loc 1 139 4 is_stmt 1 view .LVU75
 140:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE2;
 350              		.loc 1 140 4 view .LVU76
 141:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE3;
 351              		.loc 1 141 4 view .LVU77
 142:src/collide.c **** 		}
ARM GAS  /tmp/ccfh54Yn.s 			page 11


 352              		.loc 1 142 4 view .LVU78
 353              	@ src/collide.c:141: 			c[1].fp.e.inEdge2 = EDGE2;
 141:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE3;
 354              		.loc 1 141 22 is_stmt 0 view .LVU79
 355 0174 E382     		strh	r3, [r4, #22]	@ movhi	@ tmp173, MEM[(union FeaturePair *)c_23(D) + 22B]
 356 0176 B0E7     		b	.L6		@
 357              	.LVL15:
 358              	.L14:
 161:src/collide.c **** 			c[0].v.y = -h.y;
 359              		.loc 1 161 4 is_stmt 1 view .LVU80
 360              	@ src/collide.c:162: 			c[0].v.y = -h.y;
 162:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE2;
 361              		.loc 1 162 15 is_stmt 0 view .LVU81
 362 0178 B1EE488A 		vneg.f32	s16, s16	@ _14, h
 363              	.LVL16:
 364              	@ src/collide.c:163: 			c[0].fp.e.inEdge2 = EDGE2;
 163:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE3;
 365              		.loc 1 163 22 view .LVU82
 366 017c 40F20232 		movw	r2, #770	@ tmp183,
 367              	@ src/collide.c:161: 			c[0].v.x = -h.x;
 161:src/collide.c **** 			c[0].v.y = -h.y;
 368              		.loc 1 161 15 view .LVU83
 369 0180 F1EE687A 		vneg.f32	s15, s17	@ tmp181, h
 370              	@ src/collide.c:168: 			c[1].fp.e.inEdge2 = EDGE3;
 168:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE4;
 371              		.loc 1 168 22 view .LVU84
 372 0184 40F20343 		movw	r3, #1027	@ tmp185,
 373              	@ src/collide.c:166: 			c[1].v.x = h.x;
 166:src/collide.c **** 			c[1].v.y = -h.y;
 374              		.loc 1 166 13 view .LVU85
 375 0188 C4ED038A 		vstr.32	s17, [r4, #12]	@ h, MEM[(struct ClipVertex *)c_23(D) + 12B].v.x
 376              	@ src/collide.c:162: 			c[0].v.y = -h.y;
 162:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE2;
 377              		.loc 1 162 13 view .LVU86
 378 018c 84ED018A 		vstr.32	s16, [r4, #4]	@ _14, c_23(D)->v.y
 379              	@ src/collide.c:167: 			c[1].v.y = -h.y;
 167:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE3;
 380              		.loc 1 167 13 view .LVU87
 381 0190 84ED048A 		vstr.32	s16, [r4, #16]	@ _14, MEM[(struct ClipVertex *)c_23(D) + 12B].v.y
 382              	@ src/collide.c:161: 			c[0].v.x = -h.x;
 161:src/collide.c **** 			c[0].v.y = -h.y;
 383              		.loc 1 161 13 view .LVU88
 384 0194 C4ED007A 		vstr.32	s15, [r4]	@ tmp181, c_23(D)->v.x
 162:src/collide.c **** 			c[0].fp.e.inEdge2 = EDGE2;
 385              		.loc 1 162 4 is_stmt 1 view .LVU89
 163:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE3;
 386              		.loc 1 163 4 view .LVU90
 164:src/collide.c **** 
 387              		.loc 1 164 4 view .LVU91
 388              	@ src/collide.c:163: 			c[0].fp.e.inEdge2 = EDGE2;
 163:src/collide.c **** 			c[0].fp.e.outEdge2 = EDGE3;
 389              		.loc 1 163 22 is_stmt 0 view .LVU92
 390 0198 6281     		strh	r2, [r4, #10]	@ movhi	@ tmp183, MEM[(union FeaturePair *)c_23(D) + 10B]
 166:src/collide.c **** 			c[1].v.y = -h.y;
 391              		.loc 1 166 4 is_stmt 1 view .LVU93
 167:src/collide.c **** 			c[1].fp.e.inEdge2 = EDGE3;
 392              		.loc 1 167 4 view .LVU94
ARM GAS  /tmp/ccfh54Yn.s 			page 12


 168:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE4;
 393              		.loc 1 168 4 view .LVU95
 169:src/collide.c **** 		}
 394              		.loc 1 169 4 view .LVU96
 395              	@ src/collide.c:168: 			c[1].fp.e.inEdge2 = EDGE3;
 168:src/collide.c **** 			c[1].fp.e.outEdge2 = EDGE4;
 396              		.loc 1 168 22 is_stmt 0 view .LVU97
 397 019a E382     		strh	r3, [r4, #22]	@ movhi	@ tmp185, MEM[(union FeaturePair *)c_23(D) + 22B]
 398 019c 9DE7     		b	.L6		@
 399              		.cfi_endproc
 400              	.LFE4:
 401              		.size	ComputeIncidentEdge, .-ComputeIncidentEdge
 402 019e 00BF     		.section	.text.initClipVertex,"ax",%progbits
 403              		.align	1
 404              		.p2align 4,,15
 405              		.global	initClipVertex
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu fpv5-sp-d16
 410              		.type	initClipVertex, %function
 411              	initClipVertex:
 412              	.LVL17:
 413              	.LFB0:
  53:src/collide.c ****     cv->fp.value=0;
 414              		.loc 1 53 1 is_stmt 1 view -0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
  54:src/collide.c **** }
 419              		.loc 1 54 5 view .LVU99
 420              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c **** }
 421              		.loc 1 54 17 is_stmt 0 view .LVU100
 422 0000 0023     		movs	r3, #0	@ tmp111,
 423 0002 8360     		str	r3, [r0, #8]	@ tmp111, cv_2(D)->fp.value
 424              	@ src/collide.c:55: }
  55:src/collide.c **** 
 425              		.loc 1 55 1 view .LVU101
 426 0004 7047     		bx	lr	@
 427              		.cfi_endproc
 428              	.LFE0:
 429              		.size	initClipVertex, .-initClipVertex
 430 0006 00BF     		.section	.text.Swap,"ax",%progbits
 431              		.align	1
 432              		.p2align 4,,15
 433              		.global	Swap
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 437              		.fpu fpv5-sp-d16
 438              		.type	Swap, %function
 439              	Swap:
 440              	.LVL18:
 441              	.LFB1:
  58:src/collide.c **** 	char tmp = *a;
ARM GAS  /tmp/ccfh54Yn.s 			page 13


 442              		.loc 1 58 1 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		@ link register save eliminated.
  59:src/collide.c **** 	*a = *b;
 447              		.loc 1 59 2 view .LVU103
 448              	@ src/collide.c:59: 	char tmp = *a;
  59:src/collide.c **** 	*a = *b;
 449              		.loc 1 59 7 is_stmt 0 view .LVU104
 450 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2	@ tmp, *a_3(D)
 451              	.LVL19:
  60:src/collide.c **** 	*b = tmp;
 452              		.loc 1 60 2 is_stmt 1 view .LVU105
 453              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*b = tmp;
 454              		.loc 1 60 7 is_stmt 0 view .LVU106
 455 0002 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2	@ _1, *b_5(D)
 456              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*b = tmp;
 457              		.loc 1 60 5 view .LVU107
 458 0004 0270     		strb	r2, [r0]	@ _1, *a_3(D)
  61:src/collide.c **** }
 459              		.loc 1 61 2 is_stmt 1 view .LVU108
 460              	@ src/collide.c:61: 	*b = tmp;
  61:src/collide.c **** }
 461              		.loc 1 61 5 is_stmt 0 view .LVU109
 462 0006 0B70     		strb	r3, [r1]	@ tmp, *b_5(D)
 463              	@ src/collide.c:62: }
  62:src/collide.c **** 
 464              		.loc 1 62 1 view .LVU110
 465 0008 7047     		bx	lr	@
 466              		.cfi_endproc
 467              	.LFE1:
 468              		.size	Swap, .-Swap
 469 000a 00BF     		.section	.text.Flip,"ax",%progbits
 470              		.align	1
 471              		.p2align 4,,15
 472              		.global	Flip
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 476              		.fpu fpv5-sp-d16
 477              		.type	Flip, %function
 478              	Flip:
 479              	.LVL20:
 480              	.LFB2:
  65:src/collide.c **** 	Swap(&(fp->e.inEdge1), &(fp->e.inEdge2));
 481              		.loc 1 65 1 is_stmt 1 view -0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              		@ link register save eliminated.
  66:src/collide.c **** 	Swap(&(fp->e.outEdge1), &(fp->e.outEdge2));
 486              		.loc 1 66 2 view .LVU112
 487              	.LBB30:
 488              	.LBI30:
ARM GAS  /tmp/ccfh54Yn.s 			page 14


  57:src/collide.c **** {
 489              		.loc 1 57 6 view .LVU113
 490              	.LBB31:
  59:src/collide.c **** 	*a = *b;
 491              		.loc 1 59 2 view .LVU114
 492              	@ src/collide.c:59: 	char tmp = *a;
  59:src/collide.c **** 	*a = *b;
 493              		.loc 1 59 7 is_stmt 0 view .LVU115
 494 0000 0178     		ldrb	r1, [r0]	@ zero_extendqisi2	@ tmp, MEM[(char *)fp_1(D)]
 495              	.LVL21:
  60:src/collide.c **** 	*b = tmp;
 496              		.loc 1 60 2 is_stmt 1 view .LVU116
 497              	.LBE31:
 498              	.LBE30:
 499              	.LBB33:
 500              	.LBB34:
 501              	@ src/collide.c:59: 	char tmp = *a;
  59:src/collide.c **** 	*a = *b;
 502              		.loc 1 59 7 is_stmt 0 view .LVU117
 503 0002 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2	@ tmp, MEM[(char *)fp_1(D) + 1B]
 504              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*b = tmp;
 505              		.loc 1 60 5 view .LVU118
 506 0004 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2	@ MEM[(char *)fp_1(D) + 3B], MEM[(char *)fp_1(D) + 3B]
 507              	@ src/collide.c:61: 	*b = tmp;
  61:src/collide.c **** }
 508              		.loc 1 61 5 view .LVU119
 509 0006 C370     		strb	r3, [r0, #3]	@ tmp, MEM[(char *)fp_1(D) + 3B]
 510              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*b = tmp;
 511              		.loc 1 60 5 view .LVU120
 512 0008 4270     		strb	r2, [r0, #1]	@ MEM[(char *)fp_1(D) + 3B], MEM[(char *)fp_1(D) + 1B]
 513              	.LBE34:
 514              	.LBE33:
 515              	@ src/collide.c:65: {
  65:src/collide.c **** 	Swap(&(fp->e.inEdge1), &(fp->e.inEdge2));
 516              		.loc 1 65 1 view .LVU121
 517 000a 10B4     		push	{r4}	@
 518              	.LCFI6:
 519              		.cfi_def_cfa_offset 4
 520              		.cfi_offset 4, -4
 521              	.LBB36:
 522              	.LBB32:
 523              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*b = tmp;
 524              		.loc 1 60 5 view .LVU122
 525 000c 8478     		ldrb	r4, [r0, #2]	@ zero_extendqisi2	@ MEM[(char *)fp_1(D) + 2B], MEM[(char *)fp_1(D) + 2B]
 526              	@ src/collide.c:61: 	*b = tmp;
  61:src/collide.c **** }
 527              		.loc 1 61 5 view .LVU123
 528 000e 8170     		strb	r1, [r0, #2]	@ tmp, MEM[(char *)fp_1(D) + 2B]
 529              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*b = tmp;
 530              		.loc 1 60 5 view .LVU124
 531 0010 0470     		strb	r4, [r0]	@ MEM[(char *)fp_1(D) + 2B], MEM[(char *)fp_1(D)]
  61:src/collide.c **** }
 532              		.loc 1 61 2 is_stmt 1 view .LVU125
ARM GAS  /tmp/ccfh54Yn.s 			page 15


 533              	.LVL22:
  61:src/collide.c **** }
 534              		.loc 1 61 2 is_stmt 0 view .LVU126
 535              	.LBE32:
 536              	.LBE36:
  67:src/collide.c **** }
 537              		.loc 1 67 2 is_stmt 1 view .LVU127
 538              	.LBB37:
 539              	.LBI33:
  57:src/collide.c **** {
 540              		.loc 1 57 6 view .LVU128
 541              	.LBB35:
  59:src/collide.c **** 	*a = *b;
 542              		.loc 1 59 2 view .LVU129
  60:src/collide.c **** 	*b = tmp;
 543              		.loc 1 60 2 view .LVU130
  61:src/collide.c **** }
 544              		.loc 1 61 2 view .LVU131
  61:src/collide.c **** }
 545              		.loc 1 61 2 is_stmt 0 view .LVU132
 546              	.LBE35:
 547              	.LBE37:
 548              	@ src/collide.c:68: }
  68:src/collide.c **** 
 549              		.loc 1 68 1 view .LVU133
 550 0012 5DF8044B 		ldr	r4, [sp], #4	@,
 551              	.LCFI7:
 552              		.cfi_restore 4
 553              		.cfi_def_cfa_offset 0
 554 0016 7047     		bx	lr	@
 555              		.cfi_endproc
 556              	.LFE2:
 557              		.size	Flip, .-Flip
 558              		.section	.text.ClipSegmentToLine,"ax",%progbits
 559              		.align	1
 560              		.p2align 4,,15
 561              		.global	ClipSegmentToLine
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 565              		.fpu fpv5-sp-d16
 566              		.type	ClipSegmentToLine, %function
 567              	ClipSegmentToLine:
 568              	.LVL23:
 569              	.LFB3:
  72:src/collide.c **** 	// Start with no output points
 570              		.loc 1 72 1 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 24
 573              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/collide.c **** 
 574              		.loc 1 74 2 view .LVU135
  77:src/collide.c **** 	float distance1 = Dot(normal, vIn[1].v) - offset;
 575              		.loc 1 77 2 view .LVU136
 576              	@ src/collide.c:72: {
  72:src/collide.c **** 	// Start with no output points
 577              		.loc 1 72 1 is_stmt 0 view .LVU137
ARM GAS  /tmp/ccfh54Yn.s 			page 16


 578 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 579              	.LCFI8:
 580              		.cfi_def_cfa_offset 24
 581              		.cfi_offset 4, -24
 582              		.cfi_offset 5, -20
 583              		.cfi_offset 6, -16
 584              		.cfi_offset 7, -12
 585              		.cfi_offset 8, -8
 586              		.cfi_offset 14, -4
 587 0004 2DED028B 		vpush.64	{d8}	@
 588              	.LCFI9:
 589              		.cfi_def_cfa_offset 32
 590              		.cfi_offset 80, -32
 591              		.cfi_offset 81, -28
 592 0008 86B0     		sub	sp, sp, #24	@,,
 593              	.LCFI10:
 594              		.cfi_def_cfa_offset 56
 595              	@ src/collide.c:72: {
  72:src/collide.c **** 	// Start with no output points
 596              		.loc 1 72 1 view .LVU138
 597 000a F0EE418A 		vmov.f32	s17, s2	@ tmp189, offset
 598              	@ src/collide.c:77: 	float distance0 = Dot(normal, vIn[0].v) - offset;
  77:src/collide.c **** 	float distance1 = Dot(normal, vIn[1].v) - offset;
 599              		.loc 1 77 20 view .LVU139
 600 000e D1ED011A 		vldr.32	s3, [r1, #4]	@, vIn_20(D)->v
 601              	@ src/collide.c:72: {
  72:src/collide.c **** 	// Start with no output points
 602              		.loc 1 72 1 view .LVU140
 603 0012 0C46     		mov	r4, r1	@ vIn, tmp186
 604              	@ src/collide.c:77: 	float distance0 = Dot(normal, vIn[0].v) - offset;
  77:src/collide.c **** 	float distance1 = Dot(normal, vIn[1].v) - offset;
 605              		.loc 1 77 20 view .LVU141
 606 0014 91ED001A 		vldr.32	s2, [r1]	@, vIn_20(D)->v
 607              	.LVL24:
 608              	@ src/collide.c:78: 	float distance1 = Dot(normal, vIn[1].v) - offset;
  78:src/collide.c **** 
 609              		.loc 1 78 35 view .LVU142
 610 0018 01F10C07 		add	r7, r1, #12	@ tmp184, vIn,
 611              	@ src/collide.c:72: {
  72:src/collide.c **** 	// Start with no output points
 612              		.loc 1 72 1 view .LVU143
 613 001c 0546     		mov	r5, r0	@ vOut, tmp185
 614 001e 9046     		mov	r8, r2	@ clipEdge, tmp190
 615 0020 CDED010A 		vstr.32	s1, [sp, #4]	@ tmp188, normal
 616 0024 8DED000A 		vstr.32	s0, [sp]	@ tmp187, normal
 617              	@ src/collide.c:77: 	float distance0 = Dot(normal, vIn[0].v) - offset;
  77:src/collide.c **** 	float distance1 = Dot(normal, vIn[1].v) - offset;
 618              		.loc 1 77 20 view .LVU144
 619 0028 FFF7FEFF 		bl	Dot		@
 620              	.LVL25:
  77:src/collide.c **** 	float distance1 = Dot(normal, vIn[1].v) - offset;
 621              		.loc 1 77 20 view .LVU145
 622 002c B0EE408A 		vmov.f32	s16, s0	@ tmp191,
 623              	@ src/collide.c:78: 	float distance1 = Dot(normal, vIn[1].v) - offset;
  78:src/collide.c **** 
 624              		.loc 1 78 20 view .LVU146
 625 0030 D7ED011A 		vldr.32	s3, [r7, #4]	@, _2->v
ARM GAS  /tmp/ccfh54Yn.s 			page 17


 626 0034 94ED031A 		vldr.32	s2, [r4, #12]	@, _2->v
 627 0038 9DED000A 		vldr.32	s0, [sp]	@, normal
 628              	@ src/collide.c:77: 	float distance0 = Dot(normal, vIn[0].v) - offset;
  77:src/collide.c **** 	float distance1 = Dot(normal, vIn[1].v) - offset;
 629              		.loc 1 77 8 view .LVU147
 630 003c 38EE688A 		vsub.f32	s16, s16, s17	@ distance0, tmp191, offset
 631              	.LVL26:
  78:src/collide.c **** 
 632              		.loc 1 78 2 is_stmt 1 view .LVU148
 633              	@ src/collide.c:78: 	float distance1 = Dot(normal, vIn[1].v) - offset;
  78:src/collide.c **** 
 634              		.loc 1 78 20 is_stmt 0 view .LVU149
 635 0040 DDED010A 		vldr.32	s1, [sp, #4]	@, normal
 636 0044 FFF7FEFF 		bl	Dot		@
 637              	.LVL27:
 638              	@ src/collide.c:78: 	float distance1 = Dot(normal, vIn[1].v) - offset;
  78:src/collide.c **** 
 639              		.loc 1 78 8 view .LVU150
 640 0048 30EE680A 		vsub.f32	s0, s0, s17	@ distance1, tmp192, offset
 641              	.LVL28:
  81:src/collide.c **** 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
 642              		.loc 1 81 2 is_stmt 1 view .LVU151
 643              	@ src/collide.c:81: 	if (distance0 <= 0.0f) vOut[numOut++] = vIn[0];
  81:src/collide.c **** 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
 644              		.loc 1 81 5 is_stmt 0 view .LVU152
 645 004c B5EEC08A 		vcmpe.f32	s16, #0	@ distance0
 646 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 647 0054 1BD9     		bls	.L39		@,
 648              	@ src/collide.c:74: 	int numOut = 0;
  74:src/collide.c **** 
 649              		.loc 1 74 6 view .LVU153
 650 0056 0026     		movs	r6, #0	@ <retval>,
 651              	.LVL29:
 652              	.L22:
  82:src/collide.c **** 
 653              		.loc 1 82 2 is_stmt 1 view .LVU154
 654              	@ src/collide.c:82: 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
  82:src/collide.c **** 
 655              		.loc 1 82 5 is_stmt 0 view .LVU155
 656 0058 B5EEC00A 		vcmpe.f32	s0, #0	@ distance1
 657 005c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 658 0060 08D8     		bhi	.L24		@,
  82:src/collide.c **** 
 659              		.loc 1 82 25 is_stmt 1 discriminator 1 view .LVU156
 660              	.LVL30:
 661              	@ src/collide.c:82: 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
  82:src/collide.c **** 
 662              		.loc 1 82 40 is_stmt 0 discriminator 1 view .LVU157
 663 0062 06EB4603 		add	r3, r6, r6, lsl #1	@ tmp146, <retval>, <retval>,
 664 0066 0136     		adds	r6, r6, #1	@ <retval>, <retval>,
 665              	.LVL31:
  82:src/collide.c **** 
 666              		.loc 1 82 40 discriminator 1 view .LVU158
 667 0068 05EB8303 		add	r3, r5, r3, lsl #2	@ tmp148, vOut, tmp146,
 668 006c 97E80700 		ldm	r7, {r0, r1, r2}	@ tmp184,,,
 669 0070 83E80700 		stm	r3, {r0, r1, r2}	@ tmp148,,,
 670              	.L24:
ARM GAS  /tmp/ccfh54Yn.s 			page 18


  85:src/collide.c **** 	{
 671              		.loc 1 85 2 is_stmt 1 view .LVU159
 672              	@ src/collide.c:85: 	if (distance0 * distance1 < 0.0f)
  85:src/collide.c **** 	{
 673              		.loc 1 85 16 is_stmt 0 view .LVU160
 674 0074 68EE007A 		vmul.f32	s15, s16, s0	@ tmp151, distance0, distance1
 675              	@ src/collide.c:85: 	if (distance0 * distance1 < 0.0f)
  85:src/collide.c **** 	{
 676              		.loc 1 85 5 view .LVU161
 677 0078 F5EEC07A 		vcmpe.f32	s15, #0	@ tmp151
 678 007c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 679 0080 0BD4     		bmi	.L40		@,
 680              	@ src/collide.c:106: }
 106:src/collide.c **** 
 681              		.loc 1 106 1 view .LVU162
 682 0082 3046     		mov	r0, r6	@, <retval>
 683 0084 06B0     		add	sp, sp, #24	@,,
 684              	.LCFI11:
 685              		.cfi_remember_state
 686              		.cfi_def_cfa_offset 32
 687              		@ sp needed	@
 688 0086 BDEC028B 		vldm	sp!, {d8}	@
 689              	.LCFI12:
 690              		.cfi_restore 80
 691              		.cfi_restore 81
 692              		.cfi_def_cfa_offset 24
 693              	.LVL32:
 106:src/collide.c **** 
 694              		.loc 1 106 1 view .LVU163
 695 008a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 696              	.LVL33:
 697              	.L39:
 698              	.LCFI13:
 699              		.cfi_restore_state
  81:src/collide.c **** 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
 700              		.loc 1 81 25 is_stmt 1 discriminator 1 view .LVU164
 701              	@ src/collide.c:81: 	if (distance0 <= 0.0f) vOut[numOut++] = vIn[0];
  81:src/collide.c **** 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
 702              		.loc 1 81 40 is_stmt 0 discriminator 1 view .LVU165
 703 008e 94E80700 		ldm	r4, {r0, r1, r2}	@ vIn,,,
 704              	@ src/collide.c:81: 	if (distance0 <= 0.0f) vOut[numOut++] = vIn[0];
  81:src/collide.c **** 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
 705              		.loc 1 81 36 discriminator 1 view .LVU166
 706 0092 0126     		movs	r6, #1	@ <retval>,
 707              	@ src/collide.c:81: 	if (distance0 <= 0.0f) vOut[numOut++] = vIn[0];
  81:src/collide.c **** 	if (distance1 <= 0.0f) vOut[numOut++] = vIn[1];
 708              		.loc 1 81 40 discriminator 1 view .LVU167
 709 0094 85E80700 		stm	r5, {r0, r1, r2}	@ vOut,,,
 710 0098 DEE7     		b	.L22		@
 711              	.LVL34:
 712              	.L40:
 713              	.LBB38:
  88:src/collide.c **** 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn[0].v)));
 714              		.loc 1 88 3 is_stmt 1 view .LVU168
 715              	@ src/collide.c:88: 		float interp = distance0 / (distance0 - distance1);
  88:src/collide.c **** 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn[0].v)));
 716              		.loc 1 88 41 is_stmt 0 view .LVU169
ARM GAS  /tmp/ccfh54Yn.s 			page 19


 717 009a 78EE407A 		vsub.f32	s15, s16, s0	@ tmp153, distance0, distance1
 718              	@ src/collide.c:89: 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn
  89:src/collide.c **** 		if (distance0 > 0.0f)
 719              		.loc 1 89 20 view .LVU170
 720 009e D7ED010A 		vldr.32	s1, [r7, #4]	@, _2->v
 721 00a2 94ED030A 		vldr.32	s0, [r4, #12]	@, _2->v
 722              	.LVL35:
  89:src/collide.c **** 		if (distance0 > 0.0f)
 723              		.loc 1 89 20 view .LVU171
 724 00a6 D4ED011A 		vldr.32	s3, [r4, #4]	@, vIn_20(D)->v
 725              	@ src/collide.c:88: 		float interp = distance0 / (distance0 - distance1);
  88:src/collide.c **** 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn[0].v)));
 726              		.loc 1 88 9 view .LVU172
 727 00aa C8EE278A 		vdiv.f32	s17, s16, s15	@ interp, distance0, tmp153
 728              	.LVL36:
  89:src/collide.c **** 		if (distance0 > 0.0f)
 729              		.loc 1 89 3 is_stmt 1 view .LVU173
 730              	@ src/collide.c:89: 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn
  89:src/collide.c **** 		if (distance0 > 0.0f)
 731              		.loc 1 89 20 is_stmt 0 view .LVU174
 732 00ae 94ED001A 		vldr.32	s2, [r4]	@, vIn_20(D)->v
 733 00b2 FFF7FEFF 		bl	diffVec2		@
 734              	.LVL37:
 735 00b6 B0EE601A 		vmov.f32	s2, s1	@ tmp194,
 736 00ba F0EE400A 		vmov.f32	s1, s0	@, tmp193
 737 00be B0EE680A 		vmov.f32	s0, s17	@, interp
 738 00c2 FFF7FEFF 		bl	scaledVec2		@
 739              	.LVL38:
 740 00c6 F0EE601A 		vmov.f32	s3, s1	@ tmp196,
 741              	@ src/collide.c:89: 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn
  89:src/collide.c **** 		if (distance0 > 0.0f)
 742              		.loc 1 89 7 view .LVU175
 743 00ca 06EB4600 		add	r0, r6, r6, lsl #1	@ tmp166, <retval>, <retval>,
 744              	@ src/collide.c:89: 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn
  89:src/collide.c **** 		if (distance0 > 0.0f)
 745              		.loc 1 89 20 view .LVU176
 746 00ce D4ED010A 		vldr.32	s1, [r4, #4]	@, vIn_20(D)->v
 747 00d2 B0EE401A 		vmov.f32	s2, s0	@ tmp195,
 748 00d6 94ED000A 		vldr.32	s0, [r4]	@, vIn_20(D)->v
 749              	@ src/collide.c:89: 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn
  89:src/collide.c **** 		if (distance0 > 0.0f)
 750              		.loc 1 89 7 view .LVU177
 751 00da 05EB8005 		add	r5, r5, r0, lsl #2	@ _11, vOut, tmp166,
 752              	.LVL39:
 753              	@ src/collide.c:89: 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn
  89:src/collide.c **** 		if (distance0 > 0.0f)
 754              		.loc 1 89 20 view .LVU178
 755 00de FFF7FEFF 		bl	sumVec2		@
 756              	.LVL40:
 757              	@ src/collide.c:90: 		if (distance0 > 0.0f)
  90:src/collide.c **** 		{
 758              		.loc 1 90 6 view .LVU179
 759 00e2 B5EEC08A 		vcmpe.f32	s16, #0	@ distance0
 760              	@ src/collide.c:89: 		vOut[numOut].v = sumVec2(vIn[0].v, scaledVec2(interp , diffVec2(vIn[1].v, vIn
  89:src/collide.c **** 		if (distance0 > 0.0f)
 761              		.loc 1 89 20 view .LVU180
 762 00e6 85ED000A 		vstr.32	s0, [r5]	@ tmp197, _11->v
ARM GAS  /tmp/ccfh54Yn.s 			page 20


 763 00ea C5ED010A 		vstr.32	s1, [r5, #4]	@ tmp198, _11->v
  90:src/collide.c **** 		{
 764              		.loc 1 90 3 is_stmt 1 view .LVU181
 765              	@ src/collide.c:90: 		if (distance0 > 0.0f)
  90:src/collide.c **** 		{
 766              		.loc 1 90 6 is_stmt 0 view .LVU182
 767 00ee F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 768 00f2 0CDD     		ble	.L37		@,
  92:src/collide.c **** 			vOut[numOut].fp.e.inEdge1 = clipEdge;
 769              		.loc 1 92 4 is_stmt 1 view .LVU183
 770              	@ src/collide.c:92: 			vOut[numOut].fp = vIn[0].fp;
  92:src/collide.c **** 			vOut[numOut].fp.e.inEdge1 = clipEdge;
 771              		.loc 1 92 20 is_stmt 0 view .LVU184
 772 00f4 A268     		ldr	r2, [r4, #8]	@ vIn_20(D)->fp, vIn_20(D)->fp
 773              	@ src/collide.c:94: 			vOut[numOut].fp.e.inEdge2 = NO_EDGE;
  94:src/collide.c **** 		}
 774              		.loc 1 94 30 view .LVU185
 775 00f6 0023     		movs	r3, #0	@ tmp177,
 776              	@ src/collide.c:92: 			vOut[numOut].fp = vIn[0].fp;
  92:src/collide.c **** 			vOut[numOut].fp.e.inEdge1 = clipEdge;
 777              		.loc 1 92 20 view .LVU186
 778 00f8 AA60     		str	r2, [r5, #8]	@ vIn_20(D)->fp, _11->fp
  93:src/collide.c **** 			vOut[numOut].fp.e.inEdge2 = NO_EDGE;
 779              		.loc 1 93 4 is_stmt 1 view .LVU187
 780              	@ src/collide.c:93: 			vOut[numOut].fp.e.inEdge1 = clipEdge;
  93:src/collide.c **** 			vOut[numOut].fp.e.inEdge2 = NO_EDGE;
 781              		.loc 1 93 30 is_stmt 0 view .LVU188
 782 00fa 85F80880 		strb	r8, [r5, #8]	@ clipEdge, _11->fp.e.inEdge1
  94:src/collide.c **** 		}
 783              		.loc 1 94 4 is_stmt 1 view .LVU189
 784              	@ src/collide.c:94: 			vOut[numOut].fp.e.inEdge2 = NO_EDGE;
  94:src/collide.c **** 		}
 785              		.loc 1 94 30 is_stmt 0 view .LVU190
 786 00fe AB72     		strb	r3, [r5, #10]	@ tmp177, _11->fp.e.inEdge2
 787              	.L30:
 102:src/collide.c **** 	}
 788              		.loc 1 102 3 is_stmt 1 view .LVU191
 789 0100 0136     		adds	r6, r6, #1	@ <retval>, <retval>,
 790              	.LVL41:
 102:src/collide.c **** 	}
 791              		.loc 1 102 3 is_stmt 0 view .LVU192
 792              	.LBE38:
 105:src/collide.c **** }
 793              		.loc 1 105 2 is_stmt 1 view .LVU193
 794              	@ src/collide.c:106: }
 106:src/collide.c **** 
 795              		.loc 1 106 1 is_stmt 0 view .LVU194
 796 0102 3046     		mov	r0, r6	@, <retval>
 797 0104 06B0     		add	sp, sp, #24	@,,
 798              	.LCFI14:
 799              		.cfi_remember_state
 800              		.cfi_def_cfa_offset 32
 801              		@ sp needed	@
 802 0106 BDEC028B 		vldm	sp!, {d8}	@
 803              	.LCFI15:
 804              		.cfi_restore 80
 805              		.cfi_restore 81
ARM GAS  /tmp/ccfh54Yn.s 			page 21


 806              		.cfi_def_cfa_offset 24
 807              	.LVL42:
 106:src/collide.c **** 
 808              		.loc 1 106 1 view .LVU195
 809 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 810              	.LVL43:
 811              	.L37:
 812              	.LCFI16:
 813              		.cfi_restore_state
 814              	.LBB39:
  98:src/collide.c **** 			vOut[numOut].fp.e.outEdge1 = clipEdge;
 815              		.loc 1 98 4 is_stmt 1 view .LVU196
 816              	@ src/collide.c:98: 			vOut[numOut].fp = vIn[1].fp;
  98:src/collide.c **** 			vOut[numOut].fp.e.outEdge1 = clipEdge;
 817              		.loc 1 98 20 is_stmt 0 view .LVU197
 818 010e 6269     		ldr	r2, [r4, #20]	@ MEM[(struct ClipVertex *)vIn_20(D) + 12B].fp, MEM[(struct ClipVertex *)vIn_20(
 819              	@ src/collide.c:100: 			vOut[numOut].fp.e.outEdge2 = NO_EDGE;
 100:src/collide.c **** 		}
 820              		.loc 1 100 31 view .LVU198
 821 0110 0023     		movs	r3, #0	@ tmp181,
 822              	@ src/collide.c:98: 			vOut[numOut].fp = vIn[1].fp;
  98:src/collide.c **** 			vOut[numOut].fp.e.outEdge1 = clipEdge;
 823              		.loc 1 98 20 view .LVU199
 824 0112 AA60     		str	r2, [r5, #8]	@ MEM[(struct ClipVertex *)vIn_20(D) + 12B].fp, _11->fp
  99:src/collide.c **** 			vOut[numOut].fp.e.outEdge2 = NO_EDGE;
 825              		.loc 1 99 4 is_stmt 1 view .LVU200
 826              	@ src/collide.c:99: 			vOut[numOut].fp.e.outEdge1 = clipEdge;
  99:src/collide.c **** 			vOut[numOut].fp.e.outEdge2 = NO_EDGE;
 827              		.loc 1 99 31 is_stmt 0 view .LVU201
 828 0114 85F80980 		strb	r8, [r5, #9]	@ clipEdge, _11->fp.e.outEdge1
 100:src/collide.c **** 		}
 829              		.loc 1 100 4 is_stmt 1 view .LVU202
 830              	@ src/collide.c:100: 			vOut[numOut].fp.e.outEdge2 = NO_EDGE;
 100:src/collide.c **** 		}
 831              		.loc 1 100 31 is_stmt 0 view .LVU203
 832 0118 EB72     		strb	r3, [r5, #11]	@ tmp181, _11->fp.e.outEdge2
 833 011a F1E7     		b	.L30		@
 834              	.LBE39:
 835              		.cfi_endproc
 836              	.LFE3:
 837              		.size	ClipSegmentToLine, .-ClipSegmentToLine
 838              		.section	.text.Collide,"ax",%progbits
 839              		.align	1
 840              		.p2align 4,,15
 841              		.global	Collide
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 845              		.fpu fpv5-sp-d16
 846              		.type	Collide, %function
 847              	Collide:
 848              	.LVL44:
 849              	.LFB5:
 176:src/collide.c **** 
 177:src/collide.c **** // The normal points from A to B
 178:src/collide.c **** int Collide(struct Contact* contacts, struct Body* bodyA, struct Body* bodyB)
 179:src/collide.c **** {
ARM GAS  /tmp/ccfh54Yn.s 			page 22


 850              		.loc 1 179 1 is_stmt 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 336
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 180:src/collide.c **** 	// Setup
 181:src/collide.c **** 	struct Vec2 hA = scaledVec2(0.5f, bodyA->width);
 854              		.loc 1 181 2 view .LVU205
 855              	@ src/collide.c:181: 	struct Vec2 hA = scaledVec2(0.5f, bodyA->width);
 856              		.loc 1 181 19 is_stmt 0 view .LVU206
 857 0000 B6EE000A 		vmov.f32	s0, #5.0e-1	@,
 858 0004 D1ED090A 		vldr.32	s1, [r1, #36]	@, bodyA_56(D)->width
 859 0008 91ED0A1A 		vldr.32	s2, [r1, #40]	@, bodyA_56(D)->width
 860              	@ src/collide.c:179: {
 179:src/collide.c **** 	// Setup
 861              		.loc 1 179 1 view .LVU207
 862 000c 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 863              	.LCFI17:
 864              		.cfi_def_cfa_offset 36
 865              		.cfi_offset 4, -36
 866              		.cfi_offset 5, -32
 867              		.cfi_offset 6, -28
 868              		.cfi_offset 7, -24
 869              		.cfi_offset 8, -20
 870              		.cfi_offset 9, -16
 871              		.cfi_offset 10, -12
 872              		.cfi_offset 11, -8
 873              		.cfi_offset 14, -4
 874 0010 2DED068B 		vpush.64	{d8, d9, d10}	@
 875              	.LCFI18:
 876              		.cfi_def_cfa_offset 60
 877              		.cfi_offset 80, -60
 878              		.cfi_offset 81, -56
 879              		.cfi_offset 82, -52
 880              		.cfi_offset 83, -48
 881              		.cfi_offset 84, -44
 882              		.cfi_offset 85, -40
 883 0014 D5B0     		sub	sp, sp, #340	@,,
 884              	.LCFI19:
 885              		.cfi_def_cfa_offset 400
 886              	@ src/collide.c:179: {
 179:src/collide.c **** 	// Setup
 887              		.loc 1 179 1 view .LVU208
 888 0016 1446     		mov	r4, r2	@ bodyB, tmp659
 889 0018 0D46     		mov	r5, r1	@ bodyA, tmp658
 890 001a 8046     		mov	r8, r0	@ contacts, tmp657
 891              	@ src/collide.c:181: 	struct Vec2 hA = scaledVec2(0.5f, bodyA->width);
 892              		.loc 1 181 19 view .LVU209
 893 001c FFF7FEFF 		bl	scaledVec2		@
 894              	.LVL45:
 895              		.loc 1 181 19 view .LVU210
 896 0020 B0EE609A 		vmov.f32	s18, s1	@ tmp661,
 897 0024 B0EE408A 		vmov.f32	s16, s0	@ tmp171, tmp660
 898              	@ src/collide.c:182: 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 182:src/collide.c **** 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 899              		.loc 1 182 19 view .LVU211
 900 0028 D4ED090A 		vldr.32	s1, [r4, #36]	@, bodyB_58(D)->width
 901 002c 94ED0A1A 		vldr.32	s2, [r4, #40]	@, bodyB_58(D)->width
ARM GAS  /tmp/ccfh54Yn.s 			page 23


 902 0030 B6EE000A 		vmov.f32	s0, #5.0e-1	@,
 903              	@ src/collide.c:184: 	struct Vec2 posA = bodyA->position;
 183:src/collide.c **** 
 184:src/collide.c **** 	struct Vec2 posA = bodyA->position;
 904              		.loc 1 184 14 view .LVU212
 905 0034 06AE     		add	r6, sp, #24	@ tmp644,,
 906              	@ src/collide.c:181: 	struct Vec2 hA = scaledVec2(0.5f, bodyA->width);
 181:src/collide.c **** 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 907              		.loc 1 181 19 view .LVU213
 908 0036 8DED039A 		vstr.32	s18, [sp, #12]	@ tmp172, hA
 909              	.LVL46:
 182:src/collide.c **** 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 910              		.loc 1 182 2 is_stmt 1 view .LVU214
 911              	@ src/collide.c:181: 	struct Vec2 hA = scaledVec2(0.5f, bodyA->width);
 181:src/collide.c **** 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 912              		.loc 1 181 19 is_stmt 0 view .LVU215
 913 003a 8DED028A 		vstr.32	s16, [sp, #8]	@ tmp171, hA
 914              	@ src/collide.c:182: 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 182:src/collide.c **** 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 915              		.loc 1 182 19 view .LVU216
 916 003e FFF7FEFF 		bl	scaledVec2		@
 917              	.LVL47:
 918              	@ src/collide.c:185: 	struct Vec2 posB = bodyB->position;
 185:src/collide.c **** 	struct Vec2 posB = bodyB->position;
 919              		.loc 1 185 14 view .LVU217
 920 0042 08AF     		add	r7, sp, #32	@ tmp645,,
 921              	@ src/collide.c:182: 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 182:src/collide.c **** 
 922              		.loc 1 182 19 view .LVU218
 923 0044 F0EE408A 		vmov.f32	s17, s0	@ tmp181, tmp662
 924              	@ src/collide.c:188:     initMat22(&RotA, bodyA->rotation); initMat22(&RotB, bodyB->rotation);
 186:src/collide.c **** 
 187:src/collide.c **** 	struct Mat22 RotA, RotB;
 188:src/collide.c ****     initMat22(&RotA, bodyA->rotation); initMat22(&RotB, bodyB->rotation);
 925              		.loc 1 188 5 view .LVU219
 926 0048 0DF19809 		add	r9, sp, #152	@ tmp652,,
 927              	@ src/collide.c:188:     initMat22(&RotA, bodyA->rotation); initMat22(&RotB, bodyB->rotation);
 928              		.loc 1 188 40 view .LVU220
 929 004c 0DF1A80A 		add	r10, sp, #168	@ tmp653,,
 930              	@ src/collide.c:188:     initMat22(&RotA, bodyA->rotation); initMat22(&RotB, bodyB->rotation);
 931              		.loc 1 188 5 view .LVU221
 932 0050 95ED020A 		vldr.32	s0, [r5, #8]	@, bodyA_56(D)->rotation
 933              	@ src/collide.c:182: 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 182:src/collide.c **** 
 934              		.loc 1 182 19 view .LVU222
 935 0054 F0EE609A 		vmov.f32	s19, s1	@ tmp182, tmp663
 936 0058 CDED050A 		vstr.32	s1, [sp, #20]	@ tmp182, hB
 937              	.LVL48:
 184:src/collide.c **** 	struct Vec2 posB = bodyB->position;
 938              		.loc 1 184 2 is_stmt 1 view .LVU223
 939              	@ src/collide.c:182: 	struct Vec2 hB = scaledVec2(0.5f, bodyB->width);
 182:src/collide.c **** 
 940              		.loc 1 182 19 is_stmt 0 view .LVU224
 941 005c CDED048A 		vstr.32	s17, [sp, #16]	@ tmp181, hB
 942              	@ src/collide.c:184: 	struct Vec2 posA = bodyA->position;
 184:src/collide.c **** 	struct Vec2 posB = bodyB->position;
 943              		.loc 1 184 14 view .LVU225
ARM GAS  /tmp/ccfh54Yn.s 			page 24


 944 0060 95E80300 		ldm	r5, {r0, r1}	@ bodyA,,
 945 0064 86E80300 		stm	r6, {r0, r1}	@ tmp644,,
 185:src/collide.c **** 
 946              		.loc 1 185 2 is_stmt 1 view .LVU226
 947              	@ src/collide.c:185: 	struct Vec2 posB = bodyB->position;
 185:src/collide.c **** 
 948              		.loc 1 185 14 is_stmt 0 view .LVU227
 949 0068 94E80300 		ldm	r4, {r0, r1}	@ bodyB,,
 950 006c 87E80300 		stm	r7, {r0, r1}	@ tmp645,,
 187:src/collide.c ****     initMat22(&RotA, bodyA->rotation); initMat22(&RotB, bodyB->rotation);
 951              		.loc 1 187 2 is_stmt 1 view .LVU228
 952              		.loc 1 188 5 view .LVU229
 953 0070 4846     		mov	r0, r9	@, tmp652
 954 0072 FFF7FEFF 		bl	initMat22		@
 955              	.LVL49:
 956              		.loc 1 188 40 view .LVU230
 957 0076 5046     		mov	r0, r10	@, tmp653
 958 0078 94ED020A 		vldr.32	s0, [r4, #8]	@, bodyB_58(D)->rotation
 959 007c FFF7FEFF 		bl	initMat22		@
 960              	.LVL50:
 189:src/collide.c **** 
 190:src/collide.c **** 	struct Mat22 RotAT = Transpose(RotA);
 961              		.loc 1 190 2 view .LVU231
 962              	@ src/collide.c:190: 	struct Mat22 RotAT = Transpose(RotA);
 963              		.loc 1 190 23 is_stmt 0 view .LVU232
 964 0080 9DED260A 		vldr.32	s0, [sp, #152]	@, RotA
 965 0084 DDED270A 		vldr.32	s1, [sp, #156]	@, RotA
 966 0088 9DED281A 		vldr.32	s2, [sp, #160]	@, RotA
 967 008c DDED291A 		vldr.32	s3, [sp, #164]	@, RotA
 968 0090 FFF7FEFF 		bl	Transpose		@
 969              	.LVL51:
 970 0094 B0EE406A 		vmov.f32	s12, s0	@ tmp664,
 971 0098 F0EE606A 		vmov.f32	s13, s1	@ tmp665,
 972              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 191:src/collide.c **** 	struct Mat22 RotBT = Transpose(RotB);
 973              		.loc 1 191 23 view .LVU233
 974 009c 9DED2A0A 		vldr.32	s0, [sp, #168]	@, RotB
 975              	@ src/collide.c:190: 	struct Mat22 RotAT = Transpose(RotA);
 190:src/collide.c **** 	struct Mat22 RotBT = Transpose(RotB);
 976              		.loc 1 190 23 view .LVU234
 977 00a0 B0EE417A 		vmov.f32	s14, s2	@ tmp666,
 978              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 979              		.loc 1 191 23 view .LVU235
 980 00a4 DDED2B0A 		vldr.32	s1, [sp, #172]	@, RotB
 981              	@ src/collide.c:190: 	struct Mat22 RotAT = Transpose(RotA);
 190:src/collide.c **** 	struct Mat22 RotBT = Transpose(RotB);
 982              		.loc 1 190 23 view .LVU236
 983 00a8 F0EE617A 		vmov.f32	s15, s3	@ tmp667,
 984              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 985              		.loc 1 191 23 view .LVU237
 986 00ac 9DED2C1A 		vldr.32	s2, [sp, #176]	@, RotB
 987 00b0 DDED2D1A 		vldr.32	s3, [sp, #180]	@, RotB
 988              	@ src/collide.c:190: 	struct Mat22 RotAT = Transpose(RotA);
 190:src/collide.c **** 	struct Mat22 RotBT = Transpose(RotB);
 989              		.loc 1 190 23 view .LVU238
 990 00b4 8DED2E6A 		vstr.32	s12, [sp, #184]	@ tmp664, RotAT
 991 00b8 CDED2F6A 		vstr.32	s13, [sp, #188]	@ tmp665, RotAT
ARM GAS  /tmp/ccfh54Yn.s 			page 25


 992 00bc 8DED307A 		vstr.32	s14, [sp, #192]	@ tmp666, RotAT
 993 00c0 CDED317A 		vstr.32	s15, [sp, #196]	@ tmp667, RotAT
 994              		.loc 1 191 2 is_stmt 1 view .LVU239
 995              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 996              		.loc 1 191 23 is_stmt 0 view .LVU240
 997 00c4 FFF7FEFF 		bl	Transpose		@
 998              	.LVL52:
 999 00c8 B0EE406A 		vmov.f32	s12, s0	@ tmp668,
 1000              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 192:src/collide.c **** 
 193:src/collide.c **** 	struct Vec2 a1 = RotA.col1, a2 = RotA.col2;
 194:src/collide.c **** 	struct Vec2 b1 = RotB.col1, b2 = RotB.col2;
 195:src/collide.c **** 
 196:src/collide.c **** 	struct Vec2 dp = diffVec2(posB, posA);
 1001              		.loc 1 196 19 view .LVU241
 1002 00cc 97ED000A 		vldr.32	s0, [r7]	@, posB
 1003              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 191:src/collide.c **** 
 1004              		.loc 1 191 23 view .LVU242
 1005 00d0 F0EE606A 		vmov.f32	s13, s1	@ tmp669,
 1006              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 1007              		.loc 1 196 19 view .LVU243
 1008 00d4 D7ED010A 		vldr.32	s1, [r7, #4]	@, posB
 1009              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 191:src/collide.c **** 
 1010              		.loc 1 191 23 view .LVU244
 1011 00d8 B0EE417A 		vmov.f32	s14, s2	@ tmp670,
 1012              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 1013              		.loc 1 196 19 view .LVU245
 1014 00dc 96ED001A 		vldr.32	s2, [r6]	@, posA
 1015              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 191:src/collide.c **** 
 1016              		.loc 1 191 23 view .LVU246
 1017 00e0 F0EE617A 		vmov.f32	s15, s3	@ tmp671,
 1018              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 1019              		.loc 1 196 19 view .LVU247
 1020 00e4 D6ED011A 		vldr.32	s3, [r6, #4]	@, posA
 1021              	@ src/collide.c:191: 	struct Mat22 RotBT = Transpose(RotB);
 191:src/collide.c **** 
 1022              		.loc 1 191 23 view .LVU248
 1023 00e8 8DED326A 		vstr.32	s12, [sp, #200]	@ tmp668, RotBT
 1024 00ec CDED336A 		vstr.32	s13, [sp, #204]	@ tmp669, RotBT
 1025 00f0 8DED347A 		vstr.32	s14, [sp, #208]	@ tmp670, RotBT
 1026 00f4 CDED357A 		vstr.32	s15, [sp, #212]	@ tmp671, RotBT
 193:src/collide.c **** 	struct Vec2 b1 = RotB.col1, b2 = RotB.col2;
 1027              		.loc 1 193 2 is_stmt 1 view .LVU249
 194:src/collide.c **** 
 1028              		.loc 1 194 2 view .LVU250
 1029              		.loc 1 196 2 view .LVU251
 1030              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 1031              		.loc 1 196 19 is_stmt 0 view .LVU252
 1032 00f8 FFF7FEFF 		bl	diffVec2		@
 1033              	.LVL53:
 1034 00fc B0EE402A 		vmov.f32	s4, s0	@ tmp672,
 1035              	@ src/collide.c:197: 	struct Vec2 dA = matmul(RotAT, dp);
 197:src/collide.c **** 	struct Vec2 dA = matmul(RotAT, dp);
 1036              		.loc 1 197 19 view .LVU253
ARM GAS  /tmp/ccfh54Yn.s 			page 26


 1037 0100 9DED2E0A 		vldr.32	s0, [sp, #184]	@, RotAT
 1038              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 196:src/collide.c **** 	struct Vec2 dA = matmul(RotAT, dp);
 1039              		.loc 1 196 19 view .LVU254
 1040 0104 F0EE602A 		vmov.f32	s5, s1	@ tmp673,
 1041              	@ src/collide.c:197: 	struct Vec2 dA = matmul(RotAT, dp);
 1042              		.loc 1 197 19 view .LVU255
 1043 0108 DDED2F0A 		vldr.32	s1, [sp, #188]	@, RotAT
 1044 010c 9DED301A 		vldr.32	s2, [sp, #192]	@, RotAT
 1045 0110 DDED311A 		vldr.32	s3, [sp, #196]	@, RotAT
 1046              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 196:src/collide.c **** 	struct Vec2 dA = matmul(RotAT, dp);
 1047              		.loc 1 196 19 view .LVU256
 1048 0114 CDED0B2A 		vstr.32	s5, [sp, #44]	@ tmp226, dp
 1049              		.loc 1 197 2 is_stmt 1 view .LVU257
 1050              	@ src/collide.c:196: 	struct Vec2 dp = diffVec2(posB, posA);
 196:src/collide.c **** 	struct Vec2 dA = matmul(RotAT, dp);
 1051              		.loc 1 196 19 is_stmt 0 view .LVU258
 1052 0118 8DED0A2A 		vstr.32	s4, [sp, #40]	@ tmp225, dp
 1053              	@ src/collide.c:197: 	struct Vec2 dA = matmul(RotAT, dp);
 1054              		.loc 1 197 19 view .LVU259
 1055 011c FFF7FEFF 		bl	matmul		@
 1056              	.LVL54:
 1057 0120 B0EE407A 		vmov.f32	s14, s0	@ tmp674,
 1058              	@ src/collide.c:198: 	struct Vec2 dB = matmul(RotBT, dp);
 198:src/collide.c **** 	struct Vec2 dB = matmul(RotBT, dp);
 1059              		.loc 1 198 19 view .LVU260
 1060 0124 9DED320A 		vldr.32	s0, [sp, #200]	@, RotBT
 1061              	@ src/collide.c:197: 	struct Vec2 dA = matmul(RotAT, dp);
 197:src/collide.c **** 	struct Vec2 dA = matmul(RotAT, dp);
 1062              		.loc 1 197 19 view .LVU261
 1063 0128 F0EE607A 		vmov.f32	s15, s1	@ tmp675,
 1064              	@ src/collide.c:198: 	struct Vec2 dB = matmul(RotBT, dp);
 1065              		.loc 1 198 19 view .LVU262
 1066 012c DDED330A 		vldr.32	s1, [sp, #204]	@, RotBT
 1067 0130 9DED0A2A 		vldr.32	s4, [sp, #40]	@, dp
 1068 0134 DDED0B2A 		vldr.32	s5, [sp, #44]	@, dp
 1069 0138 9DED341A 		vldr.32	s2, [sp, #208]	@, RotBT
 1070 013c DDED351A 		vldr.32	s3, [sp, #212]	@, RotBT
 1071              	@ src/collide.c:197: 	struct Vec2 dA = matmul(RotAT, dp);
 197:src/collide.c **** 	struct Vec2 dA = matmul(RotAT, dp);
 1072              		.loc 1 197 19 view .LVU263
 1073 0140 8DED0C7A 		vstr.32	s14, [sp, #48]	@ tmp674, dA
 1074 0144 CDED0D7A 		vstr.32	s15, [sp, #52]	@ tmp675, dA
 1075              		.loc 1 198 2 is_stmt 1 view .LVU264
 1076              	@ src/collide.c:198: 	struct Vec2 dB = matmul(RotBT, dp);
 1077              		.loc 1 198 19 is_stmt 0 view .LVU265
 1078 0148 FFF7FEFF 		bl	matmul		@
 1079              	.LVL55:
 1080 014c B0EE407A 		vmov.f32	s14, s0	@ tmp676,
 1081              	@ src/collide.c:200: 	struct Mat22 C = matmulMM(RotAT, RotB);
 199:src/collide.c **** 
 200:src/collide.c **** 	struct Mat22 C = matmulMM(RotAT, RotB);
 1082              		.loc 1 200 19 view .LVU266
 1083 0150 9DED301A 		vldr.32	s2, [sp, #192]	@, RotAT
 1084              	@ src/collide.c:198: 	struct Vec2 dB = matmul(RotBT, dp);
 198:src/collide.c **** 	struct Vec2 dB = matmul(RotBT, dp);
ARM GAS  /tmp/ccfh54Yn.s 			page 27


 1085              		.loc 1 198 19 view .LVU267
 1086 0154 F0EE607A 		vmov.f32	s15, s1	@ tmp677,
 1087              	@ src/collide.c:200: 	struct Mat22 C = matmulMM(RotAT, RotB);
 1088              		.loc 1 200 19 view .LVU268
 1089 0158 DDED311A 		vldr.32	s3, [sp, #196]	@, RotAT
 1090 015c 9DED2C3A 		vldr.32	s6, [sp, #176]	@, RotB
 1091 0160 DDED2D3A 		vldr.32	s7, [sp, #180]	@, RotB
 1092 0164 9DED2E0A 		vldr.32	s0, [sp, #184]	@, RotAT
 1093 0168 DDED2F0A 		vldr.32	s1, [sp, #188]	@, RotAT
 1094 016c 9DED2A2A 		vldr.32	s4, [sp, #168]	@, RotB
 1095 0170 DDED2B2A 		vldr.32	s5, [sp, #172]	@, RotB
 1096              	@ src/collide.c:198: 	struct Vec2 dB = matmul(RotBT, dp);
 198:src/collide.c **** 	struct Vec2 dB = matmul(RotBT, dp);
 1097              		.loc 1 198 19 view .LVU269
 1098 0174 8DED0E7A 		vstr.32	s14, [sp, #56]	@ tmp676, dB
 1099 0178 CDED0F7A 		vstr.32	s15, [sp, #60]	@ tmp677, dB
 1100              		.loc 1 200 2 is_stmt 1 view .LVU270
 1101              	@ src/collide.c:200: 	struct Mat22 C = matmulMM(RotAT, RotB);
 1102              		.loc 1 200 19 is_stmt 0 view .LVU271
 1103 017c FFF7FEFF 		bl	matmulMM		@
 1104              	.LVL56:
 1105 0180 8DED381A 		vstr.32	s2, [sp, #224]	@ tmp680, C
 1106 0184 CDED391A 		vstr.32	s3, [sp, #228]	@ tmp681, C
 201:src/collide.c **** 	struct Mat22 absC = AbsM(C);
 1107              		.loc 1 201 2 is_stmt 1 view .LVU272
 1108              	@ src/collide.c:200: 	struct Mat22 C = matmulMM(RotAT, RotB);
 200:src/collide.c **** 	struct Mat22 absC = AbsM(C);
 1109              		.loc 1 200 19 is_stmt 0 view .LVU273
 1110 0188 8DED360A 		vstr.32	s0, [sp, #216]	@ tmp678, C
 1111 018c CDED370A 		vstr.32	s1, [sp, #220]	@ tmp679, C
 1112              	@ src/collide.c:201: 	struct Mat22 absC = AbsM(C);
 1113              		.loc 1 201 22 view .LVU274
 1114 0190 FFF7FEFF 		bl	AbsM		@
 1115              	.LVL57:
 1116 0194 8DED3C1A 		vstr.32	s2, [sp, #240]	@ tmp684, absC
 1117 0198 CDED3D1A 		vstr.32	s3, [sp, #244]	@ tmp685, absC
 202:src/collide.c **** 	struct Mat22 absCT = Transpose(absC);
 1118              		.loc 1 202 2 is_stmt 1 view .LVU275
 1119              	@ src/collide.c:201: 	struct Mat22 absC = AbsM(C);
 201:src/collide.c **** 	struct Mat22 absC = AbsM(C);
 1120              		.loc 1 201 22 is_stmt 0 view .LVU276
 1121 019c 8DED3A0A 		vstr.32	s0, [sp, #232]	@ tmp682, absC
 1122 01a0 CDED3B0A 		vstr.32	s1, [sp, #236]	@ tmp683, absC
 1123              	@ src/collide.c:202: 	struct Mat22 absCT = Transpose(absC);
 1124              		.loc 1 202 23 view .LVU277
 1125 01a4 FFF7FEFF 		bl	Transpose		@
 1126              	.LVL58:
 1127 01a8 B0EE407A 		vmov.f32	s14, s0	@ tmp686,
 1128              	@ src/collide.c:205: 	struct Vec2 faceA = diffVec2(Absv(dA), hA);
 203:src/collide.c **** 
 204:src/collide.c **** 	// Box A faces
 205:src/collide.c **** 	struct Vec2 faceA = diffVec2(Absv(dA), hA);
 1129              		.loc 1 205 22 view .LVU278
 1130 01ac 9DED0C0A 		vldr.32	s0, [sp, #48]	@, dA
 1131              	@ src/collide.c:202: 	struct Mat22 absCT = Transpose(absC);
 202:src/collide.c **** 	struct Mat22 absCT = Transpose(absC);
 1132              		.loc 1 202 23 view .LVU279
ARM GAS  /tmp/ccfh54Yn.s 			page 28


 1133 01b0 F0EE607A 		vmov.f32	s15, s1	@ tmp687,
 1134              	@ src/collide.c:205: 	struct Vec2 faceA = diffVec2(Absv(dA), hA);
 1135              		.loc 1 205 22 view .LVU280
 1136 01b4 DDED0D0A 		vldr.32	s1, [sp, #52]	@, dA
 1137              	@ src/collide.c:202: 	struct Mat22 absCT = Transpose(absC);
 202:src/collide.c **** 	struct Mat22 absCT = Transpose(absC);
 1138              		.loc 1 202 23 view .LVU281
 1139 01b8 8DED401A 		vstr.32	s2, [sp, #256]	@ tmp688, absCT
 1140 01bc 8DED3E7A 		vstr.32	s14, [sp, #248]	@ tmp686, absCT
 1141 01c0 CDED3F7A 		vstr.32	s15, [sp, #252]	@ tmp687, absCT
 1142 01c4 CDED411A 		vstr.32	s3, [sp, #260]	@ tmp689, absCT
 1143              		.loc 1 205 2 is_stmt 1 view .LVU282
 1144              	@ src/collide.c:205: 	struct Vec2 faceA = diffVec2(Absv(dA), hA);
 1145              		.loc 1 205 22 is_stmt 0 view .LVU283
 1146 01c8 FFF7FEFF 		bl	Absv		@
 1147              	.LVL59:
 1148 01cc 9DED021A 		vldr.32	s2, [sp, #8]	@, hA
 1149 01d0 DDED031A 		vldr.32	s3, [sp, #12]	@, hA
 1150 01d4 8DED1A0A 		vstr.32	s0, [sp, #104]	@ tmp690, D.5731
 1151 01d8 CDED1B0A 		vstr.32	s1, [sp, #108]	@ tmp691, D.5731
 1152 01dc FFF7FEFF 		bl	diffVec2		@
 1153              	.LVL60:
 1154 01e0 F0EE607A 		vmov.f32	s15, s1	@ tmp693,
 1155              	@ src/collide.c:206:     subfromVec2(&faceA, matmul(absC, hB));
 206:src/collide.c ****     subfromVec2(&faceA, matmul(absC, hB));
 1156              		.loc 1 206 5 view .LVU284
 1157 01e4 9DED042A 		vldr.32	s4, [sp, #16]	@, hB
 1158              	@ src/collide.c:205: 	struct Vec2 faceA = diffVec2(Absv(dA), hA);
 205:src/collide.c ****     subfromVec2(&faceA, matmul(absC, hB));
 1159              		.loc 1 205 22 view .LVU285
 1160 01e8 B0EE407A 		vmov.f32	s14, s0	@ tmp692,
 1161              	@ src/collide.c:206:     subfromVec2(&faceA, matmul(absC, hB));
 1162              		.loc 1 206 5 view .LVU286
 1163 01ec DDED3B0A 		vldr.32	s1, [sp, #236]	@, absC
 1164 01f0 9DED3A0A 		vldr.32	s0, [sp, #232]	@, absC
 1165 01f4 DDED052A 		vldr.32	s5, [sp, #20]	@, hB
 1166 01f8 9DED3C1A 		vldr.32	s2, [sp, #240]	@, absC
 1167 01fc DDED3D1A 		vldr.32	s3, [sp, #244]	@, absC
 1168              	@ src/collide.c:205: 	struct Vec2 faceA = diffVec2(Absv(dA), hA);
 205:src/collide.c ****     subfromVec2(&faceA, matmul(absC, hB));
 1169              		.loc 1 205 22 view .LVU287
 1170 0200 CDED117A 		vstr.32	s15, [sp, #68]	@ tmp693, faceA
 1171              		.loc 1 206 5 is_stmt 1 view .LVU288
 1172              	@ src/collide.c:205: 	struct Vec2 faceA = diffVec2(Absv(dA), hA);
 205:src/collide.c ****     subfromVec2(&faceA, matmul(absC, hB));
 1173              		.loc 1 205 22 is_stmt 0 view .LVU289
 1174 0204 8DED107A 		vstr.32	s14, [sp, #64]	@ tmp692, faceA
 1175              	@ src/collide.c:206:     subfromVec2(&faceA, matmul(absC, hB));
 1176              		.loc 1 206 5 view .LVU290
 1177 0208 FFF7FEFF 		bl	matmul		@
 1178              	.LVL61:
 1179 020c 10A8     		add	r0, sp, #64	@ tmp732,,
 1180 020e 8DED1C0A 		vstr.32	s0, [sp, #112]	@ tmp694, D.5732
 1181 0212 CDED1D0A 		vstr.32	s1, [sp, #116]	@ tmp695, D.5732
 1182 0216 FFF7FEFF 		bl	subfromVec2		@
 1183              	.LVL62:
 207:src/collide.c ****     
ARM GAS  /tmp/ccfh54Yn.s 			page 29


 208:src/collide.c **** 	if (faceA.x > 0.0f || faceA.y > 0.0f)
 1184              		.loc 1 208 2 is_stmt 1 view .LVU291
 1185              	@ src/collide.c:208: 	if (faceA.x > 0.0f || faceA.y > 0.0f)
 1186              		.loc 1 208 5 is_stmt 0 view .LVU292
 1187 021a DDED107A 		vldr.32	s15, [sp, #64]	@ faceA.x, faceA.x
 1188 021e F5EEC07A 		vcmpe.f32	s15, #0	@ faceA.x
 1189 0222 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1190 0226 06DC     		bgt	.L45		@,
 1191              	@ src/collide.c:208: 	if (faceA.x > 0.0f || faceA.y > 0.0f)
 1192              		.loc 1 208 21 discriminator 1 view .LVU293
 1193 0228 DDED117A 		vldr.32	s15, [sp, #68]	@ faceA.y, faceA.y
 1194 022c F5EEC07A 		vcmpe.f32	s15, #0	@ faceA.y
 1195 0230 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1196 0234 06DD     		ble	.L90		@,
 1197              	.LVL63:
 1198              	.L45:
 1199              	@ src/collide.c:209: 		return 0;
 209:src/collide.c **** 		return 0;
 1200              		.loc 1 209 10 view .LVU294
 1201 0236 0024     		movs	r4, #0	@ <retval>,
 1202              	.L41:
 1203              	@ src/collide.c:370: }
 210:src/collide.c **** 
 211:src/collide.c **** 	// Box B faces
 212:src/collide.c **** //	Vec2 faceB = Absv(dB) - absCT * hA - hB;
 213:src/collide.c **** 
 214:src/collide.c **** 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 215:src/collide.c ****     subfromVec2(&faceB, matmul(absCT, hA));
 216:src/collide.c ****     
 217:src/collide.c **** 	if (faceB.x > 0.0f || faceB.y > 0.0f)
 218:src/collide.c **** 		return 0;
 219:src/collide.c **** 
 220:src/collide.c **** 	// Find best axis
 221:src/collide.c **** 	enum Axis axis;
 222:src/collide.c **** 	float separation;
 223:src/collide.c **** 	struct Vec2 normal;
 224:src/collide.c **** 
 225:src/collide.c **** 	// Box A faces
 226:src/collide.c **** 	axis = FACE_A_X;
 227:src/collide.c **** 	separation = faceA.x;
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 229:src/collide.c **** 
 230:src/collide.c **** 	const float relativeTol = 0.95f;
 231:src/collide.c **** 	const float absoluteTol = 0.01f;
 232:src/collide.c **** 
 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 234:src/collide.c **** 	{
 235:src/collide.c **** 		axis = FACE_A_Y;
 236:src/collide.c **** 		separation = faceA.y;
 237:src/collide.c **** 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 238:src/collide.c **** 	}
 239:src/collide.c **** 
 240:src/collide.c **** 	// Box B faces
 241:src/collide.c **** 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 242:src/collide.c **** 	{
 243:src/collide.c **** 		axis = FACE_B_X;
 244:src/collide.c **** 		separation = faceB.x;
ARM GAS  /tmp/ccfh54Yn.s 			page 30


 245:src/collide.c **** 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 246:src/collide.c **** 	}
 247:src/collide.c **** 
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 249:src/collide.c **** 	{
 250:src/collide.c **** 		axis = FACE_B_Y;
 251:src/collide.c **** 		separation = faceB.y;
 252:src/collide.c **** 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 253:src/collide.c **** 	}
 254:src/collide.c **** 
 255:src/collide.c **** 	// Setup clipping plane data based on the separating axis
 256:src/collide.c **** 	struct Vec2 frontNormal, sideNormal;
 257:src/collide.c **** 	struct ClipVertex incidentEdge[2];
 258:src/collide.c ****     initClipVertex(&incidentEdge[0]);
 259:src/collide.c ****     initClipVertex(&incidentEdge[1]);
 260:src/collide.c **** 
 261:src/collide.c **** 	float front, negSide, posSide;
 262:src/collide.c **** 	char negEdge, posEdge;
 263:src/collide.c **** 
 264:src/collide.c **** 	// Compute the clipping lines and the line segment to be clipped.
 265:src/collide.c **** 	switch (axis)
 266:src/collide.c **** 	{
 267:src/collide.c **** 	case FACE_A_X:
 268:src/collide.c **** 		{
 269:src/collide.c **** 			frontNormal = normal;
 270:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.x;
 271:src/collide.c **** 			sideNormal = RotA.col2;
 272:src/collide.c **** 			float side = Dot(posA, sideNormal);
 273:src/collide.c **** 			negSide = -side + hA.y;
 274:src/collide.c **** 			posSide =  side + hA.y;
 275:src/collide.c **** 			negEdge = EDGE3;
 276:src/collide.c **** 			posEdge = EDGE1;
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 278:src/collide.c **** 		}
 279:src/collide.c **** 		break;
 280:src/collide.c **** 
 281:src/collide.c **** 	case FACE_A_Y:
 282:src/collide.c **** 		{
 283:src/collide.c **** 			frontNormal = normal;
 284:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.y;
 285:src/collide.c **** 			sideNormal = RotA.col1;
 286:src/collide.c **** 			float side = Dot(posA, sideNormal);
 287:src/collide.c **** 			negSide = -side + hA.x;
 288:src/collide.c **** 			posSide =  side + hA.x;
 289:src/collide.c **** 			negEdge = EDGE2;
 290:src/collide.c **** 			posEdge = EDGE4;
 291:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 292:src/collide.c **** 		}
 293:src/collide.c **** 		break;
 294:src/collide.c **** 
 295:src/collide.c **** 	case FACE_B_X:
 296:src/collide.c **** 		{
 297:src/collide.c **** 			frontNormal = minusVec2(normal);
 298:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.x;
 299:src/collide.c **** 			sideNormal = RotB.col2;
 300:src/collide.c **** 			float side = Dot(posB, sideNormal);
 301:src/collide.c **** 			negSide = -side + hB.y;
ARM GAS  /tmp/ccfh54Yn.s 			page 31


 302:src/collide.c **** 			posSide =  side + hB.y;
 303:src/collide.c **** 			negEdge = EDGE3;
 304:src/collide.c **** 			posEdge = EDGE1;
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 306:src/collide.c **** 		}
 307:src/collide.c **** 		break;
 308:src/collide.c **** 
 309:src/collide.c **** 	case FACE_B_Y:
 310:src/collide.c **** 		{
 311:src/collide.c **** 			frontNormal = minusVec2(normal);
 312:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.y;
 313:src/collide.c **** 			sideNormal = RotB.col1;
 314:src/collide.c **** 			float side = Dot(posB, sideNormal);
 315:src/collide.c **** 			negSide = -side + hB.x;
 316:src/collide.c **** 			posSide =  side + hB.x;
 317:src/collide.c **** 			negEdge = EDGE2;
 318:src/collide.c **** 			posEdge = EDGE4;
 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 320:src/collide.c **** 		}
 321:src/collide.c **** 		break;
 322:src/collide.c **** 	}
 323:src/collide.c **** 
 324:src/collide.c **** 	// clip other face with 5 box planes (1 face plane, 4 edge planes)
 325:src/collide.c **** 
 326:src/collide.c **** 	struct ClipVertex clipPoints1[2];
 327:src/collide.c **** 	struct ClipVertex clipPoints2[2];
 328:src/collide.c ****     
 329:src/collide.c ****     initClipVertex(&clipPoints1[0]);
 330:src/collide.c ****     initClipVertex(&clipPoints1[1]);
 331:src/collide.c ****     initClipVertex(&clipPoints2[0]);
 332:src/collide.c ****     initClipVertex(&clipPoints2[1]);
 333:src/collide.c ****     
 334:src/collide.c **** 	int np;
 335:src/collide.c **** 
 336:src/collide.c **** 	// Clip to box side 1
 337:src/collide.c **** 	np = ClipSegmentToLine(clipPoints1, incidentEdge, minusVec2(sideNormal), negSide, negEdge);
 338:src/collide.c **** 
 339:src/collide.c **** 	if (np < 2)
 340:src/collide.c **** 		return 0;
 341:src/collide.c **** 
 342:src/collide.c **** 	// Clip to negative box side 1
 343:src/collide.c **** 	np = ClipSegmentToLine(clipPoints2, clipPoints1,  sideNormal, posSide, posEdge);
 344:src/collide.c **** 
 345:src/collide.c **** 	if (np < 2)
 346:src/collide.c **** 		return 0;
 347:src/collide.c **** 
 348:src/collide.c **** 	// Now clipPoints2 contains the clipping points.
 349:src/collide.c **** 	// Due to roundoff, it is possible that clipping removes all points.
 350:src/collide.c **** 
 351:src/collide.c **** 	int numContacts = 0;
 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 353:src/collide.c **** 	{
 354:src/collide.c **** 		float separation = Dot(frontNormal, clipPoints2[i].v) - front;
 355:src/collide.c **** 
 356:src/collide.c **** 		if (separation <= 0)
 357:src/collide.c **** 		{
 358:src/collide.c **** 			contacts[numContacts].separation = separation;
ARM GAS  /tmp/ccfh54Yn.s 			page 32


 359:src/collide.c **** 			contacts[numContacts].normal = normal;
 360:src/collide.c **** 			// slide contact point onto reference face (easy to cull)
 361:src/collide.c **** 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(separation, frontNormal))
 362:src/collide.c **** 			contacts[numContacts].feature = clipPoints2[i].fp;
 363:src/collide.c **** 			if (axis == FACE_B_X || axis == FACE_B_Y)
 364:src/collide.c **** 				Flip(&contacts[numContacts].feature);
 365:src/collide.c **** 			++numContacts;
 366:src/collide.c **** 		}
 367:src/collide.c **** 	}
 368:src/collide.c **** 
 369:src/collide.c **** 	return numContacts;
 370:src/collide.c **** }...
 1204              		.loc 1 370 1 view .LVU295
 1205 0238 2046     		mov	r0, r4	@, <retval>
 1206 023a 55B0     		add	sp, sp, #340	@,,
 1207              	.LCFI20:
 1208              		.cfi_remember_state
 1209              		.cfi_def_cfa_offset 60
 1210              		@ sp needed	@
 1211 023c BDEC068B 		vldm	sp!, {d8-d10}	@,
 1212              	.LCFI21:
 1213              		.cfi_restore 84
 1214              		.cfi_restore 85
 1215              		.cfi_restore 82
 1216              		.cfi_restore 83
 1217              		.cfi_restore 80
 1218              		.cfi_restore 81
 1219              		.cfi_def_cfa_offset 36
 1220              	.LVL64:
 1221              		.loc 1 370 1 view .LVU296
 1222 0240 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1223              	.LVL65:
 1224              	.L90:
 1225              	.LCFI22:
 1226              		.cfi_restore_state
 214:src/collide.c **** 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 1227              		.loc 1 214 2 is_stmt 1 view .LVU297
 1228              	@ src/collide.c:214: 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 214:src/collide.c **** 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 1229              		.loc 1 214 22 is_stmt 0 view .LVU298
 1230 0244 9DED0E0A 		vldr.32	s0, [sp, #56]	@, dB
 1231 0248 DDED0F0A 		vldr.32	s1, [sp, #60]	@, dB
 1232 024c FFF7FEFF 		bl	Absv		@
 1233              	.LVL66:
 1234 0250 9DED041A 		vldr.32	s2, [sp, #16]	@, hB
 1235 0254 DDED051A 		vldr.32	s3, [sp, #20]	@, hB
 1236 0258 8DED1E0A 		vstr.32	s0, [sp, #120]	@ tmp696, D.5737
 1237 025c CDED1F0A 		vstr.32	s1, [sp, #124]	@ tmp697, D.5737
 1238 0260 FFF7FEFF 		bl	diffVec2		@
 1239              	.LVL67:
 1240 0264 F0EE607A 		vmov.f32	s15, s1	@ tmp699,
 1241              	@ src/collide.c:215:     subfromVec2(&faceB, matmul(absCT, hA));
 215:src/collide.c ****     subfromVec2(&faceB, matmul(absCT, hA));
 1242              		.loc 1 215 5 view .LVU299
 1243 0268 9DED022A 		vldr.32	s4, [sp, #8]	@, hA
 1244              	@ src/collide.c:214: 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 214:src/collide.c **** 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
ARM GAS  /tmp/ccfh54Yn.s 			page 33


 1245              		.loc 1 214 22 view .LVU300
 1246 026c B0EE407A 		vmov.f32	s14, s0	@ tmp698,
 1247              	@ src/collide.c:215:     subfromVec2(&faceB, matmul(absCT, hA));
 215:src/collide.c ****     subfromVec2(&faceB, matmul(absCT, hA));
 1248              		.loc 1 215 5 view .LVU301
 1249 0270 DDED3F0A 		vldr.32	s1, [sp, #252]	@, absCT
 1250 0274 9DED3E0A 		vldr.32	s0, [sp, #248]	@, absCT
 1251 0278 DDED032A 		vldr.32	s5, [sp, #12]	@, hA
 1252 027c 9DED401A 		vldr.32	s2, [sp, #256]	@, absCT
 1253 0280 DDED411A 		vldr.32	s3, [sp, #260]	@, absCT
 1254              	@ src/collide.c:214: 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 214:src/collide.c **** 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 1255              		.loc 1 214 22 view .LVU302
 1256 0284 CDED137A 		vstr.32	s15, [sp, #76]	@ tmp699, faceB
 215:src/collide.c ****     subfromVec2(&faceB, matmul(absCT, hA));
 1257              		.loc 1 215 5 is_stmt 1 view .LVU303
 1258              	@ src/collide.c:214: 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 214:src/collide.c **** 	struct Vec2 faceB = diffVec2(Absv(dB), hB);
 1259              		.loc 1 214 22 is_stmt 0 view .LVU304
 1260 0288 8DED127A 		vstr.32	s14, [sp, #72]	@ tmp698, faceB
 1261              	@ src/collide.c:215:     subfromVec2(&faceB, matmul(absCT, hA));
 215:src/collide.c ****     subfromVec2(&faceB, matmul(absCT, hA));
 1262              		.loc 1 215 5 view .LVU305
 1263 028c FFF7FEFF 		bl	matmul		@
 1264              	.LVL68:
 1265 0290 12A8     		add	r0, sp, #72	@ tmp733,,
 1266 0292 8DED200A 		vstr.32	s0, [sp, #128]	@ tmp700, D.5738
 1267 0296 CDED210A 		vstr.32	s1, [sp, #132]	@ tmp701, D.5738
 1268 029a FFF7FEFF 		bl	subfromVec2		@
 1269              	.LVL69:
 217:src/collide.c **** 	if (faceB.x > 0.0f || faceB.y > 0.0f)
 1270              		.loc 1 217 2 is_stmt 1 view .LVU306
 1271              	@ src/collide.c:217: 	if (faceB.x > 0.0f || faceB.y > 0.0f)
 217:src/collide.c **** 	if (faceB.x > 0.0f || faceB.y > 0.0f)
 1272              		.loc 1 217 5 is_stmt 0 view .LVU307
 1273 029e DDED127A 		vldr.32	s15, [sp, #72]	@ faceB.x, faceB.x
 1274 02a2 F5EEC07A 		vcmpe.f32	s15, #0	@ faceB.x
 1275 02a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1276 02aa C4DC     		bgt	.L45		@,
 1277              	@ src/collide.c:217: 	if (faceB.x > 0.0f || faceB.y > 0.0f)
 217:src/collide.c **** 	if (faceB.x > 0.0f || faceB.y > 0.0f)
 1278              		.loc 1 217 21 discriminator 1 view .LVU308
 1279 02ac DDED137A 		vldr.32	s15, [sp, #76]	@ faceB.y, faceB.y
 1280 02b0 F5EEC07A 		vcmpe.f32	s15, #0	@ faceB.y
 1281 02b4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1282 02b8 BDDC     		bgt	.L45		@,
 221:src/collide.c **** 	enum Axis axis;
 1283              		.loc 1 221 2 is_stmt 1 view .LVU309
 222:src/collide.c **** 	float separation;
 1284              		.loc 1 222 2 view .LVU310
 223:src/collide.c **** 	struct Vec2 normal;
 1285              		.loc 1 223 2 view .LVU311
 226:src/collide.c **** 	axis = FACE_A_X;
 1286              		.loc 1 226 2 view .LVU312
 1287              	.LVL70:
 227:src/collide.c **** 	separation = faceA.x;
 1288              		.loc 1 227 2 view .LVU313
ARM GAS  /tmp/ccfh54Yn.s 			page 34


 1289              	@ src/collide.c:228: 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 1290              		.loc 1 228 9 is_stmt 0 view .LVU314
 1291 02ba DDED0C7A 		vldr.32	s15, [sp, #48]	@ dA.x, dA.x
 1292              	@ src/collide.c:227: 	separation = faceA.x;
 227:src/collide.c **** 	separation = faceA.x;
 1293              		.loc 1 227 13 view .LVU315
 1294 02be 9DED10AA 		vldr.32	s20, [sp, #64]	@ separation, faceA.x
 1295              	.LVL71:
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 1296              		.loc 1 228 2 is_stmt 1 view .LVU316
 1297              	@ src/collide.c:228: 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 1298              		.loc 1 228 9 is_stmt 0 view .LVU317
 1299 02c2 F5EEC07A 		vcmpe.f32	s15, #0	@ dA.x
 1300 02c6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1301 02ca 40F38781 		ble	.L81		@,
 1302              	@ src/collide.c:228: 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 1303              		.loc 1 228 9 discriminator 1 view .LVU318
 1304 02ce 14AD     		add	r5, sp, #80	@ tmp651,,
 1305              	.LVL72:
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 1306              		.loc 1 228 9 discriminator 1 view .LVU319
 1307 02d0 99E80300 		ldm	r9, {r0, r1}	@ tmp652,,
 1308 02d4 85E80300 		stm	r5, {r0, r1}	@ tmp651,,
 1309              	.L48:
 230:src/collide.c **** 	const float relativeTol = 0.95f;
 1310              		.loc 1 230 2 is_stmt 1 view .LVU320
 1311              	.LVL73:
 231:src/collide.c **** 	const float absoluteTol = 0.01f;
 1312              		.loc 1 231 2 view .LVU321
 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 1313              		.loc 1 233 2 view .LVU322
 1314              	@ src/collide.c:233: 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 1315              		.loc 1 233 28 is_stmt 0 view .LVU323
 1316 02d8 DFEDC6AA 		vldr.32	s21, .L94	@ tmp373,
 1317              	@ src/collide.c:233: 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 1318              		.loc 1 233 41 view .LVU324
 1319 02dc 9FEDC67A 		vldr.32	s14, .L94+4	@ tmp374,
 1320              	@ src/collide.c:233: 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 1321              		.loc 1 233 28 view .LVU325
 1322 02e0 6AEE2A7A 		vmul.f32	s15, s20, s21	@ _9, separation, tmp373
 1323              	@ src/collide.c:233: 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 1324              		.loc 1 233 11 view .LVU326
 1325 02e4 9DED11AA 		vldr.32	s20, [sp, #68]	@ _8, faceA.y
 1326              	.LVL74:
 1327              	@ src/collide.c:233: 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 1328              		.loc 1 233 41 view .LVU327
 1329 02e8 F0EE676A 		vmov.f32	s13, s15	@ _11, _9
 1330 02ec E9EE076A 		vfma.f32	s13, s18, s14	@ _11, tmp172, tmp374
 1331              	@ src/collide.c:233: 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
ARM GAS  /tmp/ccfh54Yn.s 			page 35


 233:src/collide.c **** 	if (faceA.y > relativeTol * separation + absoluteTol * hA.y)
 1332              		.loc 1 233 5 view .LVU328
 1333 02f0 B4EEE6AA 		vcmpe.f32	s20, s13	@ _8, _11
 1334 02f4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1335 02f8 00F3D180 		bgt	.L91		@,
 1336              	@ src/collide.c:226: 	axis = FACE_A_X;
 226:src/collide.c **** 	axis = FACE_A_X;
 1337              		.loc 1 226 7 view .LVU329
 1338 02fc 0024     		movs	r4, #0	@ axis,
 1339              	.LVL75:
 1340              	.L49:
 241:src/collide.c **** 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 1341              		.loc 1 241 2 is_stmt 1 view .LVU330
 1342              	@ src/collide.c:241: 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 241:src/collide.c **** 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 1343              		.loc 1 241 41 is_stmt 0 view .LVU331
 1344 02fe F0EE676A 		vmov.f32	s13, s15	@ _16, _9
 1345 0302 9FEDBD7A 		vldr.32	s14, .L94+4	@ tmp393,
 1346              	@ src/collide.c:241: 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 241:src/collide.c **** 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 1347              		.loc 1 241 11 view .LVU332
 1348 0306 9DED12AA 		vldr.32	s20, [sp, #72]	@ _13, faceB.x
 1349              	@ src/collide.c:241: 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 241:src/collide.c **** 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 1350              		.loc 1 241 41 view .LVU333
 1351 030a E8EE876A 		vfma.f32	s13, s17, s14	@ _16, tmp181, tmp393
 1352              	@ src/collide.c:241: 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 241:src/collide.c **** 	if (faceB.x > relativeTol * separation + absoluteTol * hB.x)
 1353              		.loc 1 241 5 view .LVU334
 1354 030e B4EEE6AA 		vcmpe.f32	s20, s13	@ _13, _16
 1355 0312 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1356 0316 40F30E81 		ble	.L84		@,
 243:src/collide.c **** 		axis = FACE_B_X;
 1357              		.loc 1 243 3 is_stmt 1 view .LVU335
 1358              	.LVL76:
 244:src/collide.c **** 		separation = faceB.x;
 1359              		.loc 1 244 3 view .LVU336
 245:src/collide.c **** 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 1360              		.loc 1 245 3 view .LVU337
 1361              	@ src/collide.c:245: 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 245:src/collide.c **** 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 1362              		.loc 1 245 10 is_stmt 0 view .LVU338
 1363 031a DDED0E7A 		vldr.32	s15, [sp, #56]	@ dB.x, dB.x
 1364 031e F5EEC07A 		vcmpe.f32	s15, #0	@ dB.x
 1365 0322 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1366 0326 40F3F981 		ble	.L85		@,
 1367              	@ src/collide.c:245: 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 245:src/collide.c **** 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 1368              		.loc 1 245 10 discriminator 1 view .LVU339
 1369 032a 9AE80300 		ldm	r10, {r0, r1}	@ tmp653,,
 1370 032e 85E80300 		stm	r5, {r0, r1}	@ tmp651,,
 1371              	.L57:
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1372              		.loc 1 248 2 is_stmt 1 view .LVU340
 1373              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1374              		.loc 1 248 55 is_stmt 0 view .LVU341
ARM GAS  /tmp/ccfh54Yn.s 			page 36


 1375 0332 DFEDB17A 		vldr.32	s15, .L94+4	@ tmp638,
 1376              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1377              		.loc 1 248 41 view .LVU342
 1378 0336 DFEDAF6A 		vldr.32	s13, .L94	@ tmp639,
 1379              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1380              		.loc 1 248 55 view .LVU343
 1381 033a 69EEA77A 		vmul.f32	s15, s19, s15	@ tmp637, tmp182, tmp638
 1382              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1383              		.loc 1 248 11 view .LVU344
 1384 033e 9DED137A 		vldr.32	s14, [sp, #76]	@ _209, faceB.y
 1385              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1386              		.loc 1 248 41 view .LVU345
 1387 0342 EAEE267A 		vfma.f32	s15, s20, s13	@ _212, _13, tmp639
 1388              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1389              		.loc 1 248 5 view .LVU346
 1390 0346 B4EEE77A 		vcmpe.f32	s14, s15	@ _209, _212
 1391 034a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1392 034e 40F35581 		ble	.L92		@,
 1393              	.LVL77:
 1394              	.L69:
 250:src/collide.c **** 		axis = FACE_B_Y;
 1395              		.loc 1 250 3 is_stmt 1 view .LVU347
 251:src/collide.c **** 		separation = faceB.y;
 1396              		.loc 1 251 3 view .LVU348
 252:src/collide.c **** 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 1397              		.loc 1 252 3 view .LVU349
 1398              	@ src/collide.c:252: 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 252:src/collide.c **** 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 1399              		.loc 1 252 10 is_stmt 0 view .LVU350
 1400 0352 DDED0F7A 		vldr.32	s15, [sp, #60]	@ dB.y, dB.y
 1401 0356 F5EEC07A 		vcmpe.f32	s15, #0	@ dB.y
 1402 035a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1403 035e 40F3E881 		ble	.L87		@,
 1404              	.LBB40:
 1405              	.LBB41:
 1406              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1407              		.loc 1 54 17 discriminator 1 view .LVU351
 1408 0362 0023     		movs	r3, #0	@ tmp419,
 1409              	.LBE41:
 1410              	.LBE40:
 1411              	@ src/collide.c:252: 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 252:src/collide.c **** 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 1412              		.loc 1 252 10 discriminator 1 view .LVU352
 1413 0364 2D99     		ldr	r1, [sp, #180]	@, RotB.col2
 1414 0366 2C98     		ldr	r0, [sp, #176]	@, RotB.col2
 1415              	.LBB50:
 1416              	.LBB42:
 1417              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1418              		.loc 1 54 17 discriminator 1 view .LVU353
 1419 0368 4493     		str	r3, [sp, #272]	@ tmp419, MEM[(struct ClipVertex *)&incidentEdge].fp.value
ARM GAS  /tmp/ccfh54Yn.s 			page 37


 1420              	.LBE42:
 1421              	.LBE50:
 1422              	.LBB51:
 1423              	.LBB52:
 1424 036a 4793     		str	r3, [sp, #284]	@ tmp419, MEM[(struct ClipVertex *)&incidentEdge + 12B].fp.value
 1425              	.LBE52:
 1426              	.LBE51:
 1427              	@ src/collide.c:252: 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 252:src/collide.c **** 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 1428              		.loc 1 252 10 discriminator 1 view .LVU354
 1429 036c 85E80300 		stm	r5, {r0, r1}	@ tmp651,,
 256:src/collide.c **** 	struct Vec2 frontNormal, sideNormal;
 1430              		.loc 1 256 2 is_stmt 1 discriminator 1 view .LVU355
 257:src/collide.c **** 	struct ClipVertex incidentEdge[2];
 1431              		.loc 1 257 2 discriminator 1 view .LVU356
 258:src/collide.c ****     initClipVertex(&incidentEdge[0]);
 1432              		.loc 1 258 5 discriminator 1 view .LVU357
 1433              	.LVL78:
 1434              	.LBB58:
 1435              	.LBI40:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1436              		.loc 1 52 6 discriminator 1 view .LVU358
 1437              	.LBB43:
  54:src/collide.c ****     cv->fp.value=0;
 1438              		.loc 1 54 5 discriminator 1 view .LVU359
  54:src/collide.c ****     cv->fp.value=0;
 1439              		.loc 1 54 5 is_stmt 0 discriminator 1 view .LVU360
 1440              	.LBE43:
 1441              	.LBE58:
 259:src/collide.c ****     initClipVertex(&incidentEdge[1]);
 1442              		.loc 1 259 5 is_stmt 1 discriminator 1 view .LVU361
 1443              	.LBB59:
 1444              	.LBI51:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1445              		.loc 1 52 6 discriminator 1 view .LVU362
 1446              	.LBB53:
  54:src/collide.c ****     cv->fp.value=0;
 1447              		.loc 1 54 5 discriminator 1 view .LVU363
  54:src/collide.c ****     cv->fp.value=0;
 1448              		.loc 1 54 5 is_stmt 0 discriminator 1 view .LVU364
 1449              	.LBE53:
 1450              	.LBE59:
 261:src/collide.c **** 	float front, negSide, posSide;
 1451              		.loc 1 261 2 is_stmt 1 discriminator 1 view .LVU365
 262:src/collide.c **** 	char negEdge, posEdge;
 1452              		.loc 1 262 2 discriminator 1 view .LVU366
 265:src/collide.c **** 	switch (axis)
 1453              		.loc 1 265 2 discriminator 1 view .LVU367
 1454              	.L62:
 1455              	.LBB60:
 311:src/collide.c **** 			frontNormal = minusVec2(normal);
 1456              		.loc 1 311 4 view .LVU368
 1457              	@ src/collide.c:311: 			frontNormal = minusVec2(normal);
 311:src/collide.c **** 			frontNormal = minusVec2(normal);
 1458              		.loc 1 311 18 is_stmt 0 view .LVU369
 1459 0370 D5ED010A 		vldr.32	s1, [r5, #4]	@, normal
 1460              	@ src/collide.c:319: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
ARM GAS  /tmp/ccfh54Yn.s 			page 38


 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 1461              		.loc 1 319 4 view .LVU370
 1462 0374 0DF5847B 		add	fp, sp, #264	@ tmp641,,
 1463              	@ src/collide.c:311: 			frontNormal = minusVec2(normal);
 311:src/collide.c **** 			frontNormal = minusVec2(normal);
 1464              		.loc 1 311 18 view .LVU371
 1465 0378 95ED000A 		vldr.32	s0, [r5]	@, normal
 1466              	.LBE60:
 1467              	@ src/collide.c:321: 		break;
 321:src/collide.c **** 		break;
 1468              		.loc 1 321 3 view .LVU372
 1469 037c 0324     		movs	r4, #3	@ axis,
 1470              	.LBB61:
 1471              	@ src/collide.c:311: 			frontNormal = minusVec2(normal);
 311:src/collide.c **** 			frontNormal = minusVec2(normal);
 1472              		.loc 1 311 18 view .LVU373
 1473 037e FFF7FEFF 		bl	minusVec2		@
 1474              	.LVL79:
 1475 0382 F0EE601A 		vmov.f32	s3, s1	@ tmp715,
 1476 0386 B0EE401A 		vmov.f32	s2, s0	@ tmp714,
 1477              	@ src/collide.c:312: 			front = Dot(posB, frontNormal) + hB.y;
 312:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.y;
 1478              		.loc 1 312 12 view .LVU374
 1479 038a D7ED010A 		vldr.32	s1, [r7, #4]	@, posB
 1480 038e 97ED000A 		vldr.32	s0, [r7]	@, posB
 1481              	@ src/collide.c:311: 			frontNormal = minusVec2(normal);
 311:src/collide.c **** 			frontNormal = minusVec2(normal);
 1482              		.loc 1 311 18 view .LVU375
 1483 0392 CDED171A 		vstr.32	s3, [sp, #92]	@ tmp502, frontNormal
 312:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.y;
 1484              		.loc 1 312 4 is_stmt 1 view .LVU376
 1485              	@ src/collide.c:311: 			frontNormal = minusVec2(normal);
 311:src/collide.c **** 			frontNormal = minusVec2(normal);
 1486              		.loc 1 311 18 is_stmt 0 view .LVU377
 1487 0396 8DED161A 		vstr.32	s2, [sp, #88]	@ tmp501, frontNormal
 1488              	@ src/collide.c:312: 			front = Dot(posB, frontNormal) + hB.y;
 312:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.y;
 1489              		.loc 1 312 12 view .LVU378
 1490 039a FFF7FEFF 		bl	Dot		@
 1491              	.LVL80:
 1492              	@ src/collide.c:313: 			sideNormal = RotB.col1;
 313:src/collide.c **** 			sideNormal = RotB.col1;
 1493              		.loc 1 313 15 view .LVU379
 1494 039e 18AB     		add	r3, sp, #96	@ tmp509,,
 1495              	@ src/collide.c:312: 			front = Dot(posB, frontNormal) + hB.y;
 312:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.y;
 1496              		.loc 1 312 12 view .LVU380
 1497 03a0 B0EE40AA 		vmov.f32	s20, s0	@ tmp716,
 1498              	@ src/collide.c:314: 			float side = Dot(posB, sideNormal);
 314:src/collide.c **** 			float side = Dot(posB, sideNormal);
 1499              		.loc 1 314 17 view .LVU381
 1500 03a4 D7ED010A 		vldr.32	s1, [r7, #4]	@, posB
 1501 03a8 97ED000A 		vldr.32	s0, [r7]	@, posB
 1502              	@ src/collide.c:312: 			front = Dot(posB, frontNormal) + hB.y;
 312:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.y;
 1503              		.loc 1 312 10 view .LVU382
 1504 03ac 3AEE29AA 		vadd.f32	s20, s20, s19	@ front, tmp716, tmp182
ARM GAS  /tmp/ccfh54Yn.s 			page 39


 1505              	.LVL81:
 313:src/collide.c **** 			sideNormal = RotB.col1;
 1506              		.loc 1 313 4 is_stmt 1 view .LVU383
 1507              	@ src/collide.c:313: 			sideNormal = RotB.col1;
 313:src/collide.c **** 			sideNormal = RotB.col1;
 1508              		.loc 1 313 15 is_stmt 0 view .LVU384
 1509 03b0 9AE80300 		ldm	r10, {r0, r1}	@ tmp653,,
 1510              	@ src/collide.c:318: 			posEdge = EDGE4;
 318:src/collide.c **** 			posEdge = EDGE4;
 1511              		.loc 1 318 12 view .LVU385
 1512 03b4 4FF0040A 		mov	r10, #4	@ posEdge,
 1513              	@ src/collide.c:313: 			sideNormal = RotB.col1;
 313:src/collide.c **** 			sideNormal = RotB.col1;
 1514              		.loc 1 313 15 view .LVU386
 1515 03b8 83E80300 		stm	r3, {r0, r1}	@ tmp509,,
 314:src/collide.c **** 			float side = Dot(posB, sideNormal);
 1516              		.loc 1 314 4 is_stmt 1 view .LVU387
 1517              	@ src/collide.c:314: 			float side = Dot(posB, sideNormal);
 314:src/collide.c **** 			float side = Dot(posB, sideNormal);
 1518              		.loc 1 314 17 is_stmt 0 view .LVU388
 1519 03bc 9DED181A 		vldr.32	s2, [sp, #96]	@, sideNormal
 1520 03c0 DDED191A 		vldr.32	s3, [sp, #100]	@, sideNormal
 1521 03c4 FFF7FEFF 		bl	Dot		@
 1522              	.LVL82:
 1523 03c8 F0EE407A 		vmov.f32	s15, s0	@ side, tmp717
 1524              	.LVL83:
 315:src/collide.c **** 			negSide = -side + hB.x;
 1525              		.loc 1 315 4 is_stmt 1 view .LVU389
 1526              	@ src/collide.c:317: 			negEdge = EDGE2;
 317:src/collide.c **** 			negEdge = EDGE2;
 1527              		.loc 1 317 12 is_stmt 0 view .LVU390
 1528 03cc 0222     		movs	r2, #2	@ negEdge,
 1529              	@ src/collide.c:319: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 1530              		.loc 1 319 4 view .LVU391
 1531 03ce 5846     		mov	r0, fp	@, tmp641
 1532 03d0 9DED164A 		vldr.32	s8, [sp, #88]	@, frontNormal
 1533 03d4 DDED174A 		vldr.32	s9, [sp, #92]	@, frontNormal
 1534              	@ src/collide.c:315: 			negSide = -side + hB.x;
 315:src/collide.c **** 			negSide = -side + hB.x;
 1535              		.loc 1 315 12 view .LVU392
 1536 03d8 78EEE7AA 		vsub.f32	s21, s17, s15	@ negSide, tmp181, side
 1537              	.LVL84:
 316:src/collide.c **** 			posSide =  side + hB.x;
 1538              		.loc 1 316 4 is_stmt 1 view .LVU393
 1539              	@ src/collide.c:319: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 1540              		.loc 1 319 4 is_stmt 0 view .LVU394
 1541 03dc 9DED262A 		vldr.32	s4, [sp, #152]	@, RotA
 1542              	@ src/collide.c:316: 			posSide =  side + hB.x;
 316:src/collide.c **** 			posSide =  side + hB.x;
 1543              		.loc 1 316 12 view .LVU395
 1544 03e0 38EEA78A 		vadd.f32	s16, s17, s15	@ posSide, tmp181, side
 1545              	.LVL85:
 317:src/collide.c **** 			negEdge = EDGE2;
 1546              		.loc 1 317 4 is_stmt 1 view .LVU396
 318:src/collide.c **** 			posEdge = EDGE4;
ARM GAS  /tmp/ccfh54Yn.s 			page 40


 1547              		.loc 1 318 4 view .LVU397
 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 1548              		.loc 1 319 4 view .LVU398
 1549 03e4 DDED272A 		vldr.32	s5, [sp, #156]	@, RotA
 1550 03e8 9DED283A 		vldr.32	s6, [sp, #160]	@, RotA
 1551 03ec DDED293A 		vldr.32	s7, [sp, #164]	@, RotA
 1552 03f0 96ED001A 		vldr.32	s2, [r6]	@, posA
 1553 03f4 D6ED011A 		vldr.32	s3, [r6, #4]	@, posA
 1554 03f8 9DED020A 		vldr.32	s0, [sp, #8]	@, hA
 1555              	.LVL86:
 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 1556              		.loc 1 319 4 is_stmt 0 view .LVU399
 1557 03fc DDED030A 		vldr.32	s1, [sp, #12]	@, hA
 1558              	@ src/collide.c:317: 			negEdge = EDGE2;
 317:src/collide.c **** 			negEdge = EDGE2;
 1559              		.loc 1 317 12 view .LVU400
 1560 0400 0192     		str	r2, [sp, #4]	@ negEdge, %sfp
 1561              	@ src/collide.c:319: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 1562              		.loc 1 319 4 view .LVU401
 1563 0402 FFF7FEFF 		bl	ComputeIncidentEdge		@
 1564              	.LVL87:
 319:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 1565              		.loc 1 319 4 view .LVU402
 1566 0406 019A     		ldr	r2, [sp, #4]	@ negEdge, %sfp
 1567              	.LBE61:
 321:src/collide.c **** 		break;
 1568              		.loc 1 321 3 is_stmt 1 view .LVU403
 1569              	.LVL88:
 1570              	.L64:
 326:src/collide.c **** 	struct ClipVertex clipPoints1[2];
 1571              		.loc 1 326 2 view .LVU404
 327:src/collide.c **** 	struct ClipVertex clipPoints2[2];
 1572              		.loc 1 327 2 view .LVU405
 329:src/collide.c ****     initClipVertex(&clipPoints1[0]);
 1573              		.loc 1 329 5 view .LVU406
 1574              	.LBB62:
 1575              	.LBI62:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1576              		.loc 1 52 6 view .LVU407
 1577              	.LBB63:
  54:src/collide.c ****     cv->fp.value=0;
 1578              		.loc 1 54 5 view .LVU408
 1579              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1580              		.loc 1 54 17 is_stmt 0 view .LVU409
 1581 0408 0026     		movs	r6, #0	@ tmp532,
 1582              	.LBE63:
 1583              	.LBE62:
 1584              	@ src/collide.c:337: 	np = ClipSegmentToLine(clipPoints1, incidentEdge, minusVec2(sideNormal), negS
 337:src/collide.c **** 	np = ClipSegmentToLine(clipPoints1, incidentEdge, minusVec2(sideNormal), negSide, negEdge);
 1585              		.loc 1 337 7 view .LVU410
 1586 040a 9DED180A 		vldr.32	s0, [sp, #96]	@, sideNormal
 1587 040e DDED190A 		vldr.32	s1, [sp, #100]	@, sideNormal
 1588 0412 0192     		str	r2, [sp, #4]	@ negEdge, %sfp
 1589              	.LVL89:
 1590              	.LBB65:
ARM GAS  /tmp/ccfh54Yn.s 			page 41


 1591              	.LBB64:
 1592              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1593              		.loc 1 54 17 view .LVU411
 1594 0414 4A96     		str	r6, [sp, #296]	@ tmp532, MEM[(struct ClipVertex *)&clipPoints1].fp.value
 1595              	.LVL90:
  54:src/collide.c ****     cv->fp.value=0;
 1596              		.loc 1 54 17 view .LVU412
 1597              	.LBE64:
 1598              	.LBE65:
 330:src/collide.c ****     initClipVertex(&clipPoints1[1]);
 1599              		.loc 1 330 5 is_stmt 1 view .LVU413
 1600              	.LBB66:
 1601              	.LBI66:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1602              		.loc 1 52 6 view .LVU414
 1603              	.LBB67:
  54:src/collide.c ****     cv->fp.value=0;
 1604              		.loc 1 54 5 view .LVU415
 1605              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1606              		.loc 1 54 17 is_stmt 0 view .LVU416
 1607 0416 4D96     		str	r6, [sp, #308]	@ tmp532, MEM[(struct ClipVertex *)&clipPoints1 + 12B].fp.value
 1608              	.LVL91:
  54:src/collide.c ****     cv->fp.value=0;
 1609              		.loc 1 54 17 view .LVU417
 1610              	.LBE67:
 1611              	.LBE66:
 331:src/collide.c ****     initClipVertex(&clipPoints2[0]);
 1612              		.loc 1 331 5 is_stmt 1 view .LVU418
 1613              	.LBB68:
 1614              	.LBI68:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1615              		.loc 1 52 6 view .LVU419
 1616              	.LBB69:
  54:src/collide.c ****     cv->fp.value=0;
 1617              		.loc 1 54 5 view .LVU420
 1618              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1619              		.loc 1 54 17 is_stmt 0 view .LVU421
 1620 0418 5096     		str	r6, [sp, #320]	@ tmp532, MEM[(struct ClipVertex *)&clipPoints2].fp.value
 1621              	.LVL92:
  54:src/collide.c ****     cv->fp.value=0;
 1622              		.loc 1 54 17 view .LVU422
 1623              	.LBE69:
 1624              	.LBE68:
 332:src/collide.c ****     initClipVertex(&clipPoints2[1]);
 1625              		.loc 1 332 5 is_stmt 1 view .LVU423
 1626              	.LBB70:
 1627              	.LBI70:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1628              		.loc 1 52 6 view .LVU424
 1629              	.LBB71:
  54:src/collide.c ****     cv->fp.value=0;
 1630              		.loc 1 54 5 view .LVU425
 1631              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
ARM GAS  /tmp/ccfh54Yn.s 			page 42


 1632              		.loc 1 54 17 is_stmt 0 view .LVU426
 1633 041a 5396     		str	r6, [sp, #332]	@ tmp532, MEM[(struct ClipVertex *)&clipPoints2 + 12B].fp.value
 1634              	.LVL93:
  54:src/collide.c ****     cv->fp.value=0;
 1635              		.loc 1 54 17 view .LVU427
 1636              	.LBE71:
 1637              	.LBE70:
 334:src/collide.c **** 	int np;
 1638              		.loc 1 334 2 is_stmt 1 view .LVU428
 337:src/collide.c **** 	np = ClipSegmentToLine(clipPoints1, incidentEdge, minusVec2(sideNormal), negSide, negEdge);
 1639              		.loc 1 337 2 view .LVU429
 1640              	@ src/collide.c:337: 	np = ClipSegmentToLine(clipPoints1, incidentEdge, minusVec2(sideNormal), negS
 337:src/collide.c **** 	np = ClipSegmentToLine(clipPoints1, incidentEdge, minusVec2(sideNormal), negSide, negEdge);
 1641              		.loc 1 337 7 is_stmt 0 view .LVU430
 1642 041c FFF7FEFF 		bl	minusVec2		@
 1643              	.LVL94:
 1644 0420 B0EE6A1A 		vmov.f32	s2, s21	@, negSide
 1645 0424 019A     		ldr	r2, [sp, #4]	@ negEdge, %sfp
 1646 0426 5946     		mov	r1, fp	@, tmp641
 1647 0428 48A8     		add	r0, sp, #288	@ tmp736,,
 1648 042a 8DED220A 		vstr.32	s0, [sp, #136]	@ tmp718, D.5761
 1649 042e CDED230A 		vstr.32	s1, [sp, #140]	@ tmp719, D.5761
 1650 0432 FFF7FEFF 		bl	ClipSegmentToLine		@
 1651              	.LVL95:
 339:src/collide.c **** 	if (np < 2)
 1652              		.loc 1 339 2 is_stmt 1 view .LVU431
 1653              	@ src/collide.c:339: 	if (np < 2)
 339:src/collide.c **** 	if (np < 2)
 1654              		.loc 1 339 5 is_stmt 0 view .LVU432
 1655 0436 0128     		cmp	r0, #1	@ tmp720,
 1656 0438 7FF7FDAE 		ble	.L45		@,
 343:src/collide.c **** 	np = ClipSegmentToLine(clipPoints2, clipPoints1,  sideNormal, posSide, posEdge);
 1657              		.loc 1 343 2 is_stmt 1 view .LVU433
 1658              	@ src/collide.c:343: 	np = ClipSegmentToLine(clipPoints2, clipPoints1,  sideNormal, posSide, posEdg
 343:src/collide.c **** 	np = ClipSegmentToLine(clipPoints2, clipPoints1,  sideNormal, posSide, posEdge);
 1659              		.loc 1 343 7 is_stmt 0 view .LVU434
 1660 043c B0EE481A 		vmov.f32	s2, s16	@, posSide
 1661 0440 5246     		mov	r2, r10	@, posEdge
 1662 0442 48A9     		add	r1, sp, #288	@ tmp737,,
 1663 0444 4EA8     		add	r0, sp, #312	@ tmp738,,
 1664              	.LVL96:
 343:src/collide.c **** 	np = ClipSegmentToLine(clipPoints2, clipPoints1,  sideNormal, posSide, posEdge);
 1665              		.loc 1 343 7 view .LVU435
 1666 0446 9DED180A 		vldr.32	s0, [sp, #96]	@, sideNormal
 1667 044a DDED190A 		vldr.32	s1, [sp, #100]	@, sideNormal
 1668 044e FFF7FEFF 		bl	ClipSegmentToLine		@
 1669              	.LVL97:
 345:src/collide.c **** 	if (np < 2)
 1670              		.loc 1 345 2 is_stmt 1 view .LVU436
 1671              	@ src/collide.c:345: 	if (np < 2)
 345:src/collide.c **** 	if (np < 2)
 1672              		.loc 1 345 5 is_stmt 0 view .LVU437
 1673 0452 0128     		cmp	r0, #1	@ tmp721,
 1674 0454 7FF7EFAE 		ble	.L45		@,
 1675              	.LBB72:
 1676              	.LBB73:
 1677              	@ src/collide.c:363: 			if (axis == FACE_B_X || axis == FACE_B_Y)
ARM GAS  /tmp/ccfh54Yn.s 			page 43


 363:src/collide.c **** 			if (axis == FACE_B_X || axis == FACE_B_Y)
 1678              		.loc 1 363 25 view .LVU438
 1679 0458 A71E     		subs	r7, r4, #2	@ tmp654, axis,
 1680              	.LBE73:
 1681              	@ src/collide.c:352: 	for (int i = 0; i < 2; ++i)
 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 1682              		.loc 1 352 11 view .LVU439
 1683 045a B146     		mov	r9, r6	@ i, tmp532
 1684              	.LBE72:
 1685              	@ src/collide.c:351: 	int numContacts = 0;
 351:src/collide.c **** 	int numContacts = 0;
 1686              		.loc 1 351 6 view .LVU440
 1687 045c 3446     		mov	r4, r6	@ <retval>, i
 1688              	.LBB94:
 1689              	.LBB92:
 1690              	@ src/collide.c:363: 			if (axis == FACE_B_X || axis == FACE_B_Y)
 363:src/collide.c **** 			if (axis == FACE_B_X || axis == FACE_B_Y)
 1691              		.loc 1 363 7 view .LVU441
 1692 045e FFB2     		uxtb	r7, r7	@ tmp655, tmp654
 1693              	.LVL98:
 1694              	.L68:
 354:src/collide.c **** 		float separation = Dot(frontNormal, clipPoints2[i].v) - front;
 1695              		.loc 1 354 3 is_stmt 1 view .LVU442
 1696              	@ src/collide.c:354: 		float separation = Dot(frontNormal, clipPoints2[i].v) - front;
 354:src/collide.c **** 		float separation = Dot(frontNormal, clipPoints2[i].v) - front;
 1697              		.loc 1 354 22 is_stmt 0 view .LVU443
 1698 0460 4FEA4903 		lsl	r3, r9, #1	@ tmp549, i,
 1699 0464 54AA     		add	r2, sp, #336	@ tmp739,,
 1700 0466 9DED160A 		vldr.32	s0, [sp, #88]	@, frontNormal
 1701 046a 4B44     		add	r3, r3, r9	@ tmp640, i
 1702 046c DDED170A 		vldr.32	s1, [sp, #92]	@, frontNormal
 1703 0470 02EB830A 		add	r10, r2, r3, lsl #2	@ tmp552, tmp739, tmp640,
 1704 0474 9E00     		lsls	r6, r3, #2	@ tmp551, tmp640,
 1705 0476 1AED061A 		vldr.32	s2, [r10, #-24]	@, clipPoints2[i_217].v
 1706 047a 5AED051A 		vldr.32	s3, [r10, #-20]	@, clipPoints2[i_217].v
 1707 047e FFF7FEFF 		bl	Dot		@
 1708              	.LVL99:
 1709              	@ src/collide.c:354: 		float separation = Dot(frontNormal, clipPoints2[i].v) - front;
 354:src/collide.c **** 		float separation = Dot(frontNormal, clipPoints2[i].v) - front;
 1710              		.loc 1 354 9 view .LVU444
 1711 0482 30EE4A0A 		vsub.f32	s0, s0, s20	@ separation, tmp722, front
 1712              	.LVL100:
 356:src/collide.c **** 		if (separation <= 0)
 1713              		.loc 1 356 3 is_stmt 1 view .LVU445
 1714              	@ src/collide.c:356: 		if (separation <= 0)
 356:src/collide.c **** 		if (separation <= 0)
 1715              		.loc 1 356 6 is_stmt 0 view .LVU446
 1716 0486 B5EEC00A 		vcmpe.f32	s0, #0	@ separation
 1717 048a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1718 048e 16D9     		bls	.L93		@,
 1719              	.LVL101:
 1720              	.L65:
 356:src/collide.c **** 		if (separation <= 0)
 1721              		.loc 1 356 6 view .LVU447
 1722              	.LBE92:
 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 1723              		.loc 1 352 25 is_stmt 1 discriminator 2 view .LVU448
ARM GAS  /tmp/ccfh54Yn.s 			page 44


 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 1724              		.loc 1 352 18 discriminator 2 view .LVU449
 1725              	@ src/collide.c:352: 	for (int i = 0; i < 2; ++i)
 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 1726              		.loc 1 352 2 is_stmt 0 discriminator 2 view .LVU450
 1727 0490 B9F1000F 		cmp	r9, #0	@ i
 1728 0494 7FF4D0AE 		bne	.L41	@
 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 1729              		.loc 1 352 2 discriminator 2 view .LVU451
 1730 0498 4FF00109 		mov	r9, #1	@ i,
 1731              	.LVL102:
 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 1732              		.loc 1 352 2 discriminator 2 view .LVU452
 1733 049c E0E7     		b	.L68		@
 1734              	.LVL103:
 1735              	.L91:
 352:src/collide.c **** 	for (int i = 0; i < 2; ++i)
 1736              		.loc 1 352 2 discriminator 2 view .LVU453
 1737              	.LBE94:
 235:src/collide.c **** 		axis = FACE_A_Y;
 1738              		.loc 1 235 3 is_stmt 1 view .LVU454
 236:src/collide.c **** 		separation = faceA.y;
 1739              		.loc 1 236 3 view .LVU455
 237:src/collide.c **** 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 1740              		.loc 1 237 3 view .LVU456
 1741              	@ src/collide.c:237: 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 237:src/collide.c **** 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 1742              		.loc 1 237 10 is_stmt 0 view .LVU457
 1743 049e DDED0D7A 		vldr.32	s15, [sp, #52]	@ dA.y, dA.y
 1744 04a2 F5EEC07A 		vcmpe.f32	s15, #0	@ dA.y
 1745 04a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1746 04aa 40F32981 		ble	.L83		@,
 1747              	@ src/collide.c:237: 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 237:src/collide.c **** 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 1748              		.loc 1 237 10 discriminator 1 view .LVU458
 1749 04ae 2999     		ldr	r1, [sp, #164]	@, RotA.col2
 1750 04b0 6AEE2A7A 		vmul.f32	s15, s20, s21	@ _9, _8, tmp373
 1751 04b4 2898     		ldr	r0, [sp, #160]	@, RotA.col2
 1752              	@ src/collide.c:235: 		axis = FACE_A_Y;
 235:src/collide.c **** 		axis = FACE_A_Y;
 1753              		.loc 1 235 8 discriminator 1 view .LVU459
 1754 04b6 0124     		movs	r4, #1	@ axis,
 1755              	.LVL104:
 1756              	@ src/collide.c:237: 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 237:src/collide.c **** 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 1757              		.loc 1 237 10 discriminator 1 view .LVU460
 1758 04b8 85E80300 		stm	r5, {r0, r1}	@ tmp651,,
 1759 04bc 1FE7     		b	.L49		@
 1760              	.LVL105:
 1761              	.L93:
 1762              	.LBB95:
 1763              	.LBB93:
 358:src/collide.c **** 			contacts[numContacts].separation = separation;
 1764              		.loc 1 358 4 is_stmt 1 view .LVU461
 1765              	@ src/collide.c:358: 			contacts[numContacts].separation = separation;
 358:src/collide.c **** 			contacts[numContacts].separation = separation;
 1766              		.loc 1 358 12 is_stmt 0 view .LVU462
ARM GAS  /tmp/ccfh54Yn.s 			page 45


 1767 04be 08EB8412 		add	r2, r8, r4, lsl #6	@ _30, contacts, <retval>,
 1768              	@ src/collide.c:361: 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(sepa
 361:src/collide.c **** 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(separation, frontNormal))
 1769              		.loc 1 361 37 view .LVU463
 1770 04c2 DDED160A 		vldr.32	s1, [sp, #88]	@, frontNormal
 1771 04c6 9DED171A 		vldr.32	s2, [sp, #92]	@, frontNormal
 1772              	@ src/collide.c:365: 			++numContacts;
 365:src/collide.c **** 			++numContacts;
 1773              		.loc 1 365 4 view .LVU464
 1774 04ca 0134     		adds	r4, r4, #1	@ <retval>, <retval>,
 1775              	.LVL106:
 1776              	@ src/collide.c:359: 			contacts[numContacts].normal = normal;
 359:src/collide.c **** 			contacts[numContacts].normal = normal;
 1777              		.loc 1 359 33 view .LVU465
 1778 04cc 02F10803 		add	r3, r2, #8	@ tmp562, _30,
 1779              	@ src/collide.c:358: 			contacts[numContacts].separation = separation;
 358:src/collide.c **** 			contacts[numContacts].separation = separation;
 1780              		.loc 1 358 37 view .LVU466
 1781 04d0 82ED080A 		vstr.32	s0, [r2, #32]	@ separation, _30->separation
 1782 04d4 0192     		str	r2, [sp, #4]	@ _30, %sfp
 359:src/collide.c **** 			contacts[numContacts].normal = normal;
 1783              		.loc 1 359 4 is_stmt 1 view .LVU467
 1784              	@ src/collide.c:359: 			contacts[numContacts].normal = normal;
 359:src/collide.c **** 			contacts[numContacts].normal = normal;
 1785              		.loc 1 359 33 is_stmt 0 view .LVU468
 1786 04d6 95E80300 		ldm	r5, {r0, r1}	@ tmp651,,
 1787 04da 83E80300 		stm	r3, {r0, r1}	@ tmp562,,
 361:src/collide.c **** 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(separation, frontNormal))
 1788              		.loc 1 361 4 is_stmt 1 view .LVU469
 1789              	@ src/collide.c:361: 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(sepa
 361:src/collide.c **** 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(separation, frontNormal))
 1790              		.loc 1 361 37 is_stmt 0 view .LVU470
 1791 04de FFF7FEFF 		bl	scaledVec2		@
 1792              	.LVL107:
 361:src/collide.c **** 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(separation, frontNormal))
 1793              		.loc 1 361 37 view .LVU471
 1794 04e2 B0EE401A 		vmov.f32	s2, s0	@ tmp723,
 1795 04e6 F0EE601A 		vmov.f32	s3, s1	@ tmp724,
 1796 04ea 1AED060A 		vldr.32	s0, [r10, #-24]	@, clipPoints2[i_217].v
 1797 04ee 5AED050A 		vldr.32	s1, [r10, #-20]	@, clipPoints2[i_217].v
 1798 04f2 8DED241A 		vstr.32	s2, [sp, #144]	@ tmp566, D.5768
 1799 04f6 CDED251A 		vstr.32	s3, [sp, #148]	@ tmp567, D.5768
 1800 04fa FFF7FEFF 		bl	diffVec2		@
 1801              	.LVL108:
 364:src/collide.c **** 				Flip(&contacts[numContacts].feature);
 1802              		.loc 1 364 5 is_stmt 1 view .LVU472
 1803              	.LBB74:
 1804              	.LBI74:
  64:src/collide.c **** void Flip(union FeaturePair *fp)
 1805              		.loc 1 64 6 view .LVU473
 1806              	.LBB75:
  66:src/collide.c **** 	Swap(&(fp->e.inEdge1), &(fp->e.inEdge2));
 1807              		.loc 1 66 2 view .LVU474
 1808              	.LBB76:
 1809              	.LBI76:
  57:src/collide.c **** void Swap(char* a, char* b)
 1810              		.loc 1 57 6 view .LVU475
ARM GAS  /tmp/ccfh54Yn.s 			page 46


 1811              	.LBB77:
  59:src/collide.c **** 	char tmp = *a;
 1812              		.loc 1 59 2 view .LVU476
  59:src/collide.c **** 	char tmp = *a;
 1813              		.loc 1 59 2 is_stmt 0 view .LVU477
 1814              	.LBE77:
 1815              	.LBE76:
 1816              	.LBE75:
 1817              	.LBE74:
 365:src/collide.c **** 			++numContacts;
 1818              		.loc 1 365 4 is_stmt 1 view .LVU478
 1819              	@ src/collide.c:362: 			contacts[numContacts].feature = clipPoints2[i].fp;
 362:src/collide.c **** 			contacts[numContacts].feature = clipPoints2[i].fp;
 1820              		.loc 1 362 34 is_stmt 0 view .LVU479
 1821 04fe 4EAB     		add	r3, sp, #312	@ tmp740,,
 1822              	@ src/collide.c:361: 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(sepa
 361:src/collide.c **** 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(separation, frontNormal))
 1823              		.loc 1 361 37 view .LVU480
 1824 0500 019A     		ldr	r2, [sp, #4]	@ _30, %sfp
 1825              	@ src/collide.c:363: 			if (axis == FACE_B_X || axis == FACE_B_Y)
 363:src/collide.c **** 			if (axis == FACE_B_X || axis == FACE_B_Y)
 1826              		.loc 1 363 7 view .LVU481
 1827 0502 012F     		cmp	r7, #1	@ tmp655,
 1828              	@ src/collide.c:362: 			contacts[numContacts].feature = clipPoints2[i].fp;
 362:src/collide.c **** 			contacts[numContacts].feature = clipPoints2[i].fp;
 1829              		.loc 1 362 34 view .LVU482
 1830 0504 3344     		add	r3, r3, r6	@ tmp585, tmp551
 1831              	@ src/collide.c:361: 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(sepa
 361:src/collide.c **** 			contacts[numContacts].position = diffVec2(clipPoints2[i].v, scaledVec2(separation, frontNormal))
 1832              		.loc 1 361 37 view .LVU483
 1833 0506 82ED000A 		vstr.32	s0, [r2]	@ tmp725, _30->position
 1834 050a C2ED010A 		vstr.32	s1, [r2, #4]	@ tmp726, _30->position
 362:src/collide.c **** 			contacts[numContacts].feature = clipPoints2[i].fp;
 1835              		.loc 1 362 4 is_stmt 1 view .LVU484
 1836              	@ src/collide.c:362: 			contacts[numContacts].feature = clipPoints2[i].fp;
 362:src/collide.c **** 			contacts[numContacts].feature = clipPoints2[i].fp;
 1837              		.loc 1 362 34 is_stmt 0 view .LVU485
 1838 050e 9B68     		ldr	r3, [r3, #8]	@ MEM[symbol: clipPoints2, index: _14, offset: 8B], MEM[symbol: clipPoints2, inde
 1839 0510 D363     		str	r3, [r2, #60]	@ MEM[symbol: clipPoints2, index: _14, offset: 8B], _30->feature
 363:src/collide.c **** 			if (axis == FACE_B_X || axis == FACE_B_Y)
 1840              		.loc 1 363 4 is_stmt 1 view .LVU486
 1841              	@ src/collide.c:363: 			if (axis == FACE_B_X || axis == FACE_B_Y)
 363:src/collide.c **** 			if (axis == FACE_B_X || axis == FACE_B_Y)
 1842              		.loc 1 363 7 is_stmt 0 view .LVU487
 1843 0512 BDD8     		bhi	.L65		@,
 1844              	.LBB91:
 1845              	.LBB90:
 1846              	.LBB81:
 1847              	.LBB78:
 1848              	@ src/collide.c:59: 	char tmp = *a;
  59:src/collide.c **** 	char tmp = *a;
 1849              		.loc 1 59 7 view .LVU488
 1850 0514 92F83C30 		ldrb	r3, [r2, #60]	@ zero_extendqisi2	@ tmp, MEM[(char *)_30 + 60B]
 1851              	.LVL109:
  60:src/collide.c **** 	*a = *b;
 1852              		.loc 1 60 2 is_stmt 1 view .LVU489
 1853              	@ src/collide.c:60: 	*a = *b;
ARM GAS  /tmp/ccfh54Yn.s 			page 47


  60:src/collide.c **** 	*a = *b;
 1854              		.loc 1 60 5 is_stmt 0 view .LVU490
 1855 0518 92F83E00 		ldrb	r0, [r2, #62]	@ zero_extendqisi2	@ MEM[(char *)_30 + 62B], MEM[(char *)_30 + 62B]
 1856              	.LBE78:
 1857              	.LBE81:
 1858              	.LBB82:
 1859              	.LBB83:
 1860              	@ src/collide.c:59: 	char tmp = *a;
  59:src/collide.c **** 	char tmp = *a;
 1861              		.loc 1 59 7 view .LVU491
 1862 051c 92F83D10 		ldrb	r1, [r2, #61]	@ zero_extendqisi2	@ tmp, MEM[(char *)_30 + 61B]
 1863              	.LBE83:
 1864              	.LBE82:
 1865              	.LBB86:
 1866              	.LBB79:
 1867              	@ src/collide.c:61: 	*b = tmp;
  61:src/collide.c **** 	*b = tmp;
 1868              		.loc 1 61 5 view .LVU492
 1869 0520 82F83E30 		strb	r3, [r2, #62]	@ tmp, MEM[(char *)_30 + 62B]
 1870              	.LBE79:
 1871              	.LBE86:
 1872              	.LBB87:
 1873              	.LBB84:
 1874              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*a = *b;
 1875              		.loc 1 60 5 view .LVU493
 1876 0524 92F83F30 		ldrb	r3, [r2, #63]	@ zero_extendqisi2	@ MEM[(char *)_30 + 63B], MEM[(char *)_30 + 63B]
 1877              	.LVL110:
  60:src/collide.c **** 	*a = *b;
 1878              		.loc 1 60 5 view .LVU494
 1879              	.LBE84:
 1880              	.LBE87:
 1881              	.LBB88:
 1882              	.LBB80:
 1883 0528 82F83C00 		strb	r0, [r2, #60]	@ MEM[(char *)_30 + 62B], MEM[(char *)_30 + 60B]
  61:src/collide.c **** 	*b = tmp;
 1884              		.loc 1 61 2 is_stmt 1 view .LVU495
 1885              	.LVL111:
  61:src/collide.c **** 	*b = tmp;
 1886              		.loc 1 61 2 is_stmt 0 view .LVU496
 1887              	.LBE80:
 1888              	.LBE88:
  67:src/collide.c **** 	Swap(&(fp->e.outEdge1), &(fp->e.outEdge2));
 1889              		.loc 1 67 2 is_stmt 1 view .LVU497
 1890              	.LBB89:
 1891              	.LBI82:
  57:src/collide.c **** void Swap(char* a, char* b)
 1892              		.loc 1 57 6 view .LVU498
 1893              	.LBB85:
  59:src/collide.c **** 	char tmp = *a;
 1894              		.loc 1 59 2 view .LVU499
  60:src/collide.c **** 	*a = *b;
 1895              		.loc 1 60 2 view .LVU500
 1896              	@ src/collide.c:61: 	*b = tmp;
  61:src/collide.c **** 	*b = tmp;
 1897              		.loc 1 61 5 is_stmt 0 view .LVU501
 1898 052c 82F83F10 		strb	r1, [r2, #63]	@ tmp, MEM[(char *)_30 + 63B]
ARM GAS  /tmp/ccfh54Yn.s 			page 48


 1899              	@ src/collide.c:60: 	*a = *b;
  60:src/collide.c **** 	*a = *b;
 1900              		.loc 1 60 5 view .LVU502
 1901 0530 82F83D30 		strb	r3, [r2, #61]	@ MEM[(char *)_30 + 63B], MEM[(char *)_30 + 61B]
  61:src/collide.c **** 	*b = tmp;
 1902              		.loc 1 61 2 is_stmt 1 view .LVU503
 1903              	.LVL112:
  61:src/collide.c **** 	*b = tmp;
 1904              		.loc 1 61 2 is_stmt 0 view .LVU504
 1905              	.LBE85:
 1906              	.LBE89:
 1907              	@ src/collide.c:68: }
  68:src/collide.c **** }
 1908              		.loc 1 68 1 view .LVU505
 1909 0534 ACE7     		b	.L65		@
 1910              	.LVL113:
 1911              	.L84:
  68:src/collide.c **** }
 1912              		.loc 1 68 1 view .LVU506
 1913              	.LBE90:
 1914              	.LBE91:
 1915              	.LBE93:
 1916              	.LBE95:
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1917              		.loc 1 248 2 is_stmt 1 view .LVU507
 1918              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1919              		.loc 1 248 41 is_stmt 0 view .LVU508
 1920 0536 E9EE877A 		vfma.f32	s15, s19, s14	@ _21, tmp182, tmp393
 1921              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1922              		.loc 1 248 11 view .LVU509
 1923 053a 9DED137A 		vldr.32	s14, [sp, #76]	@ _18, faceB.y
 1924              	@ src/collide.c:248: 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 248:src/collide.c **** 	if (faceB.y > relativeTol * separation + absoluteTol * hB.y)
 1925              		.loc 1 248 5 view .LVU510
 1926 053e B4EEE77A 		vcmpe.f32	s14, s15	@ _18, _21
 1927 0542 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1928 0546 3FF704AF 		bgt	.L69		@,
 256:src/collide.c **** 	struct Vec2 frontNormal, sideNormal;
 1929              		.loc 1 256 2 is_stmt 1 view .LVU511
 257:src/collide.c **** 	struct ClipVertex incidentEdge[2];
 1930              		.loc 1 257 2 view .LVU512
 258:src/collide.c ****     initClipVertex(&incidentEdge[0]);
 1931              		.loc 1 258 5 view .LVU513
 1932              	.LVL114:
 1933              	.LBB96:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1934              		.loc 1 52 6 view .LVU514
 1935              	.LBB44:
  54:src/collide.c ****     cv->fp.value=0;
 1936              		.loc 1 54 5 view .LVU515
 1937              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1938              		.loc 1 54 17 is_stmt 0 view .LVU516
 1939 054a 0023     		movs	r3, #0	@ tmp429,
 1940              	.LBE44:
ARM GAS  /tmp/ccfh54Yn.s 			page 49


 1941              	.LBE96:
 1942              	@ src/collide.c:265: 	switch (axis)
 265:src/collide.c **** 	switch (axis)
 1943              		.loc 1 265 2 view .LVU517
 1944 054c 012C     		cmp	r4, #1	@ axis,
 1945              	.LBB97:
 1946              	@ src/collide.c:270: 			front = Dot(posA, frontNormal) + hA.x;
 270:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.x;
 1947              		.loc 1 270 12 view .LVU518
 1948 054e 96ED000A 		vldr.32	s0, [r6]	@, posA
 1949              	@ src/collide.c:277: 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 1950              		.loc 1 277 4 view .LVU519
 1951 0552 0DF5847B 		add	fp, sp, #264	@ tmp641,,
 1952              	.LVL115:
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 1953              		.loc 1 277 4 view .LVU520
 1954              	.LBE97:
 1955              	.LBB98:
 1956              	.LBB45:
 1957              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1958              		.loc 1 54 17 view .LVU521
 1959 0556 4493     		str	r3, [sp, #272]	@ tmp429, MEM[(struct ClipVertex *)&incidentEdge].fp.value
 1960              	.LVL116:
  54:src/collide.c ****     cv->fp.value=0;
 1961              		.loc 1 54 17 view .LVU522
 1962              	.LBE45:
 1963              	.LBE98:
 259:src/collide.c ****     initClipVertex(&incidentEdge[1]);
 1964              		.loc 1 259 5 is_stmt 1 view .LVU523
 1965              	.LBB99:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 1966              		.loc 1 52 6 view .LVU524
 1967              	.LBB54:
  54:src/collide.c ****     cv->fp.value=0;
 1968              		.loc 1 54 5 view .LVU525
 1969              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 1970              		.loc 1 54 17 is_stmt 0 view .LVU526
 1971 0558 4793     		str	r3, [sp, #284]	@ tmp429, MEM[(struct ClipVertex *)&incidentEdge + 12B].fp.value
 1972              	.LVL117:
  54:src/collide.c ****     cv->fp.value=0;
 1973              		.loc 1 54 17 view .LVU527
 1974              	.LBE54:
 1975              	.LBE99:
 261:src/collide.c **** 	float front, negSide, posSide;
 1976              		.loc 1 261 2 is_stmt 1 view .LVU528
 262:src/collide.c **** 	char negEdge, posEdge;
 1977              		.loc 1 262 2 view .LVU529
 265:src/collide.c **** 	switch (axis)
 1978              		.loc 1 265 2 view .LVU530
 1979              	.LBB100:
 1980              	@ src/collide.c:269: 			frontNormal = normal;
 269:src/collide.c **** 			frontNormal = normal;
 1981              		.loc 1 269 16 is_stmt 0 view .LVU531
 1982 055a 16AB     		add	r3, sp, #88	@ tmp433,,
ARM GAS  /tmp/ccfh54Yn.s 			page 50


 1983              	@ src/collide.c:270: 			front = Dot(posA, frontNormal) + hA.x;
 270:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.x;
 1984              		.loc 1 270 12 view .LVU532
 1985 055c D6ED010A 		vldr.32	s1, [r6, #4]	@, posA
 1986              	@ src/collide.c:269: 			frontNormal = normal;
 269:src/collide.c **** 			frontNormal = normal;
 1987              		.loc 1 269 16 view .LVU533
 1988 0560 95E80300 		ldm	r5, {r0, r1}	@ tmp651,,
 1989 0564 83E80300 		stm	r3, {r0, r1}	@ tmp433,,
 270:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.x;
 1990              		.loc 1 270 4 is_stmt 1 view .LVU534
 1991              	@ src/collide.c:270: 			front = Dot(posA, frontNormal) + hA.x;
 270:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.x;
 1992              		.loc 1 270 12 is_stmt 0 view .LVU535
 1993 0568 9DED161A 		vldr.32	s2, [sp, #88]	@, frontNormal
 1994 056c DDED171A 		vldr.32	s3, [sp, #92]	@, frontNormal
 1995              	.LBE100:
 1996              	@ src/collide.c:265: 	switch (axis)
 265:src/collide.c **** 	switch (axis)
 1997              		.loc 1 265 2 view .LVU536
 1998 0570 00F09080 		beq	.L63		@,
 1999              	.LBB101:
 269:src/collide.c **** 			frontNormal = normal;
 2000              		.loc 1 269 4 is_stmt 1 view .LVU537
 2001              	@ src/collide.c:270: 			front = Dot(posA, frontNormal) + hA.x;
 270:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.x;
 2002              		.loc 1 270 12 is_stmt 0 view .LVU538
 2003 0574 FFF7FEFF 		bl	Dot		@
 2004              	.LVL118:
 2005              	@ src/collide.c:271: 			sideNormal = RotA.col2;
 271:src/collide.c **** 			sideNormal = RotA.col2;
 2006              		.loc 1 271 15 view .LVU539
 2007 0578 18AB     		add	r3, sp, #96	@ tmp441,,
 2008              	@ src/collide.c:270: 			front = Dot(posA, frontNormal) + hA.x;
 270:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.x;
 2009              		.loc 1 270 10 view .LVU540
 2010 057a 30EE08AA 		vadd.f32	s20, s0, s16	@ front, tmp710, tmp171
 2011              	.LVL119:
 271:src/collide.c **** 			sideNormal = RotA.col2;
 2012              		.loc 1 271 4 is_stmt 1 view .LVU541
 2013              	@ src/collide.c:272: 			float side = Dot(posA, sideNormal);
 272:src/collide.c **** 			float side = Dot(posA, sideNormal);
 2014              		.loc 1 272 17 is_stmt 0 view .LVU542
 2015 057e D6ED010A 		vldr.32	s1, [r6, #4]	@, posA
 2016 0582 96ED000A 		vldr.32	s0, [r6]	@, posA
 2017              	@ src/collide.c:276: 			posEdge = EDGE1;
 276:src/collide.c **** 			posEdge = EDGE1;
 2018              		.loc 1 276 12 view .LVU543
 2019 0586 4FF0010A 		mov	r10, #1	@ posEdge,
 2020              	@ src/collide.c:271: 			sideNormal = RotA.col2;
 271:src/collide.c **** 			sideNormal = RotA.col2;
 2021              		.loc 1 271 15 view .LVU544
 2022 058a DDE92801 		ldrd	r0, r1, [sp, #160]	@,,,
 2023 058e 83E80300 		stm	r3, {r0, r1}	@ tmp441,,
 272:src/collide.c **** 			float side = Dot(posA, sideNormal);
 2024              		.loc 1 272 4 is_stmt 1 view .LVU545
 2025              	@ src/collide.c:272: 			float side = Dot(posA, sideNormal);
ARM GAS  /tmp/ccfh54Yn.s 			page 51


 272:src/collide.c **** 			float side = Dot(posA, sideNormal);
 2026              		.loc 1 272 17 is_stmt 0 view .LVU546
 2027 0592 9DED181A 		vldr.32	s2, [sp, #96]	@, sideNormal
 2028 0596 DDED191A 		vldr.32	s3, [sp, #100]	@, sideNormal
 2029 059a FFF7FEFF 		bl	Dot		@
 2030              	.LVL120:
 2031              	@ src/collide.c:275: 			negEdge = EDGE3;
 275:src/collide.c **** 			negEdge = EDGE3;
 2032              		.loc 1 275 12 view .LVU547
 2033 059e 0322     		movs	r2, #3	@ negEdge,
 2034              	@ src/collide.c:273: 			negSide = -side + hA.y;
 273:src/collide.c **** 			negSide = -side + hA.y;
 2035              		.loc 1 273 12 view .LVU548
 2036 05a0 79EE40AA 		vsub.f32	s21, s18, s0	@ negSide, tmp172, side
 2037              	@ src/collide.c:277: 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2038              		.loc 1 277 4 view .LVU549
 2039 05a4 5846     		mov	r0, fp	@, tmp641
 2040              	@ src/collide.c:274: 			posSide =  side + hA.y;
 274:src/collide.c **** 			posSide =  side + hA.y;
 2041              		.loc 1 274 12 view .LVU550
 2042 05a6 39EE008A 		vadd.f32	s16, s18, s0	@ posSide, tmp172, side
 2043              	.LVL121:
 2044              	@ src/collide.c:277: 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2045              		.loc 1 277 4 view .LVU551
 2046 05aa 9DED164A 		vldr.32	s8, [sp, #88]	@, frontNormal
 2047              	.LVL122:
 273:src/collide.c **** 			negSide = -side + hA.y;
 2048              		.loc 1 273 4 is_stmt 1 view .LVU552
 274:src/collide.c **** 			posSide =  side + hA.y;
 2049              		.loc 1 274 4 view .LVU553
 275:src/collide.c **** 			negEdge = EDGE3;
 2050              		.loc 1 275 4 view .LVU554
 276:src/collide.c **** 			posEdge = EDGE1;
 2051              		.loc 1 276 4 view .LVU555
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2052              		.loc 1 277 4 view .LVU556
 2053 05ae DDED174A 		vldr.32	s9, [sp, #92]	@, frontNormal
 2054 05b2 9DED2A2A 		vldr.32	s4, [sp, #168]	@, RotB
 2055 05b6 DDED2B2A 		vldr.32	s5, [sp, #172]	@, RotB
 2056 05ba 9DED2C3A 		vldr.32	s6, [sp, #176]	@, RotB
 2057 05be DDED2D3A 		vldr.32	s7, [sp, #180]	@, RotB
 2058 05c2 97ED001A 		vldr.32	s2, [r7]	@, posB
 2059 05c6 D7ED011A 		vldr.32	s3, [r7, #4]	@, posB
 2060 05ca 9DED040A 		vldr.32	s0, [sp, #16]	@, hB
 2061              	.LVL123:
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2062              		.loc 1 277 4 is_stmt 0 view .LVU557
 2063 05ce DDED050A 		vldr.32	s1, [sp, #20]	@, hB
 2064              	@ src/collide.c:275: 			negEdge = EDGE3;
 275:src/collide.c **** 			negEdge = EDGE3;
 2065              		.loc 1 275 12 view .LVU558
 2066 05d2 0192     		str	r2, [sp, #4]	@ negEdge, %sfp
 2067              	@ src/collide.c:277: 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 277:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2068              		.loc 1 277 4 view .LVU559
ARM GAS  /tmp/ccfh54Yn.s 			page 52


 2069 05d4 FFF7FEFF 		bl	ComputeIncidentEdge		@
 2070              	.LVL124:
 2071              	.LBE101:
 279:src/collide.c **** 		break;
 2072              		.loc 1 279 3 is_stmt 1 view .LVU560
 2073 05d8 019A     		ldr	r2, [sp, #4]	@ negEdge, %sfp
 2074 05da 15E7     		b	.L64		@
 2075              	.LVL125:
 2076              	.L81:
 2077              	@ src/collide.c:228: 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 2078              		.loc 1 228 37 is_stmt 0 discriminator 2 view .LVU561
 2079 05dc 9DED260A 		vldr.32	s0, [sp, #152]	@, RotA.col1
 2080 05e0 14AD     		add	r5, sp, #80	@ tmp651,,
 2081              	.LVL126:
 228:src/collide.c **** 	normal = dA.x > 0.0f ? RotA.col1 : minusVec2(RotA.col1);
 2082              		.loc 1 228 37 discriminator 2 view .LVU562
 2083 05e2 DDED270A 		vldr.32	s1, [sp, #156]	@, RotA.col1
 2084 05e6 FFF7FEFF 		bl	minusVec2		@
 2085              	.LVL127:
 2086 05ea 85ED000A 		vstr.32	s0, [r5]	@ tmp702, normal
 2087 05ee C5ED010A 		vstr.32	s1, [r5, #4]	@ tmp703, normal
 2088 05f2 71E6     		b	.L48		@
 2089              	.L95:
 2090              		.align	2
 2091              	.L94:
 2092 05f4 3333733F 		.word	1064514355
 2093 05f8 0AD7233C 		.word	1008981770
 2094              	.LVL128:
 2095              	.L92:
 256:src/collide.c **** 	struct Vec2 frontNormal, sideNormal;
 2096              		.loc 1 256 2 is_stmt 1 view .LVU563
 257:src/collide.c **** 	struct ClipVertex incidentEdge[2];
 2097              		.loc 1 257 2 view .LVU564
 258:src/collide.c ****     initClipVertex(&incidentEdge[0]);
 2098              		.loc 1 258 5 view .LVU565
 2099              	.LBB102:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 2100              		.loc 1 52 6 view .LVU566
 2101              	.LBB46:
  54:src/collide.c ****     cv->fp.value=0;
 2102              		.loc 1 54 5 view .LVU567
 2103              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 2104              		.loc 1 54 17 is_stmt 0 view .LVU568
 2105 05fc 0023     		movs	r3, #0	@ tmp598,
 2106              	.LBE46:
 2107              	.LBE102:
 2108              	.LBB103:
 2109              	@ src/collide.c:297: 			frontNormal = minusVec2(normal);
 297:src/collide.c **** 			frontNormal = minusVec2(normal);
 2110              		.loc 1 297 18 view .LVU569
 2111 05fe D5ED010A 		vldr.32	s1, [r5, #4]	@, normal
 2112 0602 95ED000A 		vldr.32	s0, [r5]	@, normal
 2113              	@ src/collide.c:305: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 2114              		.loc 1 305 4 view .LVU570
ARM GAS  /tmp/ccfh54Yn.s 			page 53


 2115 0606 0DF5847B 		add	fp, sp, #264	@ tmp641,,
 2116              	.LVL129:
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 2117              		.loc 1 305 4 view .LVU571
 2118              	.LBE103:
 2119              	.LBB104:
 2120              	.LBB47:
 2121              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 2122              		.loc 1 54 17 view .LVU572
 2123 060a 4493     		str	r3, [sp, #272]	@ tmp598, MEM[(struct ClipVertex *)&incidentEdge].fp.value
 2124              	.LVL130:
  54:src/collide.c ****     cv->fp.value=0;
 2125              		.loc 1 54 17 view .LVU573
 2126              	.LBE47:
 2127              	.LBE104:
 259:src/collide.c ****     initClipVertex(&incidentEdge[1]);
 2128              		.loc 1 259 5 is_stmt 1 view .LVU574
 2129              	.LBB105:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 2130              		.loc 1 52 6 view .LVU575
 2131              	.LBB55:
  54:src/collide.c ****     cv->fp.value=0;
 2132              		.loc 1 54 5 view .LVU576
 2133              	.LBE55:
 2134              	.LBE105:
 2135              	@ src/collide.c:307: 		break;
 307:src/collide.c **** 		break;
 2136              		.loc 1 307 3 is_stmt 0 view .LVU577
 2137 060c 0224     		movs	r4, #2	@ axis,
 2138              	.LBB106:
 2139              	.LBB56:
 2140              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 2141              		.loc 1 54 17 view .LVU578
 2142 060e 4793     		str	r3, [sp, #284]	@ tmp598, MEM[(struct ClipVertex *)&incidentEdge + 12B].fp.value
 2143              	.LVL131:
  54:src/collide.c ****     cv->fp.value=0;
 2144              		.loc 1 54 17 view .LVU579
 2145              	.LBE56:
 2146              	.LBE106:
 261:src/collide.c **** 	float front, negSide, posSide;
 2147              		.loc 1 261 2 is_stmt 1 view .LVU580
 262:src/collide.c **** 	char negEdge, posEdge;
 2148              		.loc 1 262 2 view .LVU581
 265:src/collide.c **** 	switch (axis)
 2149              		.loc 1 265 2 view .LVU582
 2150              	.LBB107:
 297:src/collide.c **** 			frontNormal = minusVec2(normal);
 2151              		.loc 1 297 4 view .LVU583
 2152              	@ src/collide.c:297: 			frontNormal = minusVec2(normal);
 297:src/collide.c **** 			frontNormal = minusVec2(normal);
 2153              		.loc 1 297 18 is_stmt 0 view .LVU584
 2154 0610 FFF7FEFF 		bl	minusVec2		@
 2155              	.LVL132:
 2156 0614 B0EE401A 		vmov.f32	s2, s0	@ tmp727,
 2157              	@ src/collide.c:298: 			front = Dot(posB, frontNormal) + hB.x;
ARM GAS  /tmp/ccfh54Yn.s 			page 54


 298:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.x;
 2158              		.loc 1 298 12 view .LVU585
 2159 0618 97ED000A 		vldr.32	s0, [r7]	@, posB
 2160              	@ src/collide.c:297: 			frontNormal = minusVec2(normal);
 297:src/collide.c **** 			frontNormal = minusVec2(normal);
 2161              		.loc 1 297 18 view .LVU586
 2162 061c F0EE601A 		vmov.f32	s3, s1	@ tmp605, tmp728
 2163              	@ src/collide.c:298: 			front = Dot(posB, frontNormal) + hB.x;
 298:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.x;
 2164              		.loc 1 298 12 view .LVU587
 2165 0620 D7ED010A 		vldr.32	s1, [r7, #4]	@, posB
 2166              	@ src/collide.c:304: 			posEdge = EDGE1;
 304:src/collide.c **** 			posEdge = EDGE1;
 2167              		.loc 1 304 12 view .LVU588
 2168 0624 4FF0010A 		mov	r10, #1	@ posEdge,
 2169              	@ src/collide.c:297: 			frontNormal = minusVec2(normal);
 297:src/collide.c **** 			frontNormal = minusVec2(normal);
 2170              		.loc 1 297 18 view .LVU589
 2171 0628 8DED161A 		vstr.32	s2, [sp, #88]	@ tmp604, frontNormal
 2172 062c CDED171A 		vstr.32	s3, [sp, #92]	@ tmp605, frontNormal
 298:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.x;
 2173              		.loc 1 298 4 is_stmt 1 view .LVU590
 2174              	@ src/collide.c:298: 			front = Dot(posB, frontNormal) + hB.x;
 298:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.x;
 2175              		.loc 1 298 12 is_stmt 0 view .LVU591
 2176 0630 FFF7FEFF 		bl	Dot		@
 2177              	.LVL133:
 2178              	@ src/collide.c:299: 			sideNormal = RotB.col2;
 299:src/collide.c **** 			sideNormal = RotB.col2;
 2179              		.loc 1 299 15 view .LVU592
 2180 0634 18AB     		add	r3, sp, #96	@ tmp612,,
 2181              	@ src/collide.c:300: 			float side = Dot(posB, sideNormal);
 300:src/collide.c **** 			float side = Dot(posB, sideNormal);
 2182              		.loc 1 300 17 view .LVU593
 2183 0636 D7ED010A 		vldr.32	s1, [r7, #4]	@, posB
 2184              	@ src/collide.c:298: 			front = Dot(posB, frontNormal) + hB.x;
 298:src/collide.c **** 			front = Dot(posB, frontNormal) + hB.x;
 2185              		.loc 1 298 10 view .LVU594
 2186 063a 30EE28AA 		vadd.f32	s20, s0, s17	@ front, tmp729, tmp181
 2187              	.LVL134:
 299:src/collide.c **** 			sideNormal = RotB.col2;
 2188              		.loc 1 299 4 is_stmt 1 view .LVU595
 2189              	@ src/collide.c:300: 			float side = Dot(posB, sideNormal);
 300:src/collide.c **** 			float side = Dot(posB, sideNormal);
 2190              		.loc 1 300 17 is_stmt 0 view .LVU596
 2191 063e 97ED000A 		vldr.32	s0, [r7]	@, posB
 2192              	@ src/collide.c:299: 			sideNormal = RotB.col2;
 299:src/collide.c **** 			sideNormal = RotB.col2;
 2193              		.loc 1 299 15 view .LVU597
 2194 0642 DDE92C01 		ldrd	r0, r1, [sp, #176]	@,,,
 2195 0646 83E80300 		stm	r3, {r0, r1}	@ tmp612,,
 300:src/collide.c **** 			float side = Dot(posB, sideNormal);
 2196              		.loc 1 300 4 is_stmt 1 view .LVU598
 2197              	@ src/collide.c:300: 			float side = Dot(posB, sideNormal);
 300:src/collide.c **** 			float side = Dot(posB, sideNormal);
 2198              		.loc 1 300 17 is_stmt 0 view .LVU599
 2199 064a 9DED181A 		vldr.32	s2, [sp, #96]	@, sideNormal
ARM GAS  /tmp/ccfh54Yn.s 			page 55


 2200 064e DDED191A 		vldr.32	s3, [sp, #100]	@, sideNormal
 2201 0652 FFF7FEFF 		bl	Dot		@
 2202              	.LVL135:
 2203              	@ src/collide.c:303: 			negEdge = EDGE3;
 303:src/collide.c **** 			negEdge = EDGE3;
 2204              		.loc 1 303 12 view .LVU600
 2205 0656 0322     		movs	r2, #3	@ negEdge,
 2206              	@ src/collide.c:301: 			negSide = -side + hB.y;
 301:src/collide.c **** 			negSide = -side + hB.y;
 2207              		.loc 1 301 12 view .LVU601
 2208 0658 79EEC0AA 		vsub.f32	s21, s19, s0	@ negSide, tmp182, side
 2209              	@ src/collide.c:305: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 2210              		.loc 1 305 4 view .LVU602
 2211 065c 5846     		mov	r0, fp	@, tmp641
 2212              	@ src/collide.c:302: 			posSide =  side + hB.y;
 302:src/collide.c **** 			posSide =  side + hB.y;
 2213              		.loc 1 302 12 view .LVU603
 2214 065e 39EE808A 		vadd.f32	s16, s19, s0	@ posSide, tmp182, side
 2215              	.LVL136:
 2216              	@ src/collide.c:305: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 2217              		.loc 1 305 4 view .LVU604
 2218 0662 9DED164A 		vldr.32	s8, [sp, #88]	@, frontNormal
 2219              	.LVL137:
 301:src/collide.c **** 			negSide = -side + hB.y;
 2220              		.loc 1 301 4 is_stmt 1 view .LVU605
 302:src/collide.c **** 			posSide =  side + hB.y;
 2221              		.loc 1 302 4 view .LVU606
 303:src/collide.c **** 			negEdge = EDGE3;
 2222              		.loc 1 303 4 view .LVU607
 304:src/collide.c **** 			posEdge = EDGE1;
 2223              		.loc 1 304 4 view .LVU608
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 2224              		.loc 1 305 4 view .LVU609
 2225 0666 DDED174A 		vldr.32	s9, [sp, #92]	@, frontNormal
 2226 066a 9DED262A 		vldr.32	s4, [sp, #152]	@, RotA
 2227 066e DDED272A 		vldr.32	s5, [sp, #156]	@, RotA
 2228 0672 9DED283A 		vldr.32	s6, [sp, #160]	@, RotA
 2229 0676 DDED293A 		vldr.32	s7, [sp, #164]	@, RotA
 2230 067a 96ED001A 		vldr.32	s2, [r6]	@, posA
 2231 067e D6ED011A 		vldr.32	s3, [r6, #4]	@, posA
 2232 0682 9DED020A 		vldr.32	s0, [sp, #8]	@, hA
 2233              	.LVL138:
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 2234              		.loc 1 305 4 is_stmt 0 view .LVU610
 2235 0686 DDED030A 		vldr.32	s1, [sp, #12]	@, hA
 2236              	@ src/collide.c:303: 			negEdge = EDGE3;
 303:src/collide.c **** 			negEdge = EDGE3;
 2237              		.loc 1 303 12 view .LVU611
 2238 068a 0192     		str	r2, [sp, #4]	@ negEdge, %sfp
 2239              	@ src/collide.c:305: 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 305:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hA, posA, RotA, frontNormal);
 2240              		.loc 1 305 4 view .LVU612
 2241 068c FFF7FEFF 		bl	ComputeIncidentEdge		@
 2242              	.LVL139:
 2243              	.LBE107:
ARM GAS  /tmp/ccfh54Yn.s 			page 56


 307:src/collide.c **** 		break;
 2244              		.loc 1 307 3 is_stmt 1 view .LVU613
 2245 0690 019A     		ldr	r2, [sp, #4]	@ negEdge, %sfp
 2246 0692 B9E6     		b	.L64		@
 2247              	.LVL140:
 2248              	.L63:
 2249              	.LBB108:
 283:src/collide.c **** 			frontNormal = normal;
 2250              		.loc 1 283 4 view .LVU614
 2251              	@ src/collide.c:284: 			front = Dot(posA, frontNormal) + hA.y;
 284:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.y;
 2252              		.loc 1 284 12 is_stmt 0 view .LVU615
 2253 0694 FFF7FEFF 		bl	Dot		@
 2254              	.LVL141:
 2255              	@ src/collide.c:285: 			sideNormal = RotA.col1;
 285:src/collide.c **** 			sideNormal = RotA.col1;
 2256              		.loc 1 285 15 view .LVU616
 2257 0698 18AB     		add	r3, sp, #96	@ tmp474,,
 2258              	@ src/collide.c:289: 			negEdge = EDGE2;
 289:src/collide.c **** 			negEdge = EDGE2;
 2259              		.loc 1 289 12 view .LVU617
 2260 069a 0222     		movs	r2, #2	@ negEdge,
 2261              	@ src/collide.c:284: 			front = Dot(posA, frontNormal) + hA.y;
 284:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.y;
 2262              		.loc 1 284 12 view .LVU618
 2263 069c B0EE40AA 		vmov.f32	s20, s0	@ tmp712,
 2264              	@ src/collide.c:286: 			float side = Dot(posA, sideNormal);
 286:src/collide.c **** 			float side = Dot(posA, sideNormal);
 2265              		.loc 1 286 17 view .LVU619
 2266 06a0 D6ED010A 		vldr.32	s1, [r6, #4]	@, posA
 2267              	@ src/collide.c:290: 			posEdge = EDGE4;
 290:src/collide.c **** 			posEdge = EDGE4;
 2268              		.loc 1 290 12 view .LVU620
 2269 06a4 4FF0040A 		mov	r10, #4	@ posEdge,
 2270              	@ src/collide.c:286: 			float side = Dot(posA, sideNormal);
 286:src/collide.c **** 			float side = Dot(posA, sideNormal);
 2271              		.loc 1 286 17 view .LVU621
 2272 06a8 96ED000A 		vldr.32	s0, [r6]	@, posA
 2273              	@ src/collide.c:289: 			negEdge = EDGE2;
 289:src/collide.c **** 			negEdge = EDGE2;
 2274              		.loc 1 289 12 view .LVU622
 2275 06ac 0192     		str	r2, [sp, #4]	@ negEdge, %sfp
 2276              	@ src/collide.c:284: 			front = Dot(posA, frontNormal) + hA.y;
 284:src/collide.c **** 			front = Dot(posA, frontNormal) + hA.y;
 2277              		.loc 1 284 10 view .LVU623
 2278 06ae 3AEE09AA 		vadd.f32	s20, s20, s18	@ front, tmp712, tmp172
 2279              	.LVL142:
 285:src/collide.c **** 			sideNormal = RotA.col1;
 2280              		.loc 1 285 4 is_stmt 1 view .LVU624
 2281              	@ src/collide.c:285: 			sideNormal = RotA.col1;
 285:src/collide.c **** 			sideNormal = RotA.col1;
 2282              		.loc 1 285 15 is_stmt 0 view .LVU625
 2283 06b2 99E80300 		ldm	r9, {r0, r1}	@ tmp652,,
 2284 06b6 83E80300 		stm	r3, {r0, r1}	@ tmp474,,
 286:src/collide.c **** 			float side = Dot(posA, sideNormal);
 2285              		.loc 1 286 4 is_stmt 1 view .LVU626
 2286              	@ src/collide.c:286: 			float side = Dot(posA, sideNormal);
ARM GAS  /tmp/ccfh54Yn.s 			page 57


 286:src/collide.c **** 			float side = Dot(posA, sideNormal);
 2287              		.loc 1 286 17 is_stmt 0 view .LVU627
 2288 06ba 9DED181A 		vldr.32	s2, [sp, #96]	@, sideNormal
 2289 06be DDED191A 		vldr.32	s3, [sp, #100]	@, sideNormal
 2290 06c2 FFF7FEFF 		bl	Dot		@
 2291              	.LVL143:
 2292              	@ src/collide.c:291: 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 291:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2293              		.loc 1 291 4 view .LVU628
 2294 06c6 5846     		mov	r0, fp	@, tmp641
 2295              	@ src/collide.c:287: 			negSide = -side + hA.x;
 287:src/collide.c **** 			negSide = -side + hA.x;
 2296              		.loc 1 287 12 view .LVU629
 2297 06c8 78EE40AA 		vsub.f32	s21, s16, s0	@ negSide, tmp171, side
 2298              	@ src/collide.c:291: 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 291:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2299              		.loc 1 291 4 view .LVU630
 2300 06cc 9DED164A 		vldr.32	s8, [sp, #88]	@, frontNormal
 2301              	.LVL144:
 287:src/collide.c **** 			negSide = -side + hA.x;
 2302              		.loc 1 287 4 is_stmt 1 view .LVU631
 288:src/collide.c **** 			posSide =  side + hA.x;
 2303              		.loc 1 288 4 view .LVU632
 2304              	@ src/collide.c:288: 			posSide =  side + hA.x;
 288:src/collide.c **** 			posSide =  side + hA.x;
 2305              		.loc 1 288 12 is_stmt 0 view .LVU633
 2306 06d0 38EE008A 		vadd.f32	s16, s16, s0	@ posSide, tmp171, side
 2307              	.LVL145:
 289:src/collide.c **** 			negEdge = EDGE2;
 2308              		.loc 1 289 4 is_stmt 1 view .LVU634
 290:src/collide.c **** 			posEdge = EDGE4;
 2309              		.loc 1 290 4 view .LVU635
 291:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2310              		.loc 1 291 4 view .LVU636
 2311 06d4 DDED174A 		vldr.32	s9, [sp, #92]	@, frontNormal
 2312 06d8 9DED2A2A 		vldr.32	s4, [sp, #168]	@, RotB
 2313 06dc DDED2B2A 		vldr.32	s5, [sp, #172]	@, RotB
 2314 06e0 9DED2C3A 		vldr.32	s6, [sp, #176]	@, RotB
 2315 06e4 DDED2D3A 		vldr.32	s7, [sp, #180]	@, RotB
 2316 06e8 97ED001A 		vldr.32	s2, [r7]	@, posB
 2317 06ec D7ED011A 		vldr.32	s3, [r7, #4]	@, posB
 2318 06f0 9DED040A 		vldr.32	s0, [sp, #16]	@, hB
 2319              	.LVL146:
 291:src/collide.c **** 			ComputeIncidentEdge(incidentEdge, hB, posB, RotB, frontNormal);
 2320              		.loc 1 291 4 is_stmt 0 view .LVU637
 2321 06f4 DDED050A 		vldr.32	s1, [sp, #20]	@, hB
 2322 06f8 FFF7FEFF 		bl	ComputeIncidentEdge		@
 2323              	.LVL147:
 2324              	.LBE108:
 293:src/collide.c **** 		break;
 2325              		.loc 1 293 3 is_stmt 1 view .LVU638
 2326 06fc 019A     		ldr	r2, [sp, #4]	@ negEdge, %sfp
 2327 06fe 83E6     		b	.L64		@
 2328              	.LVL148:
 2329              	.L83:
 2330              	@ src/collide.c:237: 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 237:src/collide.c **** 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
ARM GAS  /tmp/ccfh54Yn.s 			page 58


 2331              		.loc 1 237 38 is_stmt 0 discriminator 2 view .LVU639
 2332 0700 9DED280A 		vldr.32	s0, [sp, #160]	@, RotA.col2
 2333              	@ src/collide.c:235: 		axis = FACE_A_Y;
 235:src/collide.c **** 		axis = FACE_A_Y;
 2334              		.loc 1 235 8 discriminator 2 view .LVU640
 2335 0704 0124     		movs	r4, #1	@ axis,
 2336              	.LVL149:
 2337              	@ src/collide.c:237: 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 237:src/collide.c **** 		normal = dA.y > 0.0f ? RotA.col2 : minusVec2(RotA.col2);
 2338              		.loc 1 237 38 discriminator 2 view .LVU641
 2339 0706 DDED290A 		vldr.32	s1, [sp, #164]	@, RotA.col2
 2340 070a FFF7FEFF 		bl	minusVec2		@
 2341              	.LVL150:
 2342 070e 6AEE2A7A 		vmul.f32	s15, s20, s21	@ _9, _8, tmp373
 2343 0712 85ED000A 		vstr.32	s0, [r5]	@ tmp704, normal
 2344 0716 C5ED010A 		vstr.32	s1, [r5, #4]	@ tmp705, normal
 2345 071a F0E5     		b	.L49		@
 2346              	.LVL151:
 2347              	.L85:
 2348              	@ src/collide.c:245: 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 245:src/collide.c **** 		normal = dB.x > 0.0f ? RotB.col1 : minusVec2(RotB.col1);
 2349              		.loc 1 245 38 discriminator 2 view .LVU642
 2350 071c 9DED2A0A 		vldr.32	s0, [sp, #168]	@, RotB.col1
 2351 0720 DDED2B0A 		vldr.32	s1, [sp, #172]	@, RotB.col1
 2352 0724 FFF7FEFF 		bl	minusVec2		@
 2353              	.LVL152:
 2354 0728 85ED000A 		vstr.32	s0, [r5]	@ tmp706, normal
 2355 072c C5ED010A 		vstr.32	s1, [r5, #4]	@ tmp707, normal
 2356 0730 FFE5     		b	.L57		@
 2357              	.LVL153:
 2358              	.L87:
 2359              	@ src/collide.c:252: 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 252:src/collide.c **** 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 2360              		.loc 1 252 38 discriminator 2 view .LVU643
 2361 0732 9DED2C0A 		vldr.32	s0, [sp, #176]	@, RotB.col2
 2362 0736 DDED2D0A 		vldr.32	s1, [sp, #180]	@, RotB.col2
 2363 073a FFF7FEFF 		bl	minusVec2		@
 2364              	.LVL154:
 2365              	.LBB109:
 2366              	.LBB48:
 2367              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 2368              		.loc 1 54 17 discriminator 2 view .LVU644
 2369 073e 0023     		movs	r3, #0	@ tmp427,
 2370              	.LBE48:
 2371              	.LBE109:
 2372              	@ src/collide.c:252: 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 252:src/collide.c **** 		normal = dB.y > 0.0f ? RotB.col2 : minusVec2(RotB.col2);
 2373              		.loc 1 252 38 discriminator 2 view .LVU645
 2374 0740 85ED000A 		vstr.32	s0, [r5]	@ tmp708, normal
 2375 0744 C5ED010A 		vstr.32	s1, [r5, #4]	@ tmp709, normal
 256:src/collide.c **** 	struct Vec2 frontNormal, sideNormal;
 2376              		.loc 1 256 2 is_stmt 1 discriminator 2 view .LVU646
 257:src/collide.c **** 	struct ClipVertex incidentEdge[2];
 2377              		.loc 1 257 2 discriminator 2 view .LVU647
 258:src/collide.c ****     initClipVertex(&incidentEdge[0]);
 2378              		.loc 1 258 5 discriminator 2 view .LVU648
ARM GAS  /tmp/ccfh54Yn.s 			page 59


 2379              	.LVL155:
 2380              	.LBB110:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 2381              		.loc 1 52 6 discriminator 2 view .LVU649
 2382              	.LBB49:
  54:src/collide.c ****     cv->fp.value=0;
 2383              		.loc 1 54 5 discriminator 2 view .LVU650
 2384              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 2385              		.loc 1 54 17 is_stmt 0 discriminator 2 view .LVU651
 2386 0748 4493     		str	r3, [sp, #272]	@ tmp427, MEM[(struct ClipVertex *)&incidentEdge].fp.value
 2387              	.LVL156:
  54:src/collide.c ****     cv->fp.value=0;
 2388              		.loc 1 54 17 discriminator 2 view .LVU652
 2389              	.LBE49:
 2390              	.LBE110:
 259:src/collide.c ****     initClipVertex(&incidentEdge[1]);
 2391              		.loc 1 259 5 is_stmt 1 discriminator 2 view .LVU653
 2392              	.LBB111:
  52:src/collide.c **** void initClipVertex(struct ClipVertex *cv)
 2393              		.loc 1 52 6 discriminator 2 view .LVU654
 2394              	.LBB57:
  54:src/collide.c ****     cv->fp.value=0;
 2395              		.loc 1 54 5 discriminator 2 view .LVU655
 2396              	@ src/collide.c:54:     cv->fp.value=0;
  54:src/collide.c ****     cv->fp.value=0;
 2397              		.loc 1 54 17 is_stmt 0 discriminator 2 view .LVU656
 2398 074a 4793     		str	r3, [sp, #284]	@ tmp427, MEM[(struct ClipVertex *)&incidentEdge + 12B].fp.value
 2399              	.LVL157:
  54:src/collide.c ****     cv->fp.value=0;
 2400              		.loc 1 54 17 discriminator 2 view .LVU657
 2401              	.LBE57:
 2402              	.LBE111:
 261:src/collide.c **** 	float front, negSide, posSide;
 2403              		.loc 1 261 2 is_stmt 1 discriminator 2 view .LVU658
 262:src/collide.c **** 	char negEdge, posEdge;
 2404              		.loc 1 262 2 discriminator 2 view .LVU659
 265:src/collide.c **** 	switch (axis)
 2405              		.loc 1 265 2 discriminator 2 view .LVU660
 2406 074c 10E6     		b	.L62		@
 2407              		.cfi_endproc
 2408              	.LFE5:
 2409              		.size	Collide, .-Collide
 2410 074e 00BF     		.text
 2411              	.Letext0:
 2412              		.file 2 "src/mathutils.h"
 2413              		.file 3 "src/collide.h"
 2414              		.section	.debug_info,"",%progbits
 2415              	.Ldebug_info0:
 2416 0000 CD0E0000 		.4byte	0xecd
 2417 0004 0200     		.2byte	0x2
 2418 0006 00000000 		.4byte	.Ldebug_abbrev0
 2419 000a 04       		.byte	0x4
 2420 000b 01       		.uleb128 0x1
 2421 000c 63000000 		.4byte	.LASF72
 2422 0010 0C       		.byte	0xc
 2423 0011 DC030000 		.4byte	.LASF73
ARM GAS  /tmp/ccfh54Yn.s 			page 60


 2424 0015 EA010000 		.4byte	.LASF74
 2425 0019 D8010000 		.4byte	.Ldebug_ranges0+0x1d8
 2426 001d 00000000 		.4byte	0
 2427 0021 00000000 		.4byte	0
 2428 0025 00000000 		.4byte	.Ldebug_line0
 2429 0029 02       		.uleb128 0x2
 2430 002a 04       		.byte	0x4
 2431 002b 04       		.byte	0x4
 2432 002c 2E020000 		.4byte	.LASF9
 2433 0030 03       		.uleb128 0x3
 2434 0031 24040000 		.4byte	.LASF0
 2435 0035 08       		.byte	0x8
 2436 0036 02       		.byte	0x2
 2437 0037 12       		.byte	0x12
 2438 0038 08       		.byte	0x8
 2439 0039 58000000 		.4byte	0x58
 2440 003d 04       		.uleb128 0x4
 2441 003e 7800     		.ascii	"x\000"
 2442 0040 02       		.byte	0x2
 2443 0041 14       		.byte	0x14
 2444 0042 08       		.byte	0x8
 2445 0043 29000000 		.4byte	0x29
 2446 0047 02       		.byte	0x2
 2447 0048 23       		.byte	0x23
 2448 0049 00       		.uleb128 0
 2449 004a 04       		.uleb128 0x4
 2450 004b 7900     		.ascii	"y\000"
 2451 004d 02       		.byte	0x2
 2452 004e 14       		.byte	0x14
 2453 004f 0B       		.byte	0xb
 2454 0050 29000000 		.4byte	0x29
 2455 0054 02       		.byte	0x2
 2456 0055 23       		.byte	0x23
 2457 0056 04       		.uleb128 0x4
 2458 0057 00       		.byte	0
 2459 0058 05       		.uleb128 0x5
 2460 0059 29000000 		.4byte	0x29
 2461 005d 03       		.uleb128 0x3
 2462 005e 4C030000 		.4byte	.LASF1
 2463 0062 10       		.byte	0x10
 2464 0063 02       		.byte	0x2
 2465 0064 17       		.byte	0x17
 2466 0065 08       		.byte	0x8
 2467 0066 89000000 		.4byte	0x89
 2468 006a 06       		.uleb128 0x6
 2469 006b D7020000 		.4byte	.LASF2
 2470 006f 02       		.byte	0x2
 2471 0070 19       		.byte	0x19
 2472 0071 11       		.byte	0x11
 2473 0072 30000000 		.4byte	0x30
 2474 0076 02       		.byte	0x2
 2475 0077 23       		.byte	0x23
 2476 0078 00       		.uleb128 0
 2477 0079 06       		.uleb128 0x6
 2478 007a DC020000 		.4byte	.LASF3
 2479 007e 02       		.byte	0x2
 2480 007f 19       		.byte	0x19
ARM GAS  /tmp/ccfh54Yn.s 			page 61


 2481 0080 17       		.byte	0x17
 2482 0081 30000000 		.4byte	0x30
 2483 0085 02       		.byte	0x2
 2484 0086 23       		.byte	0x23
 2485 0087 08       		.uleb128 0x8
 2486 0088 00       		.byte	0
 2487 0089 03       		.uleb128 0x3
 2488 008a 63030000 		.4byte	.LASF4
 2489 008e 04       		.byte	0x4
 2490 008f 03       		.byte	0x3
 2491 0090 09       		.byte	0x9
 2492 0091 09       		.byte	0x9
 2493 0092 D3000000 		.4byte	0xd3
 2494 0096 06       		.uleb128 0x6
 2495 0097 40000000 		.4byte	.LASF5
 2496 009b 03       		.byte	0x3
 2497 009c 0B       		.byte	0xb
 2498 009d 08       		.byte	0x8
 2499 009e D3000000 		.4byte	0xd3
 2500 00a2 02       		.byte	0x2
 2501 00a3 23       		.byte	0x23
 2502 00a4 00       		.uleb128 0
 2503 00a5 06       		.uleb128 0x6
 2504 00a6 08040000 		.4byte	.LASF6
 2505 00aa 03       		.byte	0x3
 2506 00ab 0C       		.byte	0xc
 2507 00ac 08       		.byte	0x8
 2508 00ad D3000000 		.4byte	0xd3
 2509 00b1 02       		.byte	0x2
 2510 00b2 23       		.byte	0x23
 2511 00b3 01       		.uleb128 0x1
 2512 00b4 06       		.uleb128 0x6
 2513 00b5 48000000 		.4byte	.LASF7
 2514 00b9 03       		.byte	0x3
 2515 00ba 0D       		.byte	0xd
 2516 00bb 08       		.byte	0x8
 2517 00bc D3000000 		.4byte	0xd3
 2518 00c0 02       		.byte	0x2
 2519 00c1 23       		.byte	0x23
 2520 00c2 02       		.uleb128 0x2
 2521 00c3 06       		.uleb128 0x6
 2522 00c4 11040000 		.4byte	.LASF8
 2523 00c8 03       		.byte	0x3
 2524 00c9 0E       		.byte	0xe
 2525 00ca 08       		.byte	0x8
 2526 00cb D3000000 		.4byte	0xd3
 2527 00cf 02       		.byte	0x2
 2528 00d0 23       		.byte	0x23
 2529 00d1 03       		.uleb128 0x3
 2530 00d2 00       		.byte	0
 2531 00d3 02       		.uleb128 0x2
 2532 00d4 01       		.byte	0x1
 2533 00d5 08       		.byte	0x8
 2534 00d6 52030000 		.4byte	.LASF10
 2535 00da 07       		.uleb128 0x7
 2536 00db 8C020000 		.4byte	.LASF102
 2537 00df 04       		.byte	0x4
ARM GAS  /tmp/ccfh54Yn.s 			page 62


 2538 00e0 03       		.byte	0x3
 2539 00e1 07       		.byte	0x7
 2540 00e2 07       		.byte	0x7
 2541 00e3 FE000000 		.4byte	0xfe
 2542 00e7 08       		.uleb128 0x8
 2543 00e8 6500     		.ascii	"e\000"
 2544 00ea 03       		.byte	0x3
 2545 00eb 0F       		.byte	0xf
 2546 00ec 04       		.byte	0x4
 2547 00ed 89000000 		.4byte	0x89
 2548 00f1 09       		.uleb128 0x9
 2549 00f2 AB010000 		.4byte	.LASF11
 2550 00f6 03       		.byte	0x3
 2551 00f7 10       		.byte	0x10
 2552 00f8 06       		.byte	0x6
 2553 00f9 FE000000 		.4byte	0xfe
 2554 00fd 00       		.byte	0
 2555 00fe 0A       		.uleb128 0xa
 2556 00ff 04       		.byte	0x4
 2557 0100 05       		.byte	0x5
 2558 0101 696E7400 		.ascii	"int\000"
 2559 0105 03       		.uleb128 0x3
 2560 0106 29040000 		.4byte	.LASF12
 2561 010a 40       		.byte	0x40
 2562 010b 03       		.byte	0x3
 2563 010c 13       		.byte	0x13
 2564 010d 08       		.byte	0x8
 2565 010e C3010000 		.4byte	0x1c3
 2566 0112 06       		.uleb128 0x6
 2567 0113 A2010000 		.4byte	.LASF13
 2568 0117 03       		.byte	0x3
 2569 0118 15       		.byte	0x15
 2570 0119 0E       		.byte	0xe
 2571 011a 30000000 		.4byte	0x30
 2572 011e 02       		.byte	0x2
 2573 011f 23       		.byte	0x23
 2574 0120 00       		.uleb128 0
 2575 0121 06       		.uleb128 0x6
 2576 0122 B0030000 		.4byte	.LASF14
 2577 0126 03       		.byte	0x3
 2578 0127 16       		.byte	0x16
 2579 0128 0E       		.byte	0xe
 2580 0129 30000000 		.4byte	0x30
 2581 012d 02       		.byte	0x2
 2582 012e 23       		.byte	0x23
 2583 012f 08       		.uleb128 0x8
 2584 0130 04       		.uleb128 0x4
 2585 0131 723100   		.ascii	"r1\000"
 2586 0134 03       		.byte	0x3
 2587 0135 17       		.byte	0x17
 2588 0136 0E       		.byte	0xe
 2589 0137 30000000 		.4byte	0x30
 2590 013b 02       		.byte	0x2
 2591 013c 23       		.byte	0x23
 2592 013d 10       		.uleb128 0x10
 2593 013e 04       		.uleb128 0x4
 2594 013f 723200   		.ascii	"r2\000"
ARM GAS  /tmp/ccfh54Yn.s 			page 63


 2595 0142 03       		.byte	0x3
 2596 0143 17       		.byte	0x17
 2597 0144 12       		.byte	0x12
 2598 0145 30000000 		.4byte	0x30
 2599 0149 02       		.byte	0x2
 2600 014a 23       		.byte	0x23
 2601 014b 18       		.uleb128 0x18
 2602 014c 06       		.uleb128 0x6
 2603 014d 56020000 		.4byte	.LASF15
 2604 0151 03       		.byte	0x3
 2605 0152 18       		.byte	0x18
 2606 0153 08       		.byte	0x8
 2607 0154 29000000 		.4byte	0x29
 2608 0158 02       		.byte	0x2
 2609 0159 23       		.byte	0x23
 2610 015a 20       		.uleb128 0x20
 2611 015b 04       		.uleb128 0x4
 2612 015c 506E00   		.ascii	"Pn\000"
 2613 015f 03       		.byte	0x3
 2614 0160 19       		.byte	0x19
 2615 0161 08       		.byte	0x8
 2616 0162 29000000 		.4byte	0x29
 2617 0166 02       		.byte	0x2
 2618 0167 23       		.byte	0x23
 2619 0168 24       		.uleb128 0x24
 2620 0169 04       		.uleb128 0x4
 2621 016a 507400   		.ascii	"Pt\000"
 2622 016d 03       		.byte	0x3
 2623 016e 1A       		.byte	0x1a
 2624 016f 08       		.byte	0x8
 2625 0170 29000000 		.4byte	0x29
 2626 0174 02       		.byte	0x2
 2627 0175 23       		.byte	0x23
 2628 0176 28       		.uleb128 0x28
 2629 0177 04       		.uleb128 0x4
 2630 0178 506E6200 		.ascii	"Pnb\000"
 2631 017c 03       		.byte	0x3
 2632 017d 1B       		.byte	0x1b
 2633 017e 08       		.byte	0x8
 2634 017f 29000000 		.4byte	0x29
 2635 0183 02       		.byte	0x2
 2636 0184 23       		.byte	0x23
 2637 0185 2C       		.uleb128 0x2c
 2638 0186 06       		.uleb128 0x6
 2639 0187 0C030000 		.4byte	.LASF16
 2640 018b 03       		.byte	0x3
 2641 018c 1C       		.byte	0x1c
 2642 018d 08       		.byte	0x8
 2643 018e 29000000 		.4byte	0x29
 2644 0192 02       		.byte	0x2
 2645 0193 23       		.byte	0x23
 2646 0194 30       		.uleb128 0x30
 2647 0195 06       		.uleb128 0x6
 2648 0196 00030000 		.4byte	.LASF17
 2649 019a 03       		.byte	0x3
 2650 019b 1C       		.byte	0x1c
 2651 019c 14       		.byte	0x14
ARM GAS  /tmp/ccfh54Yn.s 			page 64


 2652 019d 29000000 		.4byte	0x29
 2653 01a1 02       		.byte	0x2
 2654 01a2 23       		.byte	0x23
 2655 01a3 34       		.uleb128 0x34
 2656 01a4 06       		.uleb128 0x6
 2657 01a5 DF010000 		.4byte	.LASF18
 2658 01a9 03       		.byte	0x3
 2659 01aa 1D       		.byte	0x1d
 2660 01ab 08       		.byte	0x8
 2661 01ac 29000000 		.4byte	0x29
 2662 01b0 02       		.byte	0x2
 2663 01b1 23       		.byte	0x23
 2664 01b2 38       		.uleb128 0x38
 2665 01b3 06       		.uleb128 0x6
 2666 01b4 E6020000 		.4byte	.LASF19
 2667 01b8 03       		.byte	0x3
 2668 01b9 1E       		.byte	0x1e
 2669 01ba 14       		.byte	0x14
 2670 01bb DA000000 		.4byte	0xda
 2671 01bf 02       		.byte	0x2
 2672 01c0 23       		.byte	0x23
 2673 01c1 3C       		.uleb128 0x3c
 2674 01c2 00       		.byte	0
 2675 01c3 03       		.uleb128 0x3
 2676 01c4 96030000 		.4byte	.LASF20
 2677 01c8 40       		.byte	0x40
 2678 01c9 03       		.byte	0x3
 2679 01ca 21       		.byte	0x21
 2680 01cb 08       		.byte	0x8
 2681 01cc 83020000 		.4byte	0x283
 2682 01d0 06       		.uleb128 0x6
 2683 01d1 A2010000 		.4byte	.LASF13
 2684 01d5 03       		.byte	0x3
 2685 01d6 2B       		.byte	0x2b
 2686 01d7 0E       		.byte	0xe
 2687 01d8 30000000 		.4byte	0x30
 2688 01dc 02       		.byte	0x2
 2689 01dd 23       		.byte	0x23
 2690 01de 00       		.uleb128 0
 2691 01df 06       		.uleb128 0x6
 2692 01e0 A0020000 		.4byte	.LASF21
 2693 01e4 03       		.byte	0x3
 2694 01e5 2C       		.byte	0x2c
 2695 01e6 08       		.byte	0x8
 2696 01e7 29000000 		.4byte	0x29
 2697 01eb 02       		.byte	0x2
 2698 01ec 23       		.byte	0x23
 2699 01ed 08       		.uleb128 0x8
 2700 01ee 06       		.uleb128 0x6
 2701 01ef 94010000 		.4byte	.LASF22
 2702 01f3 03       		.byte	0x3
 2703 01f4 2E       		.byte	0x2e
 2704 01f5 0E       		.byte	0xe
 2705 01f6 30000000 		.4byte	0x30
 2706 01fa 02       		.byte	0x2
 2707 01fb 23       		.byte	0x23
 2708 01fc 0C       		.uleb128 0xc
ARM GAS  /tmp/ccfh54Yn.s 			page 65


 2709 01fd 06       		.uleb128 0x6
 2710 01fe 30030000 		.4byte	.LASF23
 2711 0202 03       		.byte	0x3
 2712 0203 2F       		.byte	0x2f
 2713 0204 08       		.byte	0x8
 2714 0205 29000000 		.4byte	0x29
 2715 0209 02       		.byte	0x2
 2716 020a 23       		.byte	0x23
 2717 020b 14       		.uleb128 0x14
 2718 020c 06       		.uleb128 0x6
 2719 020d B1010000 		.4byte	.LASF24
 2720 0211 03       		.byte	0x3
 2721 0212 31       		.byte	0x31
 2722 0213 0E       		.byte	0xe
 2723 0214 30000000 		.4byte	0x30
 2724 0218 02       		.byte	0x2
 2725 0219 23       		.byte	0x23
 2726 021a 18       		.uleb128 0x18
 2727 021b 06       		.uleb128 0x6
 2728 021c 1F000000 		.4byte	.LASF25
 2729 0220 03       		.byte	0x3
 2730 0221 32       		.byte	0x32
 2731 0222 08       		.byte	0x8
 2732 0223 29000000 		.4byte	0x29
 2733 0227 02       		.byte	0x2
 2734 0228 23       		.byte	0x23
 2735 0229 20       		.uleb128 0x20
 2736 022a 06       		.uleb128 0x6
 2737 022b 1E020000 		.4byte	.LASF26
 2738 022f 03       		.byte	0x3
 2739 0230 34       		.byte	0x34
 2740 0231 0E       		.byte	0xe
 2741 0232 30000000 		.4byte	0x30
 2742 0236 02       		.byte	0x2
 2743 0237 23       		.byte	0x23
 2744 0238 24       		.uleb128 0x24
 2745 0239 06       		.uleb128 0x6
 2746 023a 26000000 		.4byte	.LASF27
 2747 023e 03       		.byte	0x3
 2748 023f 36       		.byte	0x36
 2749 0240 08       		.byte	0x8
 2750 0241 29000000 		.4byte	0x29
 2751 0245 02       		.byte	0x2
 2752 0246 23       		.byte	0x23
 2753 0247 2C       		.uleb128 0x2c
 2754 0248 06       		.uleb128 0x6
 2755 0249 FB030000 		.4byte	.LASF28
 2756 024d 03       		.byte	0x3
 2757 024e 37       		.byte	0x37
 2758 024f 08       		.byte	0x8
 2759 0250 29000000 		.4byte	0x29
 2760 0254 02       		.byte	0x2
 2761 0255 23       		.byte	0x23
 2762 0256 30       		.uleb128 0x30
 2763 0257 06       		.uleb128 0x6
 2764 0258 5F040000 		.4byte	.LASF29
 2765 025c 03       		.byte	0x3
ARM GAS  /tmp/ccfh54Yn.s 			page 66


 2766 025d 37       		.byte	0x37
 2767 025e 0E       		.byte	0xe
 2768 025f 29000000 		.4byte	0x29
 2769 0263 02       		.byte	0x2
 2770 0264 23       		.byte	0x23
 2771 0265 34       		.uleb128 0x34
 2772 0266 04       		.uleb128 0x4
 2773 0267 4900     		.ascii	"I\000"
 2774 0269 03       		.byte	0x3
 2775 026a 38       		.byte	0x38
 2776 026b 08       		.byte	0x8
 2777 026c 29000000 		.4byte	0x29
 2778 0270 02       		.byte	0x2
 2779 0271 23       		.byte	0x23
 2780 0272 38       		.uleb128 0x38
 2781 0273 06       		.uleb128 0x6
 2782 0274 43040000 		.4byte	.LASF30
 2783 0278 03       		.byte	0x3
 2784 0279 38       		.byte	0x38
 2785 027a 0B       		.byte	0xb
 2786 027b 29000000 		.4byte	0x29
 2787 027f 02       		.byte	0x2
 2788 0280 23       		.byte	0x23
 2789 0281 3C       		.uleb128 0x3c
 2790 0282 00       		.byte	0
 2791 0283 0B       		.uleb128 0xb
 2792 0284 6A010000 		.4byte	.LASF36
 2793 0288 07       		.byte	0x7
 2794 0289 01       		.byte	0x1
 2795 028a AE020000 		.4byte	0x2ae
 2796 028e 01       		.byte	0x1
 2797 028f 1C       		.byte	0x1c
 2798 0290 06       		.byte	0x6
 2799 0291 AE020000 		.4byte	0x2ae
 2800 0295 0C       		.uleb128 0xc
 2801 0296 EE020000 		.4byte	.LASF31
 2802 029a 00       		.byte	0
 2803 029b 0C       		.uleb128 0xc
 2804 029c F7020000 		.4byte	.LASF32
 2805 02a0 01       		.byte	0x1
 2806 02a1 0C       		.uleb128 0xc
 2807 02a2 A9020000 		.4byte	.LASF33
 2808 02a6 02       		.byte	0x2
 2809 02a7 0C       		.uleb128 0xc
 2810 02a8 B2020000 		.4byte	.LASF34
 2811 02ac 03       		.byte	0x3
 2812 02ad 00       		.byte	0
 2813 02ae 02       		.uleb128 0x2
 2814 02af 01       		.byte	0x1
 2815 02b0 08       		.byte	0x8
 2816 02b1 C4020000 		.4byte	.LASF35
 2817 02b5 0B       		.uleb128 0xb
 2818 02b6 74020000 		.4byte	.LASF37
 2819 02ba 07       		.byte	0x7
 2820 02bb 01       		.byte	0x1
 2821 02bc AE020000 		.4byte	0x2ae
 2822 02c0 01       		.byte	0x1
ARM GAS  /tmp/ccfh54Yn.s 			page 67


 2823 02c1 24       		.byte	0x24
 2824 02c2 06       		.byte	0x6
 2825 02c3 E6020000 		.4byte	0x2e6
 2826 02c7 0C       		.uleb128 0xc
 2827 02c8 00040000 		.4byte	.LASF38
 2828 02cc 00       		.byte	0
 2829 02cd 0C       		.uleb128 0xc
 2830 02ce D9010000 		.4byte	.LASF39
 2831 02d2 01       		.byte	0x1
 2832 02d3 0C       		.uleb128 0xc
 2833 02d4 8E010000 		.4byte	.LASF40
 2834 02d8 02       		.byte	0x2
 2835 02d9 0C       		.uleb128 0xc
 2836 02da E4010000 		.4byte	.LASF41
 2837 02de 03       		.byte	0x3
 2838 02df 0C       		.uleb128 0xc
 2839 02e0 B7010000 		.4byte	.LASF42
 2840 02e4 04       		.byte	0x4
 2841 02e5 00       		.byte	0
 2842 02e6 03       		.uleb128 0x3
 2843 02e7 48040000 		.4byte	.LASF43
 2844 02eb 0C       		.byte	0xc
 2845 02ec 01       		.byte	0x1
 2846 02ed 2D       		.byte	0x2d
 2847 02ee 08       		.byte	0x8
 2848 02ef 0F030000 		.4byte	0x30f
 2849 02f3 04       		.uleb128 0x4
 2850 02f4 7600     		.ascii	"v\000"
 2851 02f6 01       		.byte	0x1
 2852 02f7 30       		.byte	0x30
 2853 02f8 0E       		.byte	0xe
 2854 02f9 30000000 		.4byte	0x30
 2855 02fd 02       		.byte	0x2
 2856 02fe 23       		.byte	0x23
 2857 02ff 00       		.uleb128 0
 2858 0300 04       		.uleb128 0x4
 2859 0301 667000   		.ascii	"fp\000"
 2860 0304 01       		.byte	0x1
 2861 0305 31       		.byte	0x31
 2862 0306 14       		.byte	0x14
 2863 0307 DA000000 		.4byte	0xda
 2864 030b 02       		.byte	0x2
 2865 030c 23       		.byte	0x23
 2866 030d 08       		.uleb128 0x8
 2867 030e 00       		.byte	0
 2868 030f 0D       		.uleb128 0xd
 2869 0310 01       		.byte	0x1
 2870 0311 98020000 		.4byte	.LASF78
 2871 0315 01       		.byte	0x1
 2872 0316 B2       		.byte	0xb2
 2873 0317 05       		.byte	0x5
 2874 0318 01       		.byte	0x1
 2875 0319 FE000000 		.4byte	0xfe
 2876 031d 00000000 		.4byte	.LFB5
 2877 0321 4E070000 		.4byte	.LFE5
 2878 0325 00000000 		.4byte	.LLST20
 2879 0329 01       		.byte	0x1
ARM GAS  /tmp/ccfh54Yn.s 			page 68


 2880 032a 660A0000 		.4byte	0xa66
 2881 032e 0E       		.uleb128 0xe
 2882 032f BB020000 		.4byte	.LASF44
 2883 0333 01       		.byte	0x1
 2884 0334 B2       		.byte	0xb2
 2885 0335 1D       		.byte	0x1d
 2886 0336 660A0000 		.4byte	0xa66
 2887 033a 62000000 		.4byte	.LLST21
 2888 033e 5E000000 		.4byte	.LVUS21
 2889 0342 0E       		.uleb128 0xe
 2890 0343 88010000 		.4byte	.LASF45
 2891 0347 01       		.byte	0x1
 2892 0348 B2       		.byte	0xb2
 2893 0349 34       		.byte	0x34
 2894 034a 6C0A0000 		.4byte	0xa6c
 2895 034e 8E000000 		.4byte	.LLST22
 2896 0352 80000000 		.4byte	.LVUS22
 2897 0356 0E       		.uleb128 0xe
 2898 0357 89030000 		.4byte	.LASF46
 2899 035b 01       		.byte	0x1
 2900 035c B2       		.byte	0xb2
 2901 035d 48       		.byte	0x48
 2902 035e 6C0A0000 		.4byte	0xa6c
 2903 0362 02010000 		.4byte	.LLST23
 2904 0366 EC000000 		.4byte	.LVUS23
 2905 036a 0F       		.uleb128 0xf
 2906 036b 684100   		.ascii	"hA\000"
 2907 036e 01       		.byte	0x1
 2908 036f B5       		.byte	0xb5
 2909 0370 0E       		.byte	0xe
 2910 0371 30000000 		.4byte	0x30
 2911 0375 AE010000 		.4byte	.LLST24
 2912 0379 92010000 		.4byte	.LVUS24
 2913 037d 0F       		.uleb128 0xf
 2914 037e 684200   		.ascii	"hB\000"
 2915 0381 01       		.byte	0x1
 2916 0382 B6       		.byte	0xb6
 2917 0383 0E       		.byte	0xe
 2918 0384 30000000 		.4byte	0x30
 2919 0388 BE020000 		.4byte	.LLST25
 2920 038c BA020000 		.4byte	.LVUS25
 2921 0390 10       		.uleb128 0x10
 2922 0391 CA030000 		.4byte	.LASF47
 2923 0395 01       		.byte	0x1
 2924 0396 B8       		.byte	0xb8
 2925 0397 0E       		.byte	0xe
 2926 0398 30000000 		.4byte	0x30
 2927 039c 03       		.byte	0x3
 2928 039d 91       		.byte	0x91
 2929 039e 887D     		.sleb128 -376
 2930 03a0 10       		.uleb128 0x10
 2931 03a1 CF030000 		.4byte	.LASF48
 2932 03a5 01       		.byte	0x1
 2933 03a6 B9       		.byte	0xb9
 2934 03a7 0E       		.byte	0xe
 2935 03a8 30000000 		.4byte	0x30
 2936 03ac 03       		.byte	0x3
ARM GAS  /tmp/ccfh54Yn.s 			page 69


 2937 03ad 91       		.byte	0x91
 2938 03ae 907D     		.sleb128 -368
 2939 03b0 10       		.uleb128 0x10
 2940 03b1 24020000 		.4byte	.LASF49
 2941 03b5 01       		.byte	0x1
 2942 03b6 BB       		.byte	0xbb
 2943 03b7 0F       		.byte	0xf
 2944 03b8 5D000000 		.4byte	0x5d
 2945 03bc 03       		.byte	0x3
 2946 03bd 91       		.byte	0x91
 2947 03be 887E     		.sleb128 -248
 2948 03c0 10       		.uleb128 0x10
 2949 03c1 29020000 		.4byte	.LASF50
 2950 03c5 01       		.byte	0x1
 2951 03c6 BB       		.byte	0xbb
 2952 03c7 15       		.byte	0x15
 2953 03c8 5D000000 		.4byte	0x5d
 2954 03cc 03       		.byte	0x3
 2955 03cd 91       		.byte	0x91
 2956 03ce 987E     		.sleb128 -232
 2957 03d0 10       		.uleb128 0x10
 2958 03d1 F5030000 		.4byte	.LASF51
 2959 03d5 01       		.byte	0x1
 2960 03d6 BE       		.byte	0xbe
 2961 03d7 0F       		.byte	0xf
 2962 03d8 5D000000 		.4byte	0x5d
 2963 03dc 03       		.byte	0x3
 2964 03dd 91       		.byte	0x91
 2965 03de A87E     		.sleb128 -216
 2966 03e0 10       		.uleb128 0x10
 2967 03e1 5D000000 		.4byte	.LASF52
 2968 03e5 01       		.byte	0x1
 2969 03e6 BF       		.byte	0xbf
 2970 03e7 0F       		.byte	0xf
 2971 03e8 5D000000 		.4byte	0x5d
 2972 03ec 03       		.byte	0x3
 2973 03ed 91       		.byte	0x91
 2974 03ee B87E     		.sleb128 -200
 2975 03f0 11       		.uleb128 0x11
 2976 03f1 613100   		.ascii	"a1\000"
 2977 03f4 01       		.byte	0x1
 2978 03f5 C1       		.byte	0xc1
 2979 03f6 0E       		.byte	0xe
 2980 03f7 30000000 		.4byte	0x30
 2981 03fb 11       		.uleb128 0x11
 2982 03fc 613200   		.ascii	"a2\000"
 2983 03ff 01       		.byte	0x1
 2984 0400 C1       		.byte	0xc1
 2985 0401 1E       		.byte	0x1e
 2986 0402 30000000 		.4byte	0x30
 2987 0406 11       		.uleb128 0x11
 2988 0407 623100   		.ascii	"b1\000"
 2989 040a 01       		.byte	0x1
 2990 040b C2       		.byte	0xc2
 2991 040c 0E       		.byte	0xe
 2992 040d 30000000 		.4byte	0x30
 2993 0411 11       		.uleb128 0x11
ARM GAS  /tmp/ccfh54Yn.s 			page 70


 2994 0412 623200   		.ascii	"b2\000"
 2995 0415 01       		.byte	0x1
 2996 0416 C2       		.byte	0xc2
 2997 0417 1E       		.byte	0x1e
 2998 0418 30000000 		.4byte	0x30
 2999 041c 12       		.uleb128 0x12
 3000 041d 647000   		.ascii	"dp\000"
 3001 0420 01       		.byte	0x1
 3002 0421 C4       		.byte	0xc4
 3003 0422 0E       		.byte	0xe
 3004 0423 30000000 		.4byte	0x30
 3005 0427 03       		.byte	0x3
 3006 0428 91       		.byte	0x91
 3007 0429 987D     		.sleb128 -360
 3008 042b 12       		.uleb128 0x12
 3009 042c 644100   		.ascii	"dA\000"
 3010 042f 01       		.byte	0x1
 3011 0430 C5       		.byte	0xc5
 3012 0431 0E       		.byte	0xe
 3013 0432 30000000 		.4byte	0x30
 3014 0436 03       		.byte	0x3
 3015 0437 91       		.byte	0x91
 3016 0438 A07D     		.sleb128 -352
 3017 043a 12       		.uleb128 0x12
 3018 043b 644200   		.ascii	"dB\000"
 3019 043e 01       		.byte	0x1
 3020 043f C6       		.byte	0xc6
 3021 0440 0E       		.byte	0xe
 3022 0441 30000000 		.4byte	0x30
 3023 0445 03       		.byte	0x3
 3024 0446 91       		.byte	0x91
 3025 0447 A87D     		.sleb128 -344
 3026 0449 12       		.uleb128 0x12
 3027 044a 4300     		.ascii	"C\000"
 3028 044c 01       		.byte	0x1
 3029 044d C8       		.byte	0xc8
 3030 044e 0F       		.byte	0xf
 3031 044f 5D000000 		.4byte	0x5d
 3032 0453 03       		.byte	0x3
 3033 0454 91       		.byte	0x91
 3034 0455 C87E     		.sleb128 -184
 3035 0457 10       		.uleb128 0x10
 3036 0458 1A040000 		.4byte	.LASF53
 3037 045c 01       		.byte	0x1
 3038 045d C9       		.byte	0xc9
 3039 045e 0F       		.byte	0xf
 3040 045f 5D000000 		.4byte	0x5d
 3041 0463 03       		.byte	0x3
 3042 0464 91       		.byte	0x91
 3043 0465 D87E     		.sleb128 -168
 3044 0467 10       		.uleb128 0x10
 3045 0468 50020000 		.4byte	.LASF54
 3046 046c 01       		.byte	0x1
 3047 046d CA       		.byte	0xca
 3048 046e 0F       		.byte	0xf
 3049 046f 5D000000 		.4byte	0x5d
 3050 0473 03       		.byte	0x3
ARM GAS  /tmp/ccfh54Yn.s 			page 71


 3051 0474 91       		.byte	0x91
 3052 0475 E87E     		.sleb128 -152
 3053 0477 10       		.uleb128 0x10
 3054 0478 A4030000 		.4byte	.LASF55
 3055 047c 01       		.byte	0x1
 3056 047d CD       		.byte	0xcd
 3057 047e 0E       		.byte	0xe
 3058 047f 30000000 		.4byte	0x30
 3059 0483 03       		.byte	0x3
 3060 0484 91       		.byte	0x91
 3061 0485 B07D     		.sleb128 -336
 3062 0487 10       		.uleb128 0x10
 3063 0488 AA030000 		.4byte	.LASF56
 3064 048c 01       		.byte	0x1
 3065 048d D6       		.byte	0xd6
 3066 048e 0E       		.byte	0xe
 3067 048f 30000000 		.4byte	0x30
 3068 0493 03       		.byte	0x3
 3069 0494 91       		.byte	0x91
 3070 0495 B87D     		.sleb128 -328
 3071 0497 13       		.uleb128 0x13
 3072 0498 E1020000 		.4byte	.LASF57
 3073 049c 01       		.byte	0x1
 3074 049d DD       		.byte	0xdd
 3075 049e 0C       		.byte	0xc
 3076 049f 83020000 		.4byte	0x283
 3077 04a3 04030000 		.4byte	.LLST26
 3078 04a7 EA020000 		.4byte	.LVUS26
 3079 04ab 13       		.uleb128 0x13
 3080 04ac 56020000 		.4byte	.LASF15
 3081 04b0 01       		.byte	0x1
 3082 04b1 DE       		.byte	0xde
 3083 04b2 08       		.byte	0x8
 3084 04b3 29000000 		.4byte	0x29
 3085 04b7 AF030000 		.4byte	.LLST27
 3086 04bb A5030000 		.4byte	.LVUS27
 3087 04bf 10       		.uleb128 0x10
 3088 04c0 B0030000 		.4byte	.LASF14
 3089 04c4 01       		.byte	0x1
 3090 04c5 DF       		.byte	0xdf
 3091 04c6 0E       		.byte	0xe
 3092 04c7 30000000 		.4byte	0x30
 3093 04cb 03       		.byte	0x3
 3094 04cc 91       		.byte	0x91
 3095 04cd C07D     		.sleb128 -320
 3096 04cf 13       		.uleb128 0x13
 3097 04d0 0B000000 		.4byte	.LASF58
 3098 04d4 01       		.byte	0x1
 3099 04d5 E6       		.byte	0xe6
 3100 04d6 0E       		.byte	0xe
 3101 04d7 58000000 		.4byte	0x58
 3102 04db F7030000 		.4byte	.LLST28
 3103 04df F3030000 		.4byte	.LVUS28
 3104 04e3 13       		.uleb128 0x13
 3105 04e4 80020000 		.4byte	.LASF59
 3106 04e8 01       		.byte	0x1
 3107 04e9 E7       		.byte	0xe7
ARM GAS  /tmp/ccfh54Yn.s 			page 72


 3108 04ea 0E       		.byte	0xe
 3109 04eb 58000000 		.4byte	0x58
 3110 04ef 23040000 		.4byte	.LLST29
 3111 04f3 1F040000 		.4byte	.LVUS29
 3112 04f7 14       		.uleb128 0x14
 3113 04f8 53040000 		.4byte	.LASF60
 3114 04fc 01       		.byte	0x1
 3115 04fd 0001     		.2byte	0x100
 3116 04ff 0E       		.byte	0xe
 3117 0500 30000000 		.4byte	0x30
 3118 0504 03       		.byte	0x3
 3119 0505 91       		.byte	0x91
 3120 0506 C87D     		.sleb128 -312
 3121 0508 14       		.uleb128 0x14
 3122 0509 00000000 		.4byte	.LASF61
 3123 050d 01       		.byte	0x1
 3124 050e 0001     		.2byte	0x100
 3125 0510 1B       		.byte	0x1b
 3126 0511 30000000 		.4byte	0x30
 3127 0515 03       		.byte	0x3
 3128 0516 91       		.byte	0x91
 3129 0517 D07D     		.sleb128 -304
 3130 0519 14       		.uleb128 0x14
 3131 051a 50000000 		.4byte	.LASF62
 3132 051e 01       		.byte	0x1
 3133 051f 0101     		.2byte	0x101
 3134 0521 14       		.byte	0x14
 3135 0522 720A0000 		.4byte	0xa72
 3136 0526 03       		.byte	0x3
 3137 0527 91       		.byte	0x91
 3138 0528 F87E     		.sleb128 -136
 3139 052a 15       		.uleb128 0x15
 3140 052b 34020000 		.4byte	.LASF63
 3141 052f 01       		.byte	0x1
 3142 0530 0501     		.2byte	0x105
 3143 0532 08       		.byte	0x8
 3144 0533 29000000 		.4byte	0x29
 3145 0537 55040000 		.4byte	.LLST30
 3146 053b 4B040000 		.4byte	.LVUS30
 3147 053f 15       		.uleb128 0x15
 3148 0540 38000000 		.4byte	.LASF64
 3149 0544 01       		.byte	0x1
 3150 0545 0501     		.2byte	0x105
 3151 0547 0F       		.byte	0xf
 3152 0548 29000000 		.4byte	0x29
 3153 054c A3040000 		.4byte	.LLST31
 3154 0550 99040000 		.4byte	.LVUS31
 3155 0554 15       		.uleb128 0x15
 3156 0555 D4030000 		.4byte	.LASF65
 3157 0559 01       		.byte	0x1
 3158 055a 0501     		.2byte	0x105
 3159 055c 18       		.byte	0x18
 3160 055d 29000000 		.4byte	0x29
 3161 0561 F1040000 		.4byte	.LLST32
 3162 0565 E7040000 		.4byte	.LVUS32
 3163 0569 15       		.uleb128 0x15
 3164 056a 17000000 		.4byte	.LASF66
ARM GAS  /tmp/ccfh54Yn.s 			page 73


 3165 056e 01       		.byte	0x1
 3166 056f 0601     		.2byte	0x106
 3167 0571 07       		.byte	0x7
 3168 0572 D3000000 		.4byte	0xd3
 3169 0576 3F050000 		.4byte	.LLST33
 3170 057a 35050000 		.4byte	.LVUS33
 3171 057e 15       		.uleb128 0x15
 3172 057f 69030000 		.4byte	.LASF67
 3173 0583 01       		.byte	0x1
 3174 0584 0601     		.2byte	0x106
 3175 0586 10       		.byte	0x10
 3176 0587 D3000000 		.4byte	0xd3
 3177 058b 8E050000 		.4byte	.LLST34
 3178 058f 84050000 		.4byte	.LVUS34
 3179 0593 14       		.uleb128 0x14
 3180 0594 71030000 		.4byte	.LASF68
 3181 0598 01       		.byte	0x1
 3182 0599 4601     		.2byte	0x146
 3183 059b 14       		.byte	0x14
 3184 059c 720A0000 		.4byte	0xa72
 3185 05a0 03       		.byte	0x3
 3186 05a1 91       		.byte	0x91
 3187 05a2 907F     		.sleb128 -112
 3188 05a4 14       		.uleb128 0x14
 3189 05a5 7D030000 		.4byte	.LASF69
 3190 05a9 01       		.byte	0x1
 3191 05aa 4701     		.2byte	0x147
 3192 05ac 14       		.byte	0x14
 3193 05ad 720A0000 		.4byte	0xa72
 3194 05b1 03       		.byte	0x3
 3195 05b2 91       		.byte	0x91
 3196 05b3 A87F     		.sleb128 -88
 3197 05b5 16       		.uleb128 0x16
 3198 05b6 6E7000   		.ascii	"np\000"
 3199 05b9 01       		.byte	0x1
 3200 05ba 4E01     		.2byte	0x14e
 3201 05bc 06       		.byte	0x6
 3202 05bd FE000000 		.4byte	0xfe
 3203 05c1 D5050000 		.4byte	.LLST35
 3204 05c5 D1050000 		.4byte	.LVUS35
 3205 05c9 15       		.uleb128 0x15
 3206 05ca 40030000 		.4byte	.LASF70
 3207 05ce 01       		.byte	0x1
 3208 05cf 5F01     		.2byte	0x15f
 3209 05d1 06       		.byte	0x6
 3210 05d2 FE000000 		.4byte	0xfe
 3211 05d6 FB050000 		.4byte	.LLST36
 3212 05da F3050000 		.4byte	.LVUS36
 3213 05de 17       		.uleb128 0x17
 3214 05df A0010000 		.4byte	.Ldebug_ranges0+0x1a0
 3215 05e3 1F060000 		.4byte	0x61f
 3216 05e7 15       		.uleb128 0x15
 3217 05e8 31040000 		.4byte	.LASF71
 3218 05ec 01       		.byte	0x1
 3219 05ed 1001     		.2byte	0x110
 3220 05ef 0A       		.byte	0xa
 3221 05f0 29000000 		.4byte	0x29
ARM GAS  /tmp/ccfh54Yn.s 			page 74


 3222 05f4 33060000 		.4byte	.LLST53
 3223 05f8 31060000 		.4byte	.LVUS53
 3224 05fc 18       		.uleb128 0x18
 3225 05fd 78050000 		.4byte	.LVL118
 3226 0601 1A0E0000 		.4byte	0xe1a
 3227 0605 18       		.uleb128 0x18
 3228 0606 9E050000 		.4byte	.LVL120
 3229 060a 1A0E0000 		.4byte	0xe1a
 3230 060e 19       		.uleb128 0x19
 3231 060f D8050000 		.4byte	.LVL124
 3232 0613 890A0000 		.4byte	0xa89
 3233 0617 1A       		.uleb128 0x1a
 3234 0618 01       		.byte	0x1
 3235 0619 50       		.byte	0x50
 3236 061a 02       		.byte	0x2
 3237 061b 7B       		.byte	0x7b
 3238 061c 00       		.sleb128 0
 3239 061d 00       		.byte	0
 3240 061e 00       		.byte	0
 3241 061f 1B       		.uleb128 0x1b
 3242 0620 94060000 		.4byte	.LBB108
 3243 0624 FC060000 		.4byte	.LBE108
 3244 0628 64060000 		.4byte	0x664
 3245 062c 15       		.uleb128 0x15
 3246 062d 31040000 		.4byte	.LASF71
 3247 0631 01       		.byte	0x1
 3248 0632 1E01     		.2byte	0x11e
 3249 0634 0A       		.byte	0xa
 3250 0635 29000000 		.4byte	0x29
 3251 0639 49060000 		.4byte	.LLST55
 3252 063d 47060000 		.4byte	.LVUS55
 3253 0641 18       		.uleb128 0x18
 3254 0642 98060000 		.4byte	.LVL141
 3255 0646 1A0E0000 		.4byte	0xe1a
 3256 064a 18       		.uleb128 0x18
 3257 064b C6060000 		.4byte	.LVL143
 3258 064f 1A0E0000 		.4byte	0xe1a
 3259 0653 19       		.uleb128 0x19
 3260 0654 FC060000 		.4byte	.LVL147
 3261 0658 890A0000 		.4byte	0xa89
 3262 065c 1A       		.uleb128 0x1a
 3263 065d 01       		.byte	0x1
 3264 065e 50       		.byte	0x50
 3265 065f 02       		.byte	0x2
 3266 0660 7B       		.byte	0x7b
 3267 0661 00       		.sleb128 0
 3268 0662 00       		.byte	0
 3269 0663 00       		.byte	0
 3270 0664 17       		.uleb128 0x17
 3271 0665 C0010000 		.4byte	.Ldebug_ranges0+0x1c0
 3272 0669 AE060000 		.4byte	0x6ae
 3273 066d 15       		.uleb128 0x15
 3274 066e 31040000 		.4byte	.LASF71
 3275 0672 01       		.byte	0x1
 3276 0673 2C01     		.2byte	0x12c
 3277 0675 0A       		.byte	0xa
 3278 0676 29000000 		.4byte	0x29
ARM GAS  /tmp/ccfh54Yn.s 			page 75


 3279 067a 5F060000 		.4byte	.LLST54
 3280 067e 5D060000 		.4byte	.LVUS54
 3281 0682 18       		.uleb128 0x18
 3282 0683 14060000 		.4byte	.LVL132
 3283 0687 280E0000 		.4byte	0xe28
 3284 068b 18       		.uleb128 0x18
 3285 068c 34060000 		.4byte	.LVL133
 3286 0690 1A0E0000 		.4byte	0xe1a
 3287 0694 18       		.uleb128 0x18
 3288 0695 56060000 		.4byte	.LVL135
 3289 0699 1A0E0000 		.4byte	0xe1a
 3290 069d 19       		.uleb128 0x19
 3291 069e 90060000 		.4byte	.LVL139
 3292 06a2 890A0000 		.4byte	0xa89
 3293 06a6 1A       		.uleb128 0x1a
 3294 06a7 01       		.byte	0x1
 3295 06a8 50       		.byte	0x50
 3296 06a9 02       		.byte	0x2
 3297 06aa 7B       		.byte	0x7b
 3298 06ab 00       		.sleb128 0
 3299 06ac 00       		.byte	0
 3300 06ad 00       		.byte	0
 3301 06ae 17       		.uleb128 0x17
 3302 06af D0000000 		.4byte	.Ldebug_ranges0+0xd0
 3303 06b3 F8060000 		.4byte	0x6f8
 3304 06b7 15       		.uleb128 0x15
 3305 06b8 31040000 		.4byte	.LASF71
 3306 06bc 01       		.byte	0x1
 3307 06bd 3A01     		.2byte	0x13a
 3308 06bf 0A       		.byte	0xa
 3309 06c0 29000000 		.4byte	0x29
 3310 06c4 77060000 		.4byte	.LLST39
 3311 06c8 73060000 		.4byte	.LVUS39
 3312 06cc 18       		.uleb128 0x18
 3313 06cd 82030000 		.4byte	.LVL79
 3314 06d1 280E0000 		.4byte	0xe28
 3315 06d5 18       		.uleb128 0x18
 3316 06d6 9E030000 		.4byte	.LVL80
 3317 06da 1A0E0000 		.4byte	0xe1a
 3318 06de 18       		.uleb128 0x18
 3319 06df C8030000 		.4byte	.LVL82
 3320 06e3 1A0E0000 		.4byte	0xe1a
 3321 06e7 19       		.uleb128 0x19
 3322 06e8 06040000 		.4byte	.LVL87
 3323 06ec 890A0000 		.4byte	0xa89
 3324 06f0 1A       		.uleb128 0x1a
 3325 06f1 01       		.byte	0x1
 3326 06f2 50       		.byte	0x50
 3327 06f3 02       		.byte	0x2
 3328 06f4 7B       		.byte	0x7b
 3329 06f5 00       		.sleb128 0
 3330 06f6 00       		.byte	0
 3331 06f7 00       		.byte	0
 3332 06f8 17       		.uleb128 0x17
 3333 06f9 00010000 		.4byte	.Ldebug_ranges0+0x100
 3334 06fd F4070000 		.4byte	0x7f4
 3335 0701 16       		.uleb128 0x16
ARM GAS  /tmp/ccfh54Yn.s 			page 76


 3336 0702 6900     		.ascii	"i\000"
 3337 0704 01       		.byte	0x1
 3338 0705 6001     		.2byte	0x160
 3339 0707 0B       		.byte	0xb
 3340 0708 FE000000 		.4byte	0xfe
 3341 070c 9D060000 		.4byte	.LLST44
 3342 0710 97060000 		.4byte	.LVUS44
 3343 0714 1C       		.uleb128 0x1c
 3344 0715 20010000 		.4byte	.Ldebug_ranges0+0x120
 3345 0719 15       		.uleb128 0x15
 3346 071a 56020000 		.4byte	.LASF15
 3347 071e 01       		.byte	0x1
 3348 071f 6201     		.2byte	0x162
 3349 0721 09       		.byte	0x9
 3350 0722 29000000 		.4byte	0x29
 3351 0726 CC060000 		.4byte	.LLST45
 3352 072a C8060000 		.4byte	.LVUS45
 3353 072e 1D       		.uleb128 0x1d
 3354 072f B80C0000 		.4byte	0xcb8
 3355 0733 FE040000 		.4byte	.LBI74
 3356 0737 0100     		.2byte	.LVU473
 3357 0739 40010000 		.4byte	.Ldebug_ranges0+0x140
 3358 073d 01       		.byte	0x1
 3359 073e 6C01     		.2byte	0x16c
 3360 0740 05       		.byte	0x5
 3361 0741 D7070000 		.4byte	0x7d7
 3362 0745 1E       		.uleb128 0x1e
 3363 0746 C70C0000 		.4byte	0xcc7
 3364 074a EE060000 		.4byte	.LLST46
 3365 074e EC060000 		.4byte	.LVUS46
 3366 0752 1F       		.uleb128 0x1f
 3367 0753 D90C0000 		.4byte	0xcd9
 3368 0757 FE040000 		.4byte	.LBI76
 3369 075b 0300     		.2byte	.LVU475
 3370 075d 58010000 		.4byte	.Ldebug_ranges0+0x158
 3371 0761 01       		.byte	0x1
 3372 0762 42       		.byte	0x42
 3373 0763 02       		.byte	0x2
 3374 0764 96070000 		.4byte	0x796
 3375 0768 1E       		.uleb128 0x1e
 3376 0769 F20C0000 		.4byte	0xcf2
 3377 076d 09070000 		.4byte	.LLST47
 3378 0771 07070000 		.4byte	.LVUS47
 3379 0775 1E       		.uleb128 0x1e
 3380 0776 E80C0000 		.4byte	0xce8
 3381 077a 24070000 		.4byte	.LLST48
 3382 077e 22070000 		.4byte	.LVUS48
 3383 0782 1C       		.uleb128 0x1c
 3384 0783 58010000 		.4byte	.Ldebug_ranges0+0x158
 3385 0787 20       		.uleb128 0x20
 3386 0788 FC0C0000 		.4byte	0xcfc
 3387 078c 41070000 		.4byte	.LLST49
 3388 0790 3D070000 		.4byte	.LVUS49
 3389 0794 00       		.byte	0
 3390 0795 00       		.byte	0
 3391 0796 21       		.uleb128 0x21
 3392 0797 D90C0000 		.4byte	0xcd9
ARM GAS  /tmp/ccfh54Yn.s 			page 77


 3393 079b 2C050000 		.4byte	.LBI82
 3394 079f 0300     		.2byte	.LVU498
 3395 07a1 80010000 		.4byte	.Ldebug_ranges0+0x180
 3396 07a5 01       		.byte	0x1
 3397 07a6 43       		.byte	0x43
 3398 07a7 02       		.byte	0x2
 3399 07a8 1E       		.uleb128 0x1e
 3400 07a9 F20C0000 		.4byte	0xcf2
 3401 07ad 66070000 		.4byte	.LLST50
 3402 07b1 64070000 		.4byte	.LVUS50
 3403 07b5 1E       		.uleb128 0x1e
 3404 07b6 E80C0000 		.4byte	0xce8
 3405 07ba 81070000 		.4byte	.LLST51
 3406 07be 7F070000 		.4byte	.LVUS51
 3407 07c2 1C       		.uleb128 0x1c
 3408 07c3 80010000 		.4byte	.Ldebug_ranges0+0x180
 3409 07c7 20       		.uleb128 0x20
 3410 07c8 FC0C0000 		.4byte	0xcfc
 3411 07cc 9C070000 		.4byte	.LLST52
 3412 07d0 9A070000 		.4byte	.LVUS52
 3413 07d4 00       		.byte	0
 3414 07d5 00       		.byte	0
 3415 07d6 00       		.byte	0
 3416 07d7 18       		.uleb128 0x18
 3417 07d8 82040000 		.4byte	.LVL99
 3418 07dc 1A0E0000 		.4byte	0xe1a
 3419 07e0 18       		.uleb128 0x18
 3420 07e1 E2040000 		.4byte	.LVL107
 3421 07e5 360E0000 		.4byte	0xe36
 3422 07e9 18       		.uleb128 0x18
 3423 07ea FE040000 		.4byte	.LVL108
 3424 07ee 440E0000 		.4byte	0xe44
 3425 07f2 00       		.byte	0
 3426 07f3 00       		.byte	0
 3427 07f4 1D       		.uleb128 0x1d
 3428 07f5 0F0D0000 		.4byte	0xd0f
 3429 07f9 70030000 		.4byte	.LBI40
 3430 07fd 0300     		.2byte	.LVU358
 3431 07ff 48000000 		.4byte	.Ldebug_ranges0+0x48
 3432 0803 01       		.byte	0x1
 3433 0804 0201     		.2byte	0x102
 3434 0806 05       		.byte	0x5
 3435 0807 19080000 		.4byte	0x819
 3436 080b 1E       		.uleb128 0x1e
 3437 080c 1E0D0000 		.4byte	0xd1e
 3438 0810 BB070000 		.4byte	.LLST37
 3439 0814 AF070000 		.4byte	.LVUS37
 3440 0818 00       		.byte	0
 3441 0819 1D       		.uleb128 0x1d
 3442 081a 0F0D0000 		.4byte	0xd0f
 3443 081e 70030000 		.4byte	.LBI51
 3444 0822 0700     		.2byte	.LVU362
 3445 0824 98000000 		.4byte	.Ldebug_ranges0+0x98
 3446 0828 01       		.byte	0x1
 3447 0829 0301     		.2byte	0x103
 3448 082b 05       		.byte	0x5
 3449 082c 3E080000 		.4byte	0x83e
ARM GAS  /tmp/ccfh54Yn.s 			page 78


 3450 0830 1E       		.uleb128 0x1e
 3451 0831 1E0D0000 		.4byte	0xd1e
 3452 0835 19080000 		.4byte	.LLST38
 3453 0839 11080000 		.4byte	.LVUS38
 3454 083d 00       		.byte	0
 3455 083e 1D       		.uleb128 0x1d
 3456 083f 0F0D0000 		.4byte	0xd0f
 3457 0843 08040000 		.4byte	.LBI62
 3458 0847 0400     		.2byte	.LVU407
 3459 0849 E8000000 		.4byte	.Ldebug_ranges0+0xe8
 3460 084d 01       		.byte	0x1
 3461 084e 4901     		.2byte	0x149
 3462 0850 05       		.byte	0x5
 3463 0851 63080000 		.4byte	0x863
 3464 0855 1E       		.uleb128 0x1e
 3465 0856 1E0D0000 		.4byte	0xd1e
 3466 085a 5B080000 		.4byte	.LLST40
 3467 085e 59080000 		.4byte	.LVUS40
 3468 0862 00       		.byte	0
 3469 0863 22       		.uleb128 0x22
 3470 0864 0F0D0000 		.4byte	0xd0f
 3471 0868 16040000 		.4byte	.LBI66
 3472 086c 0200     		.2byte	.LVU414
 3473 086e 16040000 		.4byte	.LBB66
 3474 0872 18040000 		.4byte	.LBE66
 3475 0876 01       		.byte	0x1
 3476 0877 4A01     		.2byte	0x14a
 3477 0879 05       		.byte	0x5
 3478 087a 8C080000 		.4byte	0x88c
 3479 087e 1E       		.uleb128 0x1e
 3480 087f 1E0D0000 		.4byte	0xd1e
 3481 0883 73080000 		.4byte	.LLST41
 3482 0887 71080000 		.4byte	.LVUS41
 3483 088b 00       		.byte	0
 3484 088c 22       		.uleb128 0x22
 3485 088d 0F0D0000 		.4byte	0xd0f
 3486 0891 18040000 		.4byte	.LBI68
 3487 0895 0200     		.2byte	.LVU419
 3488 0897 18040000 		.4byte	.LBB68
 3489 089b 1A040000 		.4byte	.LBE68
 3490 089f 01       		.byte	0x1
 3491 08a0 4B01     		.2byte	0x14b
 3492 08a2 05       		.byte	0x5
 3493 08a3 B5080000 		.4byte	0x8b5
 3494 08a7 1E       		.uleb128 0x1e
 3495 08a8 1E0D0000 		.4byte	0xd1e
 3496 08ac 8B080000 		.4byte	.LLST42
 3497 08b0 89080000 		.4byte	.LVUS42
 3498 08b4 00       		.byte	0
 3499 08b5 22       		.uleb128 0x22
 3500 08b6 0F0D0000 		.4byte	0xd0f
 3501 08ba 1A040000 		.4byte	.LBI70
 3502 08be 0200     		.2byte	.LVU424
 3503 08c0 1A040000 		.4byte	.LBB70
 3504 08c4 1C040000 		.4byte	.LBE70
 3505 08c8 01       		.byte	0x1
 3506 08c9 4C01     		.2byte	0x14c
ARM GAS  /tmp/ccfh54Yn.s 			page 79


 3507 08cb 05       		.byte	0x5
 3508 08cc DE080000 		.4byte	0x8de
 3509 08d0 1E       		.uleb128 0x1e
 3510 08d1 1E0D0000 		.4byte	0xd1e
 3511 08d5 A3080000 		.4byte	.LLST43
 3512 08d9 A1080000 		.4byte	.LVUS43
 3513 08dd 00       		.byte	0
 3514 08de 23       		.uleb128 0x23
 3515 08df 20000000 		.4byte	.LVL45
 3516 08e3 360E0000 		.4byte	0xe36
 3517 08e7 F8080000 		.4byte	0x8f8
 3518 08eb 1A       		.uleb128 0x1a
 3519 08ec 02       		.byte	0x2
 3520 08ed 90       		.byte	0x90
 3521 08ee 40       		.uleb128 0x40
 3522 08ef 07       		.byte	0x7
 3523 08f0 F4       		.byte	0xf4
 3524 08f1 29       		.uleb128 0x29
 3525 08f2 04       		.byte	0x4
 3526 08f3 0000003F 		.4byte	0x3f000000
 3527 08f7 00       		.byte	0
 3528 08f8 23       		.uleb128 0x23
 3529 08f9 42000000 		.4byte	.LVL47
 3530 08fd 360E0000 		.4byte	0xe36
 3531 0901 12090000 		.4byte	0x912
 3532 0905 1A       		.uleb128 0x1a
 3533 0906 02       		.byte	0x2
 3534 0907 90       		.byte	0x90
 3535 0908 40       		.uleb128 0x40
 3536 0909 07       		.byte	0x7
 3537 090a F4       		.byte	0xf4
 3538 090b 29       		.uleb128 0x29
 3539 090c 04       		.byte	0x4
 3540 090d 0000003F 		.4byte	0x3f000000
 3541 0911 00       		.byte	0
 3542 0912 23       		.uleb128 0x23
 3543 0913 76000000 		.4byte	.LVL49
 3544 0917 520E0000 		.4byte	0xe52
 3545 091b 26090000 		.4byte	0x926
 3546 091f 1A       		.uleb128 0x1a
 3547 0920 01       		.byte	0x1
 3548 0921 50       		.byte	0x50
 3549 0922 02       		.byte	0x2
 3550 0923 79       		.byte	0x79
 3551 0924 00       		.sleb128 0
 3552 0925 00       		.byte	0
 3553 0926 23       		.uleb128 0x23
 3554 0927 80000000 		.4byte	.LVL50
 3555 092b 520E0000 		.4byte	0xe52
 3556 092f 3A090000 		.4byte	0x93a
 3557 0933 1A       		.uleb128 0x1a
 3558 0934 01       		.byte	0x1
 3559 0935 50       		.byte	0x50
 3560 0936 02       		.byte	0x2
 3561 0937 7A       		.byte	0x7a
 3562 0938 00       		.sleb128 0
 3563 0939 00       		.byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 80


 3564 093a 18       		.uleb128 0x18
 3565 093b 94000000 		.4byte	.LVL51
 3566 093f 600E0000 		.4byte	0xe60
 3567 0943 18       		.uleb128 0x18
 3568 0944 C8000000 		.4byte	.LVL52
 3569 0948 600E0000 		.4byte	0xe60
 3570 094c 18       		.uleb128 0x18
 3571 094d FC000000 		.4byte	.LVL53
 3572 0951 440E0000 		.4byte	0xe44
 3573 0955 18       		.uleb128 0x18
 3574 0956 20010000 		.4byte	.LVL54
 3575 095a 6E0E0000 		.4byte	0xe6e
 3576 095e 18       		.uleb128 0x18
 3577 095f 4C010000 		.4byte	.LVL55
 3578 0963 6E0E0000 		.4byte	0xe6e
 3579 0967 18       		.uleb128 0x18
 3580 0968 80010000 		.4byte	.LVL56
 3581 096c 7C0E0000 		.4byte	0xe7c
 3582 0970 18       		.uleb128 0x18
 3583 0971 94010000 		.4byte	.LVL57
 3584 0975 8A0E0000 		.4byte	0xe8a
 3585 0979 18       		.uleb128 0x18
 3586 097a A8010000 		.4byte	.LVL58
 3587 097e 600E0000 		.4byte	0xe60
 3588 0982 18       		.uleb128 0x18
 3589 0983 CC010000 		.4byte	.LVL59
 3590 0987 980E0000 		.4byte	0xe98
 3591 098b 18       		.uleb128 0x18
 3592 098c E0010000 		.4byte	.LVL60
 3593 0990 440E0000 		.4byte	0xe44
 3594 0994 18       		.uleb128 0x18
 3595 0995 0C020000 		.4byte	.LVL61
 3596 0999 6E0E0000 		.4byte	0xe6e
 3597 099d 23       		.uleb128 0x23
 3598 099e 1A020000 		.4byte	.LVL62
 3599 09a2 A60E0000 		.4byte	0xea6
 3600 09a6 B2090000 		.4byte	0x9b2
 3601 09aa 1A       		.uleb128 0x1a
 3602 09ab 01       		.byte	0x1
 3603 09ac 50       		.byte	0x50
 3604 09ad 03       		.byte	0x3
 3605 09ae 91       		.byte	0x91
 3606 09af B07D     		.sleb128 -336
 3607 09b1 00       		.byte	0
 3608 09b2 18       		.uleb128 0x18
 3609 09b3 50020000 		.4byte	.LVL66
 3610 09b7 980E0000 		.4byte	0xe98
 3611 09bb 18       		.uleb128 0x18
 3612 09bc 64020000 		.4byte	.LVL67
 3613 09c0 440E0000 		.4byte	0xe44
 3614 09c4 18       		.uleb128 0x18
 3615 09c5 90020000 		.4byte	.LVL68
 3616 09c9 6E0E0000 		.4byte	0xe6e
 3617 09cd 23       		.uleb128 0x23
 3618 09ce 9E020000 		.4byte	.LVL69
 3619 09d2 A60E0000 		.4byte	0xea6
 3620 09d6 E2090000 		.4byte	0x9e2
ARM GAS  /tmp/ccfh54Yn.s 			page 81


 3621 09da 1A       		.uleb128 0x1a
 3622 09db 01       		.byte	0x1
 3623 09dc 50       		.byte	0x50
 3624 09dd 03       		.byte	0x3
 3625 09de 91       		.byte	0x91
 3626 09df B87D     		.sleb128 -328
 3627 09e1 00       		.byte	0
 3628 09e2 18       		.uleb128 0x18
 3629 09e3 20040000 		.4byte	.LVL94
 3630 09e7 280E0000 		.4byte	0xe28
 3631 09eb 23       		.uleb128 0x23
 3632 09ec 36040000 		.4byte	.LVL95
 3633 09f0 A50B0000 		.4byte	0xba5
 3634 09f4 170A0000 		.4byte	0xa17
 3635 09f8 1A       		.uleb128 0x1a
 3636 09f9 01       		.byte	0x1
 3637 09fa 50       		.byte	0x50
 3638 09fb 03       		.byte	0x3
 3639 09fc 91       		.byte	0x91
 3640 09fd 907F     		.sleb128 -112
 3641 09ff 1A       		.uleb128 0x1a
 3642 0a00 01       		.byte	0x1
 3643 0a01 51       		.byte	0x51
 3644 0a02 02       		.byte	0x2
 3645 0a03 7B       		.byte	0x7b
 3646 0a04 00       		.sleb128 0
 3647 0a05 1A       		.uleb128 0x1a
 3648 0a06 02       		.byte	0x2
 3649 0a07 90       		.byte	0x90
 3650 0a08 42       		.uleb128 0x42
 3651 0a09 03       		.byte	0x3
 3652 0a0a F5       		.byte	0xf5
 3653 0a0b 55       		.uleb128 0x55
 3654 0a0c 29       		.uleb128 0x29
 3655 0a0d 1A       		.uleb128 0x1a
 3656 0a0e 01       		.byte	0x1
 3657 0a0f 52       		.byte	0x52
 3658 0a10 05       		.byte	0x5
 3659 0a11 91       		.byte	0x91
 3660 0a12 F47C     		.sleb128 -396
 3661 0a14 94       		.byte	0x94
 3662 0a15 01       		.byte	0x1
 3663 0a16 00       		.byte	0
 3664 0a17 23       		.uleb128 0x23
 3665 0a18 52040000 		.4byte	.LVL97
 3666 0a1c A50B0000 		.4byte	0xba5
 3667 0a20 410A0000 		.4byte	0xa41
 3668 0a24 1A       		.uleb128 0x1a
 3669 0a25 01       		.byte	0x1
 3670 0a26 50       		.byte	0x50
 3671 0a27 03       		.byte	0x3
 3672 0a28 91       		.byte	0x91
 3673 0a29 A87F     		.sleb128 -88
 3674 0a2b 1A       		.uleb128 0x1a
 3675 0a2c 01       		.byte	0x1
 3676 0a2d 51       		.byte	0x51
 3677 0a2e 03       		.byte	0x3
ARM GAS  /tmp/ccfh54Yn.s 			page 82


 3678 0a2f 91       		.byte	0x91
 3679 0a30 907F     		.sleb128 -112
 3680 0a32 1A       		.uleb128 0x1a
 3681 0a33 02       		.byte	0x2
 3682 0a34 90       		.byte	0x90
 3683 0a35 42       		.uleb128 0x42
 3684 0a36 03       		.byte	0x3
 3685 0a37 F5       		.byte	0xf5
 3686 0a38 50       		.uleb128 0x50
 3687 0a39 29       		.uleb128 0x29
 3688 0a3a 1A       		.uleb128 0x1a
 3689 0a3b 01       		.byte	0x1
 3690 0a3c 52       		.byte	0x52
 3691 0a3d 02       		.byte	0x2
 3692 0a3e 7A       		.byte	0x7a
 3693 0a3f 00       		.sleb128 0
 3694 0a40 00       		.byte	0
 3695 0a41 18       		.uleb128 0x18
 3696 0a42 EA050000 		.4byte	.LVL127
 3697 0a46 280E0000 		.4byte	0xe28
 3698 0a4a 18       		.uleb128 0x18
 3699 0a4b 0E070000 		.4byte	.LVL150
 3700 0a4f 280E0000 		.4byte	0xe28
 3701 0a53 18       		.uleb128 0x18
 3702 0a54 28070000 		.4byte	.LVL152
 3703 0a58 280E0000 		.4byte	0xe28
 3704 0a5c 18       		.uleb128 0x18
 3705 0a5d 3E070000 		.4byte	.LVL154
 3706 0a61 280E0000 		.4byte	0xe28
 3707 0a65 00       		.byte	0
 3708 0a66 24       		.uleb128 0x24
 3709 0a67 04       		.byte	0x4
 3710 0a68 05010000 		.4byte	0x105
 3711 0a6c 24       		.uleb128 0x24
 3712 0a6d 04       		.byte	0x4
 3713 0a6e C3010000 		.4byte	0x1c3
 3714 0a72 25       		.uleb128 0x25
 3715 0a73 E6020000 		.4byte	0x2e6
 3716 0a77 820A0000 		.4byte	0xa82
 3717 0a7b 26       		.uleb128 0x26
 3718 0a7c 820A0000 		.4byte	0xa82
 3719 0a80 01       		.byte	0x1
 3720 0a81 00       		.byte	0
 3721 0a82 02       		.uleb128 0x2
 3722 0a83 04       		.byte	0x4
 3723 0a84 07       		.byte	0x7
 3724 0a85 36040000 		.4byte	.LASF75
 3725 0a89 27       		.uleb128 0x27
 3726 0a8a 6F010000 		.4byte	.LASF103
 3727 0a8e 01       		.byte	0x1
 3728 0a8f 6C       		.byte	0x6c
 3729 0a90 0D       		.byte	0xd
 3730 0a91 01       		.byte	0x1
 3731 0a92 00000000 		.4byte	.LFB4
 3732 0a96 9E010000 		.4byte	.LFE4
 3733 0a9a B9080000 		.4byte	.LLST0
 3734 0a9e 01       		.byte	0x1
ARM GAS  /tmp/ccfh54Yn.s 			page 83


 3735 0a9f 9F0B0000 		.4byte	0xb9f
 3736 0aa3 28       		.uleb128 0x28
 3737 0aa4 6300     		.ascii	"c\000"
 3738 0aa6 01       		.byte	0x1
 3739 0aa7 6C       		.byte	0x6c
 3740 0aa8 33       		.byte	0x33
 3741 0aa9 9F0B0000 		.4byte	0xb9f
 3742 0aad 1B090000 		.4byte	.LLST1
 3743 0ab1 17090000 		.4byte	.LVUS1
 3744 0ab5 28       		.uleb128 0x28
 3745 0ab6 6800     		.ascii	"h\000"
 3746 0ab8 01       		.byte	0x1
 3747 0ab9 6C       		.byte	0x6c
 3748 0aba 45       		.byte	0x45
 3749 0abb 30000000 		.4byte	0x30
 3750 0abf 43090000 		.4byte	.LLST2
 3751 0ac3 39090000 		.4byte	.LVUS2
 3752 0ac7 29       		.uleb128 0x29
 3753 0ac8 706F7300 		.ascii	"pos\000"
 3754 0acc 01       		.byte	0x1
 3755 0acd 6C       		.byte	0x6c
 3756 0ace 54       		.byte	0x54
 3757 0acf 30000000 		.4byte	0x30
 3758 0ad3 03       		.byte	0x3
 3759 0ad4 91       		.byte	0x91
 3760 0ad5 A07F     		.sleb128 -96
 3761 0ad7 29       		.uleb128 0x29
 3762 0ad8 526F7400 		.ascii	"Rot\000"
 3763 0adc 01       		.byte	0x1
 3764 0add 6D       		.byte	0x6d
 3765 0ade 16       		.byte	0x16
 3766 0adf 5D000000 		.4byte	0x5d
 3767 0ae3 03       		.byte	0x3
 3768 0ae4 91       		.byte	0x91
 3769 0ae5 907F     		.sleb128 -112
 3770 0ae7 2A       		.uleb128 0x2a
 3771 0ae8 B0030000 		.4byte	.LASF14
 3772 0aec 01       		.byte	0x1
 3773 0aed 6D       		.byte	0x6d
 3774 0aee 27       		.byte	0x27
 3775 0aef 30000000 		.4byte	0x30
 3776 0af3 03       		.byte	0x3
 3777 0af4 91       		.byte	0x91
 3778 0af5 887F     		.sleb128 -120
 3779 0af7 10       		.uleb128 0x10
 3780 0af8 83010000 		.4byte	.LASF76
 3781 0afc 01       		.byte	0x1
 3782 0afd 71       		.byte	0x71
 3783 0afe 0F       		.byte	0xf
 3784 0aff 5D000000 		.4byte	0x5d
 3785 0b03 02       		.byte	0x2
 3786 0b04 91       		.byte	0x91
 3787 0b05 58       		.sleb128 -40
 3788 0b06 12       		.uleb128 0x12
 3789 0b07 6E00     		.ascii	"n\000"
 3790 0b09 01       		.byte	0x1
 3791 0b0a 72       		.byte	0x72
ARM GAS  /tmp/ccfh54Yn.s 			page 84


 3792 0b0b 0E       		.byte	0xe
 3793 0b0c 30000000 		.4byte	0x30
 3794 0b10 03       		.byte	0x3
 3795 0b11 91       		.byte	0x91
 3796 0b12 B07F     		.sleb128 -80
 3797 0b14 10       		.uleb128 0x10
 3798 0b15 1F040000 		.4byte	.LASF77
 3799 0b19 01       		.byte	0x1
 3800 0b1a 73       		.byte	0x73
 3801 0b1b 11       		.byte	0x11
 3802 0b1c 30000000 		.4byte	0x30
 3803 0b20 03       		.byte	0x3
 3804 0b21 91       		.byte	0x91
 3805 0b22 B87F     		.sleb128 -72
 3806 0b24 18       		.uleb128 0x18
 3807 0b25 4E000000 		.4byte	.LVL2
 3808 0b29 600E0000 		.4byte	0xe60
 3809 0b2d 18       		.uleb128 0x18
 3810 0b2e 5A000000 		.4byte	.LVL3
 3811 0b32 6E0E0000 		.4byte	0xe6e
 3812 0b36 18       		.uleb128 0x18
 3813 0b37 5E000000 		.4byte	.LVL4
 3814 0b3b 280E0000 		.4byte	0xe28
 3815 0b3f 18       		.uleb128 0x18
 3816 0b40 6A000000 		.4byte	.LVL5
 3817 0b44 980E0000 		.4byte	0xe98
 3818 0b48 23       		.uleb128 0x23
 3819 0b49 7C000000 		.4byte	.LVL6
 3820 0b4d B40E0000 		.4byte	0xeb4
 3821 0b51 610B0000 		.4byte	0xb61
 3822 0b55 1A       		.uleb128 0x1a
 3823 0b56 02       		.byte	0x2
 3824 0b57 90       		.byte	0x90
 3825 0b58 40       		.uleb128 0x40
 3826 0b59 06       		.byte	0x6
 3827 0b5a 91       		.byte	0x91
 3828 0b5b B07F     		.sleb128 -80
 3829 0b5d F6       		.byte	0xf6
 3830 0b5e 04       		.byte	0x4
 3831 0b5f 29       		.uleb128 0x29
 3832 0b60 00       		.byte	0
 3833 0b61 23       		.uleb128 0x23
 3834 0b62 B0000000 		.4byte	.LVL7
 3835 0b66 B40E0000 		.4byte	0xeb4
 3836 0b6a 7A0B0000 		.4byte	0xb7a
 3837 0b6e 1A       		.uleb128 0x1a
 3838 0b6f 02       		.byte	0x2
 3839 0b70 90       		.byte	0x90
 3840 0b71 40       		.uleb128 0x40
 3841 0b72 06       		.byte	0x6
 3842 0b73 91       		.byte	0x91
 3843 0b74 B47F     		.sleb128 -76
 3844 0b76 F6       		.byte	0xf6
 3845 0b77 04       		.byte	0x4
 3846 0b78 29       		.uleb128 0x29
 3847 0b79 00       		.byte	0
 3848 0b7a 18       		.uleb128 0x18
ARM GAS  /tmp/ccfh54Yn.s 			page 85


 3849 0b7b F6000000 		.4byte	.LVL9
 3850 0b7f 6E0E0000 		.4byte	0xe6e
 3851 0b83 18       		.uleb128 0x18
 3852 0b84 0A010000 		.4byte	.LVL10
 3853 0b88 C20E0000 		.4byte	0xec2
 3854 0b8c 18       		.uleb128 0x18
 3855 0b8d 2E010000 		.4byte	.LVL11
 3856 0b91 6E0E0000 		.4byte	0xe6e
 3857 0b95 18       		.uleb128 0x18
 3858 0b96 42010000 		.4byte	.LVL12
 3859 0b9a C20E0000 		.4byte	0xec2
 3860 0b9e 00       		.byte	0
 3861 0b9f 24       		.uleb128 0x24
 3862 0ba0 04       		.byte	0x4
 3863 0ba1 E6020000 		.4byte	0x2e6
 3864 0ba5 0D       		.uleb128 0xd
 3865 0ba6 01       		.byte	0x1
 3866 0ba7 C7010000 		.4byte	.LASF79
 3867 0bab 01       		.byte	0x1
 3868 0bac 46       		.byte	0x46
 3869 0bad 05       		.byte	0x5
 3870 0bae 01       		.byte	0x1
 3871 0baf FE000000 		.4byte	0xfe
 3872 0bb3 00000000 		.4byte	.LFB3
 3873 0bb7 1C010000 		.4byte	.LFE3
 3874 0bbb A1090000 		.4byte	.LLST11
 3875 0bbf 01       		.byte	0x1
 3876 0bc0 B80C0000 		.4byte	0xcb8
 3877 0bc4 0E       		.uleb128 0xe
 3878 0bc5 D2020000 		.4byte	.LASF80
 3879 0bc9 01       		.byte	0x1
 3880 0bca 46       		.byte	0x46
 3881 0bcb 29       		.byte	0x29
 3882 0bcc 9F0B0000 		.4byte	0xb9f
 3883 0bd0 270A0000 		.4byte	.LLST12
 3884 0bd4 210A0000 		.4byte	.LVUS12
 3885 0bd8 28       		.uleb128 0x28
 3886 0bd9 76496E00 		.ascii	"vIn\000"
 3887 0bdd 01       		.byte	0x1
 3888 0bde 46       		.byte	0x46
 3889 0bdf 44       		.byte	0x44
 3890 0be0 9F0B0000 		.4byte	0xb9f
 3891 0be4 570A0000 		.4byte	.LLST13
 3892 0be8 530A0000 		.4byte	.LVUS13
 3893 0bec 2A       		.uleb128 0x2a
 3894 0bed B0030000 		.4byte	.LASF14
 3895 0bf1 01       		.byte	0x1
 3896 0bf2 47       		.byte	0x47
 3897 0bf3 14       		.byte	0x14
 3898 0bf4 30000000 		.4byte	0x30
 3899 0bf8 02       		.byte	0x2
 3900 0bf9 91       		.byte	0x91
 3901 0bfa 48       		.sleb128 -56
 3902 0bfb 0E       		.uleb128 0xe
 3903 0bfc 61020000 		.4byte	.LASF81
 3904 0c00 01       		.byte	0x1
 3905 0c01 47       		.byte	0x47
ARM GAS  /tmp/ccfh54Yn.s 			page 86


 3906 0c02 22       		.byte	0x22
 3907 0c03 29000000 		.4byte	0x29
 3908 0c07 7B0A0000 		.4byte	.LLST14
 3909 0c0b 750A0000 		.4byte	.LVUS14
 3910 0c0f 0E       		.uleb128 0xe
 3911 0c10 2F000000 		.4byte	.LASF82
 3912 0c14 01       		.byte	0x1
 3913 0c15 47       		.byte	0x47
 3914 0c16 2F       		.byte	0x2f
 3915 0c17 D3000000 		.4byte	0xd3
 3916 0c1b AF0A0000 		.4byte	.LLST15
 3917 0c1f AB0A0000 		.4byte	.LVUS15
 3918 0c23 13       		.uleb128 0x13
 3919 0c24 6D020000 		.4byte	.LASF83
 3920 0c28 01       		.byte	0x1
 3921 0c29 4A       		.byte	0x4a
 3922 0c2a 06       		.byte	0x6
 3923 0c2b FE000000 		.4byte	0xfe
 3924 0c2f DE0A0000 		.4byte	.LLST16
 3925 0c33 D00A0000 		.4byte	.LVUS16
 3926 0c37 13       		.uleb128 0x13
 3927 0c38 56010000 		.4byte	.LASF84
 3928 0c3c 01       		.byte	0x1
 3929 0c3d 4D       		.byte	0x4d
 3930 0c3e 08       		.byte	0x8
 3931 0c3f 29000000 		.4byte	0x29
 3932 0c43 3E0B0000 		.4byte	.LLST17
 3933 0c47 380B0000 		.4byte	.LVUS17
 3934 0c4b 13       		.uleb128 0x13
 3935 0c4c 60010000 		.4byte	.LASF85
 3936 0c50 01       		.byte	0x1
 3937 0c51 4E       		.byte	0x4e
 3938 0c52 08       		.byte	0x8
 3939 0c53 29000000 		.4byte	0x29
 3940 0c57 6C0B0000 		.4byte	.LLST18
 3941 0c5b 6A0B0000 		.4byte	.LVUS18
 3942 0c5f 17       		.uleb128 0x17
 3943 0c60 30000000 		.4byte	.Ldebug_ranges0+0x30
 3944 0c64 A50C0000 		.4byte	0xca5
 3945 0c68 13       		.uleb128 0x13
 3946 0c69 49020000 		.4byte	.LASF86
 3947 0c6d 01       		.byte	0x1
 3948 0c6e 58       		.byte	0x58
 3949 0c6f 09       		.byte	0x9
 3950 0c70 29000000 		.4byte	0x29
 3951 0c74 820B0000 		.4byte	.LLST19
 3952 0c78 800B0000 		.4byte	.LVUS19
 3953 0c7c 18       		.uleb128 0x18
 3954 0c7d B6000000 		.4byte	.LVL37
 3955 0c81 440E0000 		.4byte	0xe44
 3956 0c85 23       		.uleb128 0x23
 3957 0c86 C6000000 		.4byte	.LVL38
 3958 0c8a 360E0000 		.4byte	0xe36
 3959 0c8e 9B0C0000 		.4byte	0xc9b
 3960 0c92 1A       		.uleb128 0x1a
 3961 0c93 02       		.byte	0x2
 3962 0c94 90       		.byte	0x90
ARM GAS  /tmp/ccfh54Yn.s 			page 87


 3963 0c95 40       		.uleb128 0x40
 3964 0c96 03       		.byte	0x3
 3965 0c97 F5       		.byte	0xf5
 3966 0c98 51       		.uleb128 0x51
 3967 0c99 29       		.uleb128 0x29
 3968 0c9a 00       		.byte	0
 3969 0c9b 18       		.uleb128 0x18
 3970 0c9c E2000000 		.4byte	.LVL40
 3971 0ca0 C20E0000 		.4byte	0xec2
 3972 0ca4 00       		.byte	0
 3973 0ca5 18       		.uleb128 0x18
 3974 0ca6 2C000000 		.4byte	.LVL25
 3975 0caa 1A0E0000 		.4byte	0xe1a
 3976 0cae 18       		.uleb128 0x18
 3977 0caf 48000000 		.4byte	.LVL27
 3978 0cb3 1A0E0000 		.4byte	0xe1a
 3979 0cb7 00       		.byte	0
 3980 0cb8 2B       		.uleb128 0x2b
 3981 0cb9 01       		.byte	0x1
 3982 0cba C5030000 		.4byte	.LASF87
 3983 0cbe 01       		.byte	0x1
 3984 0cbf 40       		.byte	0x40
 3985 0cc0 06       		.byte	0x6
 3986 0cc1 01       		.byte	0x1
 3987 0cc2 01       		.byte	0x1
 3988 0cc3 D30C0000 		.4byte	0xcd3
 3989 0cc7 2C       		.uleb128 0x2c
 3990 0cc8 667000   		.ascii	"fp\000"
 3991 0ccb 01       		.byte	0x1
 3992 0ccc 40       		.byte	0x40
 3993 0ccd 1E       		.byte	0x1e
 3994 0cce D30C0000 		.4byte	0xcd3
 3995 0cd2 00       		.byte	0
 3996 0cd3 24       		.uleb128 0x24
 3997 0cd4 04       		.byte	0x4
 3998 0cd5 DA000000 		.4byte	0xda
 3999 0cd9 2B       		.uleb128 0x2b
 4000 0cda 01       		.byte	0x1
 4001 0cdb B7030000 		.4byte	.LASF88
 4002 0cdf 01       		.byte	0x1
 4003 0ce0 39       		.byte	0x39
 4004 0ce1 06       		.byte	0x6
 4005 0ce2 01       		.byte	0x1
 4006 0ce3 01       		.byte	0x1
 4007 0ce4 090D0000 		.4byte	0xd09
 4008 0ce8 2C       		.uleb128 0x2c
 4009 0ce9 6100     		.ascii	"a\000"
 4010 0ceb 01       		.byte	0x1
 4011 0cec 39       		.byte	0x39
 4012 0ced 11       		.byte	0x11
 4013 0cee 090D0000 		.4byte	0xd09
 4014 0cf2 2C       		.uleb128 0x2c
 4015 0cf3 6200     		.ascii	"b\000"
 4016 0cf5 01       		.byte	0x1
 4017 0cf6 39       		.byte	0x39
 4018 0cf7 1A       		.byte	0x1a
 4019 0cf8 090D0000 		.4byte	0xd09
ARM GAS  /tmp/ccfh54Yn.s 			page 88


 4020 0cfc 11       		.uleb128 0x11
 4021 0cfd 746D7000 		.ascii	"tmp\000"
 4022 0d01 01       		.byte	0x1
 4023 0d02 3B       		.byte	0x3b
 4024 0d03 07       		.byte	0x7
 4025 0d04 D3000000 		.4byte	0xd3
 4026 0d08 00       		.byte	0
 4027 0d09 24       		.uleb128 0x24
 4028 0d0a 04       		.byte	0x4
 4029 0d0b D3000000 		.4byte	0xd3
 4030 0d0f 2B       		.uleb128 0x2b
 4031 0d10 01       		.byte	0x1
 4032 0d11 21030000 		.4byte	.LASF89
 4033 0d15 01       		.byte	0x1
 4034 0d16 34       		.byte	0x34
 4035 0d17 06       		.byte	0x6
 4036 0d18 01       		.byte	0x1
 4037 0d19 01       		.byte	0x1
 4038 0d1a 2A0D0000 		.4byte	0xd2a
 4039 0d1e 2C       		.uleb128 0x2c
 4040 0d1f 637600   		.ascii	"cv\000"
 4041 0d22 01       		.byte	0x1
 4042 0d23 34       		.byte	0x34
 4043 0d24 28       		.byte	0x28
 4044 0d25 9F0B0000 		.4byte	0xb9f
 4045 0d29 00       		.byte	0
 4046 0d2a 2D       		.uleb128 0x2d
 4047 0d2b 0F0D0000 		.4byte	0xd0f
 4048 0d2f 00000000 		.4byte	.LFB0
 4049 0d33 06000000 		.4byte	.LFE0
 4050 0d37 02       		.byte	0x2
 4051 0d38 7D       		.byte	0x7d
 4052 0d39 00       		.sleb128 0
 4053 0d3a 01       		.byte	0x1
 4054 0d3b 470D0000 		.4byte	0xd47
 4055 0d3f 2E       		.uleb128 0x2e
 4056 0d40 1E0D0000 		.4byte	0xd1e
 4057 0d44 01       		.byte	0x1
 4058 0d45 50       		.byte	0x50
 4059 0d46 00       		.byte	0
 4060 0d47 2D       		.uleb128 0x2d
 4061 0d48 D90C0000 		.4byte	0xcd9
 4062 0d4c 00000000 		.4byte	.LFB1
 4063 0d50 0A000000 		.4byte	.LFE1
 4064 0d54 02       		.byte	0x2
 4065 0d55 7D       		.byte	0x7d
 4066 0d56 00       		.sleb128 0
 4067 0d57 01       		.byte	0x1
 4068 0d58 780D0000 		.4byte	0xd78
 4069 0d5c 2E       		.uleb128 0x2e
 4070 0d5d E80C0000 		.4byte	0xce8
 4071 0d61 01       		.byte	0x1
 4072 0d62 50       		.byte	0x50
 4073 0d63 2E       		.uleb128 0x2e
 4074 0d64 F20C0000 		.4byte	0xcf2
 4075 0d68 01       		.byte	0x1
 4076 0d69 51       		.byte	0x51
ARM GAS  /tmp/ccfh54Yn.s 			page 89


 4077 0d6a 20       		.uleb128 0x20
 4078 0d6b FC0C0000 		.4byte	0xcfc
 4079 0d6f 980B0000 		.4byte	.LLST3
 4080 0d73 960B0000 		.4byte	.LVUS3
 4081 0d77 00       		.byte	0
 4082 0d78 2F       		.uleb128 0x2f
 4083 0d79 B80C0000 		.4byte	0xcb8
 4084 0d7d 00000000 		.4byte	.LFB2
 4085 0d81 18000000 		.4byte	.LFE2
 4086 0d85 AB0B0000 		.4byte	.LLST4
 4087 0d89 01       		.byte	0x1
 4088 0d8a 1A0E0000 		.4byte	0xe1a
 4089 0d8e 2E       		.uleb128 0x2e
 4090 0d8f C70C0000 		.4byte	0xcc7
 4091 0d93 01       		.byte	0x1
 4092 0d94 50       		.byte	0x50
 4093 0d95 1F       		.uleb128 0x1f
 4094 0d96 D90C0000 		.4byte	0xcd9
 4095 0d9a 00000000 		.4byte	.LBI30
 4096 0d9e 0200     		.2byte	.LVU113
 4097 0da0 00000000 		.4byte	.Ldebug_ranges0+0
 4098 0da4 01       		.byte	0x1
 4099 0da5 42       		.byte	0x42
 4100 0da6 02       		.byte	0x2
 4101 0da7 D90D0000 		.4byte	0xdd9
 4102 0dab 1E       		.uleb128 0x1e
 4103 0dac F20C0000 		.4byte	0xcf2
 4104 0db0 D90B0000 		.4byte	.LLST5
 4105 0db4 D70B0000 		.4byte	.LVUS5
 4106 0db8 1E       		.uleb128 0x1e
 4107 0db9 E80C0000 		.4byte	0xce8
 4108 0dbd F00B0000 		.4byte	.LLST6
 4109 0dc1 EE0B0000 		.4byte	.LVUS6
 4110 0dc5 1C       		.uleb128 0x1c
 4111 0dc6 00000000 		.4byte	.Ldebug_ranges0+0
 4112 0dca 20       		.uleb128 0x20
 4113 0dcb FC0C0000 		.4byte	0xcfc
 4114 0dcf 050C0000 		.4byte	.LLST7
 4115 0dd3 030C0000 		.4byte	.LVUS7
 4116 0dd7 00       		.byte	0
 4117 0dd8 00       		.byte	0
 4118 0dd9 21       		.uleb128 0x21
 4119 0dda D90C0000 		.4byte	0xcd9
 4120 0dde 12000000 		.4byte	.LBI33
 4121 0de2 0300     		.2byte	.LVU128
 4122 0de4 18000000 		.4byte	.Ldebug_ranges0+0x18
 4123 0de8 01       		.byte	0x1
 4124 0de9 43       		.byte	0x43
 4125 0dea 02       		.byte	0x2
 4126 0deb 1E       		.uleb128 0x1e
 4127 0dec F20C0000 		.4byte	0xcf2
 4128 0df0 1A0C0000 		.4byte	.LLST8
 4129 0df4 180C0000 		.4byte	.LVUS8
 4130 0df8 1E       		.uleb128 0x1e
 4131 0df9 E80C0000 		.4byte	0xce8
 4132 0dfd 310C0000 		.4byte	.LLST9
 4133 0e01 2F0C0000 		.4byte	.LVUS9
ARM GAS  /tmp/ccfh54Yn.s 			page 90


 4134 0e05 1C       		.uleb128 0x1c
 4135 0e06 18000000 		.4byte	.Ldebug_ranges0+0x18
 4136 0e0a 20       		.uleb128 0x20
 4137 0e0b FC0C0000 		.4byte	0xcfc
 4138 0e0f 480C0000 		.4byte	.LLST10
 4139 0e13 460C0000 		.4byte	.LVUS10
 4140 0e17 00       		.byte	0
 4141 0e18 00       		.byte	0
 4142 0e19 00       		.byte	0
 4143 0e1a 30       		.uleb128 0x30
 4144 0e1b 01       		.byte	0x1
 4145 0e1c 01       		.byte	0x1
 4146 0e1d 446F7400 		.ascii	"Dot\000"
 4147 0e21 446F7400 		.ascii	"Dot\000"
 4148 0e25 02       		.byte	0x2
 4149 0e26 2A       		.byte	0x2a
 4150 0e27 07       		.byte	0x7
 4151 0e28 31       		.uleb128 0x31
 4152 0e29 01       		.byte	0x1
 4153 0e2a 01       		.byte	0x1
 4154 0e2b 17030000 		.4byte	.LASF90
 4155 0e2f 17030000 		.4byte	.LASF90
 4156 0e33 02       		.byte	0x2
 4157 0e34 25       		.byte	0x25
 4158 0e35 0D       		.byte	0xd
 4159 0e36 31       		.uleb128 0x31
 4160 0e37 01       		.byte	0x1
 4161 0e38 01       		.byte	0x1
 4162 0e39 EA030000 		.4byte	.LASF91
 4163 0e3d EA030000 		.4byte	.LASF91
 4164 0e41 02       		.byte	0x2
 4165 0e42 24       		.byte	0x24
 4166 0e43 0D       		.byte	0xd
 4167 0e44 31       		.uleb128 0x31
 4168 0e45 01       		.byte	0x1
 4169 0e46 01       		.byte	0x1
 4170 0e47 BC030000 		.4byte	.LASF92
 4171 0e4b BC030000 		.4byte	.LASF92
 4172 0e4f 02       		.byte	0x2
 4173 0e50 27       		.byte	0x27
 4174 0e51 0D       		.byte	0xd
 4175 0e52 31       		.uleb128 0x31
 4176 0e53 01       		.byte	0x1
 4177 0e54 01       		.byte	0x1
 4178 0e55 3F020000 		.4byte	.LASF93
 4179 0e59 3F020000 		.4byte	.LASF93
 4180 0e5d 02       		.byte	0x2
 4181 0e5e 1D       		.byte	0x1d
 4182 0e5f 06       		.byte	0x6
 4183 0e60 31       		.uleb128 0x31
 4184 0e61 01       		.byte	0x1
 4185 0e62 01       		.byte	0x1
 4186 0e63 BD010000 		.4byte	.LASF94
 4187 0e67 BD010000 		.4byte	.LASF94
 4188 0e6b 02       		.byte	0x2
 4189 0e6c 1C       		.byte	0x1c
 4190 0e6d 0E       		.byte	0xe
ARM GAS  /tmp/ccfh54Yn.s 			page 91


 4191 0e6e 31       		.uleb128 0x31
 4192 0e6f 01       		.byte	0x1
 4193 0e70 01       		.byte	0x1
 4194 0e71 8F030000 		.4byte	.LASF95
 4195 0e75 8F030000 		.4byte	.LASF95
 4196 0e79 02       		.byte	0x2
 4197 0e7a 1E       		.byte	0x1e
 4198 0e7b 0D       		.byte	0xd
 4199 0e7c 31       		.uleb128 0x31
 4200 0e7d 01       		.byte	0x1
 4201 0e7e 01       		.byte	0x1
 4202 0e7f 9B030000 		.4byte	.LASF96
 4203 0e83 9B030000 		.4byte	.LASF96
 4204 0e87 02       		.byte	0x2
 4205 0e88 1F       		.byte	0x1f
 4206 0e89 0E       		.byte	0xe
 4207 0e8a 31       		.uleb128 0x31
 4208 0e8b 01       		.byte	0x1
 4209 0e8c 01       		.byte	0x1
 4210 0e8d 68020000 		.4byte	.LASF97
 4211 0e91 68020000 		.4byte	.LASF97
 4212 0e95 02       		.byte	0x2
 4213 0e96 32       		.byte	0x32
 4214 0e97 0E       		.byte	0xe
 4215 0e98 31       		.uleb128 0x31
 4216 0e99 01       		.byte	0x1
 4217 0e9a 01       		.byte	0x1
 4218 0e9b 3A020000 		.4byte	.LASF98
 4219 0e9f 3A020000 		.4byte	.LASF98
 4220 0ea3 02       		.byte	0x2
 4221 0ea4 31       		.byte	0x31
 4222 0ea5 0D       		.byte	0xd
 4223 0ea6 31       		.uleb128 0x31
 4224 0ea7 01       		.byte	0x1
 4225 0ea8 01       		.byte	0x1
 4226 0ea9 57030000 		.4byte	.LASF99
 4227 0ead 57030000 		.4byte	.LASF99
 4228 0eb1 02       		.byte	0x2
 4229 0eb2 22       		.byte	0x22
 4230 0eb3 06       		.byte	0x6
 4231 0eb4 31       		.uleb128 0x31
 4232 0eb5 01       		.byte	0x1
 4233 0eb6 01       		.byte	0x1
 4234 0eb7 9D010000 		.4byte	.LASF100
 4235 0ebb 9D010000 		.4byte	.LASF100
 4236 0ebf 02       		.byte	0x2
 4237 0ec0 34       		.byte	0x34
 4238 0ec1 07       		.byte	0x7
 4239 0ec2 31       		.uleb128 0x31
 4240 0ec3 01       		.byte	0x1
 4241 0ec4 01       		.byte	0x1
 4242 0ec5 16020000 		.4byte	.LASF101
 4243 0ec9 16020000 		.4byte	.LASF101
 4244 0ecd 02       		.byte	0x2
 4245 0ece 26       		.byte	0x26
 4246 0ecf 0D       		.byte	0xd
 4247 0ed0 00       		.byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 92


 4248              		.section	.debug_abbrev,"",%progbits
 4249              	.Ldebug_abbrev0:
 4250 0000 01       		.uleb128 0x1
 4251 0001 11       		.uleb128 0x11
 4252 0002 01       		.byte	0x1
 4253 0003 25       		.uleb128 0x25
 4254 0004 0E       		.uleb128 0xe
 4255 0005 13       		.uleb128 0x13
 4256 0006 0B       		.uleb128 0xb
 4257 0007 03       		.uleb128 0x3
 4258 0008 0E       		.uleb128 0xe
 4259 0009 1B       		.uleb128 0x1b
 4260 000a 0E       		.uleb128 0xe
 4261 000b 55       		.uleb128 0x55
 4262 000c 06       		.uleb128 0x6
 4263 000d 11       		.uleb128 0x11
 4264 000e 01       		.uleb128 0x1
 4265 000f 52       		.uleb128 0x52
 4266 0010 01       		.uleb128 0x1
 4267 0011 10       		.uleb128 0x10
 4268 0012 06       		.uleb128 0x6
 4269 0013 00       		.byte	0
 4270 0014 00       		.byte	0
 4271 0015 02       		.uleb128 0x2
 4272 0016 24       		.uleb128 0x24
 4273 0017 00       		.byte	0
 4274 0018 0B       		.uleb128 0xb
 4275 0019 0B       		.uleb128 0xb
 4276 001a 3E       		.uleb128 0x3e
 4277 001b 0B       		.uleb128 0xb
 4278 001c 03       		.uleb128 0x3
 4279 001d 0E       		.uleb128 0xe
 4280 001e 00       		.byte	0
 4281 001f 00       		.byte	0
 4282 0020 03       		.uleb128 0x3
 4283 0021 13       		.uleb128 0x13
 4284 0022 01       		.byte	0x1
 4285 0023 03       		.uleb128 0x3
 4286 0024 0E       		.uleb128 0xe
 4287 0025 0B       		.uleb128 0xb
 4288 0026 0B       		.uleb128 0xb
 4289 0027 3A       		.uleb128 0x3a
 4290 0028 0B       		.uleb128 0xb
 4291 0029 3B       		.uleb128 0x3b
 4292 002a 0B       		.uleb128 0xb
 4293 002b 39       		.uleb128 0x39
 4294 002c 0B       		.uleb128 0xb
 4295 002d 01       		.uleb128 0x1
 4296 002e 13       		.uleb128 0x13
 4297 002f 00       		.byte	0
 4298 0030 00       		.byte	0
 4299 0031 04       		.uleb128 0x4
 4300 0032 0D       		.uleb128 0xd
 4301 0033 00       		.byte	0
 4302 0034 03       		.uleb128 0x3
 4303 0035 08       		.uleb128 0x8
 4304 0036 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccfh54Yn.s 			page 93


 4305 0037 0B       		.uleb128 0xb
 4306 0038 3B       		.uleb128 0x3b
 4307 0039 0B       		.uleb128 0xb
 4308 003a 39       		.uleb128 0x39
 4309 003b 0B       		.uleb128 0xb
 4310 003c 49       		.uleb128 0x49
 4311 003d 13       		.uleb128 0x13
 4312 003e 38       		.uleb128 0x38
 4313 003f 0A       		.uleb128 0xa
 4314 0040 00       		.byte	0
 4315 0041 00       		.byte	0
 4316 0042 05       		.uleb128 0x5
 4317 0043 26       		.uleb128 0x26
 4318 0044 00       		.byte	0
 4319 0045 49       		.uleb128 0x49
 4320 0046 13       		.uleb128 0x13
 4321 0047 00       		.byte	0
 4322 0048 00       		.byte	0
 4323 0049 06       		.uleb128 0x6
 4324 004a 0D       		.uleb128 0xd
 4325 004b 00       		.byte	0
 4326 004c 03       		.uleb128 0x3
 4327 004d 0E       		.uleb128 0xe
 4328 004e 3A       		.uleb128 0x3a
 4329 004f 0B       		.uleb128 0xb
 4330 0050 3B       		.uleb128 0x3b
 4331 0051 0B       		.uleb128 0xb
 4332 0052 39       		.uleb128 0x39
 4333 0053 0B       		.uleb128 0xb
 4334 0054 49       		.uleb128 0x49
 4335 0055 13       		.uleb128 0x13
 4336 0056 38       		.uleb128 0x38
 4337 0057 0A       		.uleb128 0xa
 4338 0058 00       		.byte	0
 4339 0059 00       		.byte	0
 4340 005a 07       		.uleb128 0x7
 4341 005b 17       		.uleb128 0x17
 4342 005c 01       		.byte	0x1
 4343 005d 03       		.uleb128 0x3
 4344 005e 0E       		.uleb128 0xe
 4345 005f 0B       		.uleb128 0xb
 4346 0060 0B       		.uleb128 0xb
 4347 0061 3A       		.uleb128 0x3a
 4348 0062 0B       		.uleb128 0xb
 4349 0063 3B       		.uleb128 0x3b
 4350 0064 0B       		.uleb128 0xb
 4351 0065 39       		.uleb128 0x39
 4352 0066 0B       		.uleb128 0xb
 4353 0067 01       		.uleb128 0x1
 4354 0068 13       		.uleb128 0x13
 4355 0069 00       		.byte	0
 4356 006a 00       		.byte	0
 4357 006b 08       		.uleb128 0x8
 4358 006c 0D       		.uleb128 0xd
 4359 006d 00       		.byte	0
 4360 006e 03       		.uleb128 0x3
 4361 006f 08       		.uleb128 0x8
ARM GAS  /tmp/ccfh54Yn.s 			page 94


 4362 0070 3A       		.uleb128 0x3a
 4363 0071 0B       		.uleb128 0xb
 4364 0072 3B       		.uleb128 0x3b
 4365 0073 0B       		.uleb128 0xb
 4366 0074 39       		.uleb128 0x39
 4367 0075 0B       		.uleb128 0xb
 4368 0076 49       		.uleb128 0x49
 4369 0077 13       		.uleb128 0x13
 4370 0078 00       		.byte	0
 4371 0079 00       		.byte	0
 4372 007a 09       		.uleb128 0x9
 4373 007b 0D       		.uleb128 0xd
 4374 007c 00       		.byte	0
 4375 007d 03       		.uleb128 0x3
 4376 007e 0E       		.uleb128 0xe
 4377 007f 3A       		.uleb128 0x3a
 4378 0080 0B       		.uleb128 0xb
 4379 0081 3B       		.uleb128 0x3b
 4380 0082 0B       		.uleb128 0xb
 4381 0083 39       		.uleb128 0x39
 4382 0084 0B       		.uleb128 0xb
 4383 0085 49       		.uleb128 0x49
 4384 0086 13       		.uleb128 0x13
 4385 0087 00       		.byte	0
 4386 0088 00       		.byte	0
 4387 0089 0A       		.uleb128 0xa
 4388 008a 24       		.uleb128 0x24
 4389 008b 00       		.byte	0
 4390 008c 0B       		.uleb128 0xb
 4391 008d 0B       		.uleb128 0xb
 4392 008e 3E       		.uleb128 0x3e
 4393 008f 0B       		.uleb128 0xb
 4394 0090 03       		.uleb128 0x3
 4395 0091 08       		.uleb128 0x8
 4396 0092 00       		.byte	0
 4397 0093 00       		.byte	0
 4398 0094 0B       		.uleb128 0xb
 4399 0095 04       		.uleb128 0x4
 4400 0096 01       		.byte	0x1
 4401 0097 03       		.uleb128 0x3
 4402 0098 0E       		.uleb128 0xe
 4403 0099 3E       		.uleb128 0x3e
 4404 009a 0B       		.uleb128 0xb
 4405 009b 0B       		.uleb128 0xb
 4406 009c 0B       		.uleb128 0xb
 4407 009d 49       		.uleb128 0x49
 4408 009e 13       		.uleb128 0x13
 4409 009f 3A       		.uleb128 0x3a
 4410 00a0 0B       		.uleb128 0xb
 4411 00a1 3B       		.uleb128 0x3b
 4412 00a2 0B       		.uleb128 0xb
 4413 00a3 39       		.uleb128 0x39
 4414 00a4 0B       		.uleb128 0xb
 4415 00a5 01       		.uleb128 0x1
 4416 00a6 13       		.uleb128 0x13
 4417 00a7 00       		.byte	0
 4418 00a8 00       		.byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 95


 4419 00a9 0C       		.uleb128 0xc
 4420 00aa 28       		.uleb128 0x28
 4421 00ab 00       		.byte	0
 4422 00ac 03       		.uleb128 0x3
 4423 00ad 0E       		.uleb128 0xe
 4424 00ae 1C       		.uleb128 0x1c
 4425 00af 0B       		.uleb128 0xb
 4426 00b0 00       		.byte	0
 4427 00b1 00       		.byte	0
 4428 00b2 0D       		.uleb128 0xd
 4429 00b3 2E       		.uleb128 0x2e
 4430 00b4 01       		.byte	0x1
 4431 00b5 3F       		.uleb128 0x3f
 4432 00b6 0C       		.uleb128 0xc
 4433 00b7 03       		.uleb128 0x3
 4434 00b8 0E       		.uleb128 0xe
 4435 00b9 3A       		.uleb128 0x3a
 4436 00ba 0B       		.uleb128 0xb
 4437 00bb 3B       		.uleb128 0x3b
 4438 00bc 0B       		.uleb128 0xb
 4439 00bd 39       		.uleb128 0x39
 4440 00be 0B       		.uleb128 0xb
 4441 00bf 27       		.uleb128 0x27
 4442 00c0 0C       		.uleb128 0xc
 4443 00c1 49       		.uleb128 0x49
 4444 00c2 13       		.uleb128 0x13
 4445 00c3 11       		.uleb128 0x11
 4446 00c4 01       		.uleb128 0x1
 4447 00c5 12       		.uleb128 0x12
 4448 00c6 01       		.uleb128 0x1
 4449 00c7 40       		.uleb128 0x40
 4450 00c8 06       		.uleb128 0x6
 4451 00c9 9742     		.uleb128 0x2117
 4452 00cb 0C       		.uleb128 0xc
 4453 00cc 01       		.uleb128 0x1
 4454 00cd 13       		.uleb128 0x13
 4455 00ce 00       		.byte	0
 4456 00cf 00       		.byte	0
 4457 00d0 0E       		.uleb128 0xe
 4458 00d1 05       		.uleb128 0x5
 4459 00d2 00       		.byte	0
 4460 00d3 03       		.uleb128 0x3
 4461 00d4 0E       		.uleb128 0xe
 4462 00d5 3A       		.uleb128 0x3a
 4463 00d6 0B       		.uleb128 0xb
 4464 00d7 3B       		.uleb128 0x3b
 4465 00d8 0B       		.uleb128 0xb
 4466 00d9 39       		.uleb128 0x39
 4467 00da 0B       		.uleb128 0xb
 4468 00db 49       		.uleb128 0x49
 4469 00dc 13       		.uleb128 0x13
 4470 00dd 02       		.uleb128 0x2
 4471 00de 06       		.uleb128 0x6
 4472 00df B742     		.uleb128 0x2137
 4473 00e1 06       		.uleb128 0x6
 4474 00e2 00       		.byte	0
 4475 00e3 00       		.byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 96


 4476 00e4 0F       		.uleb128 0xf
 4477 00e5 34       		.uleb128 0x34
 4478 00e6 00       		.byte	0
 4479 00e7 03       		.uleb128 0x3
 4480 00e8 08       		.uleb128 0x8
 4481 00e9 3A       		.uleb128 0x3a
 4482 00ea 0B       		.uleb128 0xb
 4483 00eb 3B       		.uleb128 0x3b
 4484 00ec 0B       		.uleb128 0xb
 4485 00ed 39       		.uleb128 0x39
 4486 00ee 0B       		.uleb128 0xb
 4487 00ef 49       		.uleb128 0x49
 4488 00f0 13       		.uleb128 0x13
 4489 00f1 02       		.uleb128 0x2
 4490 00f2 06       		.uleb128 0x6
 4491 00f3 B742     		.uleb128 0x2137
 4492 00f5 06       		.uleb128 0x6
 4493 00f6 00       		.byte	0
 4494 00f7 00       		.byte	0
 4495 00f8 10       		.uleb128 0x10
 4496 00f9 34       		.uleb128 0x34
 4497 00fa 00       		.byte	0
 4498 00fb 03       		.uleb128 0x3
 4499 00fc 0E       		.uleb128 0xe
 4500 00fd 3A       		.uleb128 0x3a
 4501 00fe 0B       		.uleb128 0xb
 4502 00ff 3B       		.uleb128 0x3b
 4503 0100 0B       		.uleb128 0xb
 4504 0101 39       		.uleb128 0x39
 4505 0102 0B       		.uleb128 0xb
 4506 0103 49       		.uleb128 0x49
 4507 0104 13       		.uleb128 0x13
 4508 0105 02       		.uleb128 0x2
 4509 0106 0A       		.uleb128 0xa
 4510 0107 00       		.byte	0
 4511 0108 00       		.byte	0
 4512 0109 11       		.uleb128 0x11
 4513 010a 34       		.uleb128 0x34
 4514 010b 00       		.byte	0
 4515 010c 03       		.uleb128 0x3
 4516 010d 08       		.uleb128 0x8
 4517 010e 3A       		.uleb128 0x3a
 4518 010f 0B       		.uleb128 0xb
 4519 0110 3B       		.uleb128 0x3b
 4520 0111 0B       		.uleb128 0xb
 4521 0112 39       		.uleb128 0x39
 4522 0113 0B       		.uleb128 0xb
 4523 0114 49       		.uleb128 0x49
 4524 0115 13       		.uleb128 0x13
 4525 0116 00       		.byte	0
 4526 0117 00       		.byte	0
 4527 0118 12       		.uleb128 0x12
 4528 0119 34       		.uleb128 0x34
 4529 011a 00       		.byte	0
 4530 011b 03       		.uleb128 0x3
 4531 011c 08       		.uleb128 0x8
 4532 011d 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccfh54Yn.s 			page 97


 4533 011e 0B       		.uleb128 0xb
 4534 011f 3B       		.uleb128 0x3b
 4535 0120 0B       		.uleb128 0xb
 4536 0121 39       		.uleb128 0x39
 4537 0122 0B       		.uleb128 0xb
 4538 0123 49       		.uleb128 0x49
 4539 0124 13       		.uleb128 0x13
 4540 0125 02       		.uleb128 0x2
 4541 0126 0A       		.uleb128 0xa
 4542 0127 00       		.byte	0
 4543 0128 00       		.byte	0
 4544 0129 13       		.uleb128 0x13
 4545 012a 34       		.uleb128 0x34
 4546 012b 00       		.byte	0
 4547 012c 03       		.uleb128 0x3
 4548 012d 0E       		.uleb128 0xe
 4549 012e 3A       		.uleb128 0x3a
 4550 012f 0B       		.uleb128 0xb
 4551 0130 3B       		.uleb128 0x3b
 4552 0131 0B       		.uleb128 0xb
 4553 0132 39       		.uleb128 0x39
 4554 0133 0B       		.uleb128 0xb
 4555 0134 49       		.uleb128 0x49
 4556 0135 13       		.uleb128 0x13
 4557 0136 02       		.uleb128 0x2
 4558 0137 06       		.uleb128 0x6
 4559 0138 B742     		.uleb128 0x2137
 4560 013a 06       		.uleb128 0x6
 4561 013b 00       		.byte	0
 4562 013c 00       		.byte	0
 4563 013d 14       		.uleb128 0x14
 4564 013e 34       		.uleb128 0x34
 4565 013f 00       		.byte	0
 4566 0140 03       		.uleb128 0x3
 4567 0141 0E       		.uleb128 0xe
 4568 0142 3A       		.uleb128 0x3a
 4569 0143 0B       		.uleb128 0xb
 4570 0144 3B       		.uleb128 0x3b
 4571 0145 05       		.uleb128 0x5
 4572 0146 39       		.uleb128 0x39
 4573 0147 0B       		.uleb128 0xb
 4574 0148 49       		.uleb128 0x49
 4575 0149 13       		.uleb128 0x13
 4576 014a 02       		.uleb128 0x2
 4577 014b 0A       		.uleb128 0xa
 4578 014c 00       		.byte	0
 4579 014d 00       		.byte	0
 4580 014e 15       		.uleb128 0x15
 4581 014f 34       		.uleb128 0x34
 4582 0150 00       		.byte	0
 4583 0151 03       		.uleb128 0x3
 4584 0152 0E       		.uleb128 0xe
 4585 0153 3A       		.uleb128 0x3a
 4586 0154 0B       		.uleb128 0xb
 4587 0155 3B       		.uleb128 0x3b
 4588 0156 05       		.uleb128 0x5
 4589 0157 39       		.uleb128 0x39
ARM GAS  /tmp/ccfh54Yn.s 			page 98


 4590 0158 0B       		.uleb128 0xb
 4591 0159 49       		.uleb128 0x49
 4592 015a 13       		.uleb128 0x13
 4593 015b 02       		.uleb128 0x2
 4594 015c 06       		.uleb128 0x6
 4595 015d B742     		.uleb128 0x2137
 4596 015f 06       		.uleb128 0x6
 4597 0160 00       		.byte	0
 4598 0161 00       		.byte	0
 4599 0162 16       		.uleb128 0x16
 4600 0163 34       		.uleb128 0x34
 4601 0164 00       		.byte	0
 4602 0165 03       		.uleb128 0x3
 4603 0166 08       		.uleb128 0x8
 4604 0167 3A       		.uleb128 0x3a
 4605 0168 0B       		.uleb128 0xb
 4606 0169 3B       		.uleb128 0x3b
 4607 016a 05       		.uleb128 0x5
 4608 016b 39       		.uleb128 0x39
 4609 016c 0B       		.uleb128 0xb
 4610 016d 49       		.uleb128 0x49
 4611 016e 13       		.uleb128 0x13
 4612 016f 02       		.uleb128 0x2
 4613 0170 06       		.uleb128 0x6
 4614 0171 B742     		.uleb128 0x2137
 4615 0173 06       		.uleb128 0x6
 4616 0174 00       		.byte	0
 4617 0175 00       		.byte	0
 4618 0176 17       		.uleb128 0x17
 4619 0177 0B       		.uleb128 0xb
 4620 0178 01       		.byte	0x1
 4621 0179 55       		.uleb128 0x55
 4622 017a 06       		.uleb128 0x6
 4623 017b 01       		.uleb128 0x1
 4624 017c 13       		.uleb128 0x13
 4625 017d 00       		.byte	0
 4626 017e 00       		.byte	0
 4627 017f 18       		.uleb128 0x18
 4628 0180 898201   		.uleb128 0x4109
 4629 0183 00       		.byte	0
 4630 0184 11       		.uleb128 0x11
 4631 0185 01       		.uleb128 0x1
 4632 0186 31       		.uleb128 0x31
 4633 0187 13       		.uleb128 0x13
 4634 0188 00       		.byte	0
 4635 0189 00       		.byte	0
 4636 018a 19       		.uleb128 0x19
 4637 018b 898201   		.uleb128 0x4109
 4638 018e 01       		.byte	0x1
 4639 018f 11       		.uleb128 0x11
 4640 0190 01       		.uleb128 0x1
 4641 0191 31       		.uleb128 0x31
 4642 0192 13       		.uleb128 0x13
 4643 0193 00       		.byte	0
 4644 0194 00       		.byte	0
 4645 0195 1A       		.uleb128 0x1a
 4646 0196 8A8201   		.uleb128 0x410a
ARM GAS  /tmp/ccfh54Yn.s 			page 99


 4647 0199 00       		.byte	0
 4648 019a 02       		.uleb128 0x2
 4649 019b 0A       		.uleb128 0xa
 4650 019c 9142     		.uleb128 0x2111
 4651 019e 0A       		.uleb128 0xa
 4652 019f 00       		.byte	0
 4653 01a0 00       		.byte	0
 4654 01a1 1B       		.uleb128 0x1b
 4655 01a2 0B       		.uleb128 0xb
 4656 01a3 01       		.byte	0x1
 4657 01a4 11       		.uleb128 0x11
 4658 01a5 01       		.uleb128 0x1
 4659 01a6 12       		.uleb128 0x12
 4660 01a7 01       		.uleb128 0x1
 4661 01a8 01       		.uleb128 0x1
 4662 01a9 13       		.uleb128 0x13
 4663 01aa 00       		.byte	0
 4664 01ab 00       		.byte	0
 4665 01ac 1C       		.uleb128 0x1c
 4666 01ad 0B       		.uleb128 0xb
 4667 01ae 01       		.byte	0x1
 4668 01af 55       		.uleb128 0x55
 4669 01b0 06       		.uleb128 0x6
 4670 01b1 00       		.byte	0
 4671 01b2 00       		.byte	0
 4672 01b3 1D       		.uleb128 0x1d
 4673 01b4 1D       		.uleb128 0x1d
 4674 01b5 01       		.byte	0x1
 4675 01b6 31       		.uleb128 0x31
 4676 01b7 13       		.uleb128 0x13
 4677 01b8 52       		.uleb128 0x52
 4678 01b9 01       		.uleb128 0x1
 4679 01ba B842     		.uleb128 0x2138
 4680 01bc 05       		.uleb128 0x5
 4681 01bd 55       		.uleb128 0x55
 4682 01be 06       		.uleb128 0x6
 4683 01bf 58       		.uleb128 0x58
 4684 01c0 0B       		.uleb128 0xb
 4685 01c1 59       		.uleb128 0x59
 4686 01c2 05       		.uleb128 0x5
 4687 01c3 57       		.uleb128 0x57
 4688 01c4 0B       		.uleb128 0xb
 4689 01c5 01       		.uleb128 0x1
 4690 01c6 13       		.uleb128 0x13
 4691 01c7 00       		.byte	0
 4692 01c8 00       		.byte	0
 4693 01c9 1E       		.uleb128 0x1e
 4694 01ca 05       		.uleb128 0x5
 4695 01cb 00       		.byte	0
 4696 01cc 31       		.uleb128 0x31
 4697 01cd 13       		.uleb128 0x13
 4698 01ce 02       		.uleb128 0x2
 4699 01cf 06       		.uleb128 0x6
 4700 01d0 B742     		.uleb128 0x2137
 4701 01d2 06       		.uleb128 0x6
 4702 01d3 00       		.byte	0
 4703 01d4 00       		.byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 100


 4704 01d5 1F       		.uleb128 0x1f
 4705 01d6 1D       		.uleb128 0x1d
 4706 01d7 01       		.byte	0x1
 4707 01d8 31       		.uleb128 0x31
 4708 01d9 13       		.uleb128 0x13
 4709 01da 52       		.uleb128 0x52
 4710 01db 01       		.uleb128 0x1
 4711 01dc B842     		.uleb128 0x2138
 4712 01de 05       		.uleb128 0x5
 4713 01df 55       		.uleb128 0x55
 4714 01e0 06       		.uleb128 0x6
 4715 01e1 58       		.uleb128 0x58
 4716 01e2 0B       		.uleb128 0xb
 4717 01e3 59       		.uleb128 0x59
 4718 01e4 0B       		.uleb128 0xb
 4719 01e5 57       		.uleb128 0x57
 4720 01e6 0B       		.uleb128 0xb
 4721 01e7 01       		.uleb128 0x1
 4722 01e8 13       		.uleb128 0x13
 4723 01e9 00       		.byte	0
 4724 01ea 00       		.byte	0
 4725 01eb 20       		.uleb128 0x20
 4726 01ec 34       		.uleb128 0x34
 4727 01ed 00       		.byte	0
 4728 01ee 31       		.uleb128 0x31
 4729 01ef 13       		.uleb128 0x13
 4730 01f0 02       		.uleb128 0x2
 4731 01f1 06       		.uleb128 0x6
 4732 01f2 B742     		.uleb128 0x2137
 4733 01f4 06       		.uleb128 0x6
 4734 01f5 00       		.byte	0
 4735 01f6 00       		.byte	0
 4736 01f7 21       		.uleb128 0x21
 4737 01f8 1D       		.uleb128 0x1d
 4738 01f9 01       		.byte	0x1
 4739 01fa 31       		.uleb128 0x31
 4740 01fb 13       		.uleb128 0x13
 4741 01fc 52       		.uleb128 0x52
 4742 01fd 01       		.uleb128 0x1
 4743 01fe B842     		.uleb128 0x2138
 4744 0200 05       		.uleb128 0x5
 4745 0201 55       		.uleb128 0x55
 4746 0202 06       		.uleb128 0x6
 4747 0203 58       		.uleb128 0x58
 4748 0204 0B       		.uleb128 0xb
 4749 0205 59       		.uleb128 0x59
 4750 0206 0B       		.uleb128 0xb
 4751 0207 57       		.uleb128 0x57
 4752 0208 0B       		.uleb128 0xb
 4753 0209 00       		.byte	0
 4754 020a 00       		.byte	0
 4755 020b 22       		.uleb128 0x22
 4756 020c 1D       		.uleb128 0x1d
 4757 020d 01       		.byte	0x1
 4758 020e 31       		.uleb128 0x31
 4759 020f 13       		.uleb128 0x13
 4760 0210 52       		.uleb128 0x52
ARM GAS  /tmp/ccfh54Yn.s 			page 101


 4761 0211 01       		.uleb128 0x1
 4762 0212 B842     		.uleb128 0x2138
 4763 0214 05       		.uleb128 0x5
 4764 0215 11       		.uleb128 0x11
 4765 0216 01       		.uleb128 0x1
 4766 0217 12       		.uleb128 0x12
 4767 0218 01       		.uleb128 0x1
 4768 0219 58       		.uleb128 0x58
 4769 021a 0B       		.uleb128 0xb
 4770 021b 59       		.uleb128 0x59
 4771 021c 05       		.uleb128 0x5
 4772 021d 57       		.uleb128 0x57
 4773 021e 0B       		.uleb128 0xb
 4774 021f 01       		.uleb128 0x1
 4775 0220 13       		.uleb128 0x13
 4776 0221 00       		.byte	0
 4777 0222 00       		.byte	0
 4778 0223 23       		.uleb128 0x23
 4779 0224 898201   		.uleb128 0x4109
 4780 0227 01       		.byte	0x1
 4781 0228 11       		.uleb128 0x11
 4782 0229 01       		.uleb128 0x1
 4783 022a 31       		.uleb128 0x31
 4784 022b 13       		.uleb128 0x13
 4785 022c 01       		.uleb128 0x1
 4786 022d 13       		.uleb128 0x13
 4787 022e 00       		.byte	0
 4788 022f 00       		.byte	0
 4789 0230 24       		.uleb128 0x24
 4790 0231 0F       		.uleb128 0xf
 4791 0232 00       		.byte	0
 4792 0233 0B       		.uleb128 0xb
 4793 0234 0B       		.uleb128 0xb
 4794 0235 49       		.uleb128 0x49
 4795 0236 13       		.uleb128 0x13
 4796 0237 00       		.byte	0
 4797 0238 00       		.byte	0
 4798 0239 25       		.uleb128 0x25
 4799 023a 01       		.uleb128 0x1
 4800 023b 01       		.byte	0x1
 4801 023c 49       		.uleb128 0x49
 4802 023d 13       		.uleb128 0x13
 4803 023e 01       		.uleb128 0x1
 4804 023f 13       		.uleb128 0x13
 4805 0240 00       		.byte	0
 4806 0241 00       		.byte	0
 4807 0242 26       		.uleb128 0x26
 4808 0243 21       		.uleb128 0x21
 4809 0244 00       		.byte	0
 4810 0245 49       		.uleb128 0x49
 4811 0246 13       		.uleb128 0x13
 4812 0247 2F       		.uleb128 0x2f
 4813 0248 0B       		.uleb128 0xb
 4814 0249 00       		.byte	0
 4815 024a 00       		.byte	0
 4816 024b 27       		.uleb128 0x27
 4817 024c 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccfh54Yn.s 			page 102


 4818 024d 01       		.byte	0x1
 4819 024e 03       		.uleb128 0x3
 4820 024f 0E       		.uleb128 0xe
 4821 0250 3A       		.uleb128 0x3a
 4822 0251 0B       		.uleb128 0xb
 4823 0252 3B       		.uleb128 0x3b
 4824 0253 0B       		.uleb128 0xb
 4825 0254 39       		.uleb128 0x39
 4826 0255 0B       		.uleb128 0xb
 4827 0256 27       		.uleb128 0x27
 4828 0257 0C       		.uleb128 0xc
 4829 0258 11       		.uleb128 0x11
 4830 0259 01       		.uleb128 0x1
 4831 025a 12       		.uleb128 0x12
 4832 025b 01       		.uleb128 0x1
 4833 025c 40       		.uleb128 0x40
 4834 025d 06       		.uleb128 0x6
 4835 025e 9742     		.uleb128 0x2117
 4836 0260 0C       		.uleb128 0xc
 4837 0261 01       		.uleb128 0x1
 4838 0262 13       		.uleb128 0x13
 4839 0263 00       		.byte	0
 4840 0264 00       		.byte	0
 4841 0265 28       		.uleb128 0x28
 4842 0266 05       		.uleb128 0x5
 4843 0267 00       		.byte	0
 4844 0268 03       		.uleb128 0x3
 4845 0269 08       		.uleb128 0x8
 4846 026a 3A       		.uleb128 0x3a
 4847 026b 0B       		.uleb128 0xb
 4848 026c 3B       		.uleb128 0x3b
 4849 026d 0B       		.uleb128 0xb
 4850 026e 39       		.uleb128 0x39
 4851 026f 0B       		.uleb128 0xb
 4852 0270 49       		.uleb128 0x49
 4853 0271 13       		.uleb128 0x13
 4854 0272 02       		.uleb128 0x2
 4855 0273 06       		.uleb128 0x6
 4856 0274 B742     		.uleb128 0x2137
 4857 0276 06       		.uleb128 0x6
 4858 0277 00       		.byte	0
 4859 0278 00       		.byte	0
 4860 0279 29       		.uleb128 0x29
 4861 027a 05       		.uleb128 0x5
 4862 027b 00       		.byte	0
 4863 027c 03       		.uleb128 0x3
 4864 027d 08       		.uleb128 0x8
 4865 027e 3A       		.uleb128 0x3a
 4866 027f 0B       		.uleb128 0xb
 4867 0280 3B       		.uleb128 0x3b
 4868 0281 0B       		.uleb128 0xb
 4869 0282 39       		.uleb128 0x39
 4870 0283 0B       		.uleb128 0xb
 4871 0284 49       		.uleb128 0x49
 4872 0285 13       		.uleb128 0x13
 4873 0286 02       		.uleb128 0x2
 4874 0287 0A       		.uleb128 0xa
ARM GAS  /tmp/ccfh54Yn.s 			page 103


 4875 0288 00       		.byte	0
 4876 0289 00       		.byte	0
 4877 028a 2A       		.uleb128 0x2a
 4878 028b 05       		.uleb128 0x5
 4879 028c 00       		.byte	0
 4880 028d 03       		.uleb128 0x3
 4881 028e 0E       		.uleb128 0xe
 4882 028f 3A       		.uleb128 0x3a
 4883 0290 0B       		.uleb128 0xb
 4884 0291 3B       		.uleb128 0x3b
 4885 0292 0B       		.uleb128 0xb
 4886 0293 39       		.uleb128 0x39
 4887 0294 0B       		.uleb128 0xb
 4888 0295 49       		.uleb128 0x49
 4889 0296 13       		.uleb128 0x13
 4890 0297 02       		.uleb128 0x2
 4891 0298 0A       		.uleb128 0xa
 4892 0299 00       		.byte	0
 4893 029a 00       		.byte	0
 4894 029b 2B       		.uleb128 0x2b
 4895 029c 2E       		.uleb128 0x2e
 4896 029d 01       		.byte	0x1
 4897 029e 3F       		.uleb128 0x3f
 4898 029f 0C       		.uleb128 0xc
 4899 02a0 03       		.uleb128 0x3
 4900 02a1 0E       		.uleb128 0xe
 4901 02a2 3A       		.uleb128 0x3a
 4902 02a3 0B       		.uleb128 0xb
 4903 02a4 3B       		.uleb128 0x3b
 4904 02a5 0B       		.uleb128 0xb
 4905 02a6 39       		.uleb128 0x39
 4906 02a7 0B       		.uleb128 0xb
 4907 02a8 27       		.uleb128 0x27
 4908 02a9 0C       		.uleb128 0xc
 4909 02aa 20       		.uleb128 0x20
 4910 02ab 0B       		.uleb128 0xb
 4911 02ac 01       		.uleb128 0x1
 4912 02ad 13       		.uleb128 0x13
 4913 02ae 00       		.byte	0
 4914 02af 00       		.byte	0
 4915 02b0 2C       		.uleb128 0x2c
 4916 02b1 05       		.uleb128 0x5
 4917 02b2 00       		.byte	0
 4918 02b3 03       		.uleb128 0x3
 4919 02b4 08       		.uleb128 0x8
 4920 02b5 3A       		.uleb128 0x3a
 4921 02b6 0B       		.uleb128 0xb
 4922 02b7 3B       		.uleb128 0x3b
 4923 02b8 0B       		.uleb128 0xb
 4924 02b9 39       		.uleb128 0x39
 4925 02ba 0B       		.uleb128 0xb
 4926 02bb 49       		.uleb128 0x49
 4927 02bc 13       		.uleb128 0x13
 4928 02bd 00       		.byte	0
 4929 02be 00       		.byte	0
 4930 02bf 2D       		.uleb128 0x2d
 4931 02c0 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccfh54Yn.s 			page 104


 4932 02c1 01       		.byte	0x1
 4933 02c2 31       		.uleb128 0x31
 4934 02c3 13       		.uleb128 0x13
 4935 02c4 11       		.uleb128 0x11
 4936 02c5 01       		.uleb128 0x1
 4937 02c6 12       		.uleb128 0x12
 4938 02c7 01       		.uleb128 0x1
 4939 02c8 40       		.uleb128 0x40
 4940 02c9 0A       		.uleb128 0xa
 4941 02ca 9742     		.uleb128 0x2117
 4942 02cc 0C       		.uleb128 0xc
 4943 02cd 01       		.uleb128 0x1
 4944 02ce 13       		.uleb128 0x13
 4945 02cf 00       		.byte	0
 4946 02d0 00       		.byte	0
 4947 02d1 2E       		.uleb128 0x2e
 4948 02d2 05       		.uleb128 0x5
 4949 02d3 00       		.byte	0
 4950 02d4 31       		.uleb128 0x31
 4951 02d5 13       		.uleb128 0x13
 4952 02d6 02       		.uleb128 0x2
 4953 02d7 0A       		.uleb128 0xa
 4954 02d8 00       		.byte	0
 4955 02d9 00       		.byte	0
 4956 02da 2F       		.uleb128 0x2f
 4957 02db 2E       		.uleb128 0x2e
 4958 02dc 01       		.byte	0x1
 4959 02dd 31       		.uleb128 0x31
 4960 02de 13       		.uleb128 0x13
 4961 02df 11       		.uleb128 0x11
 4962 02e0 01       		.uleb128 0x1
 4963 02e1 12       		.uleb128 0x12
 4964 02e2 01       		.uleb128 0x1
 4965 02e3 40       		.uleb128 0x40
 4966 02e4 06       		.uleb128 0x6
 4967 02e5 9742     		.uleb128 0x2117
 4968 02e7 0C       		.uleb128 0xc
 4969 02e8 01       		.uleb128 0x1
 4970 02e9 13       		.uleb128 0x13
 4971 02ea 00       		.byte	0
 4972 02eb 00       		.byte	0
 4973 02ec 30       		.uleb128 0x30
 4974 02ed 2E       		.uleb128 0x2e
 4975 02ee 00       		.byte	0
 4976 02ef 3F       		.uleb128 0x3f
 4977 02f0 0C       		.uleb128 0xc
 4978 02f1 3C       		.uleb128 0x3c
 4979 02f2 0C       		.uleb128 0xc
 4980 02f3 8740     		.uleb128 0x2007
 4981 02f5 08       		.uleb128 0x8
 4982 02f6 03       		.uleb128 0x3
 4983 02f7 08       		.uleb128 0x8
 4984 02f8 3A       		.uleb128 0x3a
 4985 02f9 0B       		.uleb128 0xb
 4986 02fa 3B       		.uleb128 0x3b
 4987 02fb 0B       		.uleb128 0xb
 4988 02fc 39       		.uleb128 0x39
ARM GAS  /tmp/ccfh54Yn.s 			page 105


 4989 02fd 0B       		.uleb128 0xb
 4990 02fe 00       		.byte	0
 4991 02ff 00       		.byte	0
 4992 0300 31       		.uleb128 0x31
 4993 0301 2E       		.uleb128 0x2e
 4994 0302 00       		.byte	0
 4995 0303 3F       		.uleb128 0x3f
 4996 0304 0C       		.uleb128 0xc
 4997 0305 3C       		.uleb128 0x3c
 4998 0306 0C       		.uleb128 0xc
 4999 0307 8740     		.uleb128 0x2007
 5000 0309 0E       		.uleb128 0xe
 5001 030a 03       		.uleb128 0x3
 5002 030b 0E       		.uleb128 0xe
 5003 030c 3A       		.uleb128 0x3a
 5004 030d 0B       		.uleb128 0xb
 5005 030e 3B       		.uleb128 0x3b
 5006 030f 0B       		.uleb128 0xb
 5007 0310 39       		.uleb128 0x39
 5008 0311 0B       		.uleb128 0xb
 5009 0312 00       		.byte	0
 5010 0313 00       		.byte	0
 5011 0314 00       		.byte	0
 5012              		.section	.debug_loc,"",%progbits
 5013              	.Ldebug_loc0:
 5014              	.LLST20:
 5015 0000 00000000 		.4byte	.LFB5
 5016 0004 10000000 		.4byte	.LCFI17
 5017 0008 0200     		.2byte	0x2
 5018 000a 7D       		.byte	0x7d
 5019 000b 00       		.sleb128 0
 5020 000c 10000000 		.4byte	.LCFI17
 5021 0010 14000000 		.4byte	.LCFI18
 5022 0014 0200     		.2byte	0x2
 5023 0016 7D       		.byte	0x7d
 5024 0017 24       		.sleb128 36
 5025 0018 14000000 		.4byte	.LCFI18
 5026 001c 16000000 		.4byte	.LCFI19
 5027 0020 0200     		.2byte	0x2
 5028 0022 7D       		.byte	0x7d
 5029 0023 3C       		.sleb128 60
 5030 0024 16000000 		.4byte	.LCFI19
 5031 0028 3C020000 		.4byte	.LCFI20
 5032 002c 0300     		.2byte	0x3
 5033 002e 7D       		.byte	0x7d
 5034 002f 9003     		.sleb128 400
 5035 0031 3C020000 		.4byte	.LCFI20
 5036 0035 40020000 		.4byte	.LCFI21
 5037 0039 0200     		.2byte	0x2
 5038 003b 7D       		.byte	0x7d
 5039 003c 3C       		.sleb128 60
 5040 003d 40020000 		.4byte	.LCFI21
 5041 0041 44020000 		.4byte	.LCFI22
 5042 0045 0200     		.2byte	0x2
 5043 0047 7D       		.byte	0x7d
 5044 0048 24       		.sleb128 36
 5045 0049 44020000 		.4byte	.LCFI22
ARM GAS  /tmp/ccfh54Yn.s 			page 106


 5046 004d 4E070000 		.4byte	.LFE5
 5047 0051 0300     		.2byte	0x3
 5048 0053 7D       		.byte	0x7d
 5049 0054 9003     		.sleb128 400
 5050 0056 00000000 		.4byte	0
 5051 005a 00000000 		.4byte	0
 5052              	.LVUS21:
 5053 005e 00       		.uleb128 0
 5054 005f 00       		.uleb128 .LVU210
 5055 0060 00       		.uleb128 .LVU210
 5056 0061 00       		.uleb128 0
 5057              	.LLST21:
 5058 0062 00000000 		.4byte	.LVL44
 5059 0066 1F000000 		.4byte	.LVL45-1
 5060 006a 0100     		.2byte	0x1
 5061 006c 50       		.byte	0x50
 5062 006d 1F000000 		.4byte	.LVL45-1
 5063 0071 4E070000 		.4byte	.LFE5
 5064 0075 0100     		.2byte	0x1
 5065 0077 58       		.byte	0x58
 5066 0078 00000000 		.4byte	0
 5067 007c 00000000 		.4byte	0
 5068              	.LVUS22:
 5069 0080 00       		.uleb128 0
 5070 0081 00       		.uleb128 .LVU210
 5071 0082 00       		.uleb128 .LVU210
 5072 0083 00       		.uleb128 .LVU294
 5073 0084 00       		.uleb128 .LVU294
 5074 0085 00       		.uleb128 .LVU297
 5075 0086 00       		.uleb128 .LVU297
 5076 0087 00       		.uleb128 .LVU319
 5077 0088 00       		.uleb128 .LVU319
 5078 0089 00       		.uleb128 .LVU561
 5079 008a 00       		.uleb128 .LVU561
 5080 008b 00       		.uleb128 .LVU562
 5081 008c 00       		.uleb128 .LVU562
 5082 008d 00       		.uleb128 0
 5083              	.LLST22:
 5084 008e 00000000 		.4byte	.LVL44
 5085 0092 1F000000 		.4byte	.LVL45-1
 5086 0096 0100     		.2byte	0x1
 5087 0098 51       		.byte	0x51
 5088 0099 1F000000 		.4byte	.LVL45-1
 5089 009d 36020000 		.4byte	.LVL63
 5090 00a1 0100     		.2byte	0x1
 5091 00a3 55       		.byte	0x55
 5092 00a4 36020000 		.4byte	.LVL63
 5093 00a8 44020000 		.4byte	.LVL65
 5094 00ac 0400     		.2byte	0x4
 5095 00ae F3       		.byte	0xf3
 5096 00af 01       		.uleb128 0x1
 5097 00b0 51       		.byte	0x51
 5098 00b1 9F       		.byte	0x9f
 5099 00b2 44020000 		.4byte	.LVL65
 5100 00b6 D0020000 		.4byte	.LVL72
 5101 00ba 0100     		.2byte	0x1
 5102 00bc 55       		.byte	0x55
ARM GAS  /tmp/ccfh54Yn.s 			page 107


 5103 00bd D0020000 		.4byte	.LVL72
 5104 00c1 DC050000 		.4byte	.LVL125
 5105 00c5 0400     		.2byte	0x4
 5106 00c7 F3       		.byte	0xf3
 5107 00c8 01       		.uleb128 0x1
 5108 00c9 51       		.byte	0x51
 5109 00ca 9F       		.byte	0x9f
 5110 00cb DC050000 		.4byte	.LVL125
 5111 00cf E2050000 		.4byte	.LVL126
 5112 00d3 0100     		.2byte	0x1
 5113 00d5 55       		.byte	0x55
 5114 00d6 E2050000 		.4byte	.LVL126
 5115 00da 4E070000 		.4byte	.LFE5
 5116 00de 0400     		.2byte	0x4
 5117 00e0 F3       		.byte	0xf3
 5118 00e1 01       		.uleb128 0x1
 5119 00e2 51       		.byte	0x51
 5120 00e3 9F       		.byte	0x9f
 5121 00e4 00000000 		.4byte	0
 5122 00e8 00000000 		.4byte	0
 5123              	.LVUS23:
 5124 00ec 00       		.uleb128 0
 5125 00ed 00       		.uleb128 .LVU210
 5126 00ee 00       		.uleb128 .LVU210
 5127 00ef 00       		.uleb128 .LVU294
 5128 00f0 00       		.uleb128 .LVU294
 5129 00f1 00       		.uleb128 .LVU297
 5130 00f2 00       		.uleb128 .LVU297
 5131 00f3 00       		.uleb128 .LVU330
 5132 00f4 00       		.uleb128 .LVU330
 5133 00f5 00       		.uleb128 .LVU453
 5134 00f6 00       		.uleb128 .LVU453
 5135 00f7 00       		.uleb128 .LVU460
 5136 00f8 00       		.uleb128 .LVU460
 5137 00f9 00       		.uleb128 .LVU561
 5138 00fa 00       		.uleb128 .LVU561
 5139 00fb 00       		.uleb128 .LVU563
 5140 00fc 00       		.uleb128 .LVU563
 5141 00fd 00       		.uleb128 .LVU639
 5142 00fe 00       		.uleb128 .LVU639
 5143 00ff 00       		.uleb128 .LVU641
 5144 0100 00       		.uleb128 .LVU641
 5145 0101 00       		.uleb128 0
 5146              	.LLST23:
 5147 0102 00000000 		.4byte	.LVL44
 5148 0106 1F000000 		.4byte	.LVL45-1
 5149 010a 0100     		.2byte	0x1
 5150 010c 52       		.byte	0x52
 5151 010d 1F000000 		.4byte	.LVL45-1
 5152 0111 36020000 		.4byte	.LVL63
 5153 0115 0100     		.2byte	0x1
 5154 0117 54       		.byte	0x54
 5155 0118 36020000 		.4byte	.LVL63
 5156 011c 44020000 		.4byte	.LVL65
 5157 0120 0400     		.2byte	0x4
 5158 0122 F3       		.byte	0xf3
 5159 0123 01       		.uleb128 0x1
ARM GAS  /tmp/ccfh54Yn.s 			page 108


 5160 0124 52       		.byte	0x52
 5161 0125 9F       		.byte	0x9f
 5162 0126 44020000 		.4byte	.LVL65
 5163 012a FE020000 		.4byte	.LVL75
 5164 012e 0100     		.2byte	0x1
 5165 0130 54       		.byte	0x54
 5166 0131 FE020000 		.4byte	.LVL75
 5167 0135 9E040000 		.4byte	.LVL103
 5168 0139 0400     		.2byte	0x4
 5169 013b F3       		.byte	0xf3
 5170 013c 01       		.uleb128 0x1
 5171 013d 52       		.byte	0x52
 5172 013e 9F       		.byte	0x9f
 5173 013f 9E040000 		.4byte	.LVL103
 5174 0143 B8040000 		.4byte	.LVL104
 5175 0147 0100     		.2byte	0x1
 5176 0149 54       		.byte	0x54
 5177 014a B8040000 		.4byte	.LVL104
 5178 014e DC050000 		.4byte	.LVL125
 5179 0152 0400     		.2byte	0x4
 5180 0154 F3       		.byte	0xf3
 5181 0155 01       		.uleb128 0x1
 5182 0156 52       		.byte	0x52
 5183 0157 9F       		.byte	0x9f
 5184 0158 DC050000 		.4byte	.LVL125
 5185 015c FC050000 		.4byte	.LVL128
 5186 0160 0100     		.2byte	0x1
 5187 0162 54       		.byte	0x54
 5188 0163 FC050000 		.4byte	.LVL128
 5189 0167 00070000 		.4byte	.LVL148
 5190 016b 0400     		.2byte	0x4
 5191 016d F3       		.byte	0xf3
 5192 016e 01       		.uleb128 0x1
 5193 016f 52       		.byte	0x52
 5194 0170 9F       		.byte	0x9f
 5195 0171 00070000 		.4byte	.LVL148
 5196 0175 06070000 		.4byte	.LVL149
 5197 0179 0100     		.2byte	0x1
 5198 017b 54       		.byte	0x54
 5199 017c 06070000 		.4byte	.LVL149
 5200 0180 4E070000 		.4byte	.LFE5
 5201 0184 0400     		.2byte	0x4
 5202 0186 F3       		.byte	0xf3
 5203 0187 01       		.uleb128 0x1
 5204 0188 52       		.byte	0x52
 5205 0189 9F       		.byte	0x9f
 5206 018a 00000000 		.4byte	0
 5207 018e 00000000 		.4byte	0
 5208              	.LVUS24:
 5209 0192 00       		.uleb128 .LVU214
 5210 0193 00       		.uleb128 .LVU294
 5211 0194 00       		.uleb128 .LVU294
 5212 0195 00       		.uleb128 .LVU296
 5213 0196 00       		.uleb128 .LVU296
 5214 0197 00       		.uleb128 .LVU297
 5215 0198 00       		.uleb128 .LVU297
 5216 0199 00       		.uleb128 .LVU396
ARM GAS  /tmp/ccfh54Yn.s 			page 109


 5217 019a 00       		.uleb128 .LVU396
 5218 019b 00       		.uleb128 .LVU453
 5219 019c 00       		.uleb128 .LVU453
 5220 019d 00       		.uleb128 .LVU461
 5221 019e 00       		.uleb128 .LVU461
 5222 019f 00       		.uleb128 .LVU506
 5223 01a0 00       		.uleb128 .LVU506
 5224 01a1 00       		.uleb128 .LVU551
 5225 01a2 00       		.uleb128 .LVU551
 5226 01a3 00       		.uleb128 .LVU561
 5227 01a4 00       		.uleb128 .LVU561
 5228 01a5 00       		.uleb128 .LVU604
 5229 01a6 00       		.uleb128 .LVU604
 5230 01a7 00       		.uleb128 .LVU614
 5231 01a8 00       		.uleb128 .LVU614
 5232 01a9 00       		.uleb128 .LVU634
 5233 01aa 00       		.uleb128 .LVU634
 5234 01ab 00       		.uleb128 .LVU639
 5235 01ac 00       		.uleb128 .LVU639
 5236 01ad 00       		.uleb128 0
 5237              	.LLST24:
 5238 01ae 3A000000 		.4byte	.LVL46
 5239 01b2 36020000 		.4byte	.LVL63
 5240 01b6 0800     		.2byte	0x8
 5241 01b8 90       		.byte	0x90
 5242 01b9 50       		.uleb128 0x50
 5243 01ba 93       		.byte	0x93
 5244 01bb 04       		.uleb128 0x4
 5245 01bc 90       		.byte	0x90
 5246 01bd 52       		.uleb128 0x52
 5247 01be 93       		.byte	0x93
 5248 01bf 04       		.uleb128 0x4
 5249 01c0 36020000 		.4byte	.LVL63
 5250 01c4 40020000 		.4byte	.LVL64
 5251 01c8 0900     		.2byte	0x9
 5252 01ca 91       		.byte	0x91
 5253 01cb F87C     		.sleb128 -392
 5254 01cd 93       		.byte	0x93
 5255 01ce 04       		.uleb128 0x4
 5256 01cf 90       		.byte	0x90
 5257 01d0 52       		.uleb128 0x52
 5258 01d1 93       		.byte	0x93
 5259 01d2 04       		.uleb128 0x4
 5260 01d3 40020000 		.4byte	.LVL64
 5261 01d7 44020000 		.4byte	.LVL65
 5262 01db 0A00     		.2byte	0xa
 5263 01dd 91       		.byte	0x91
 5264 01de F87C     		.sleb128 -392
 5265 01e0 93       		.byte	0x93
 5266 01e1 04       		.uleb128 0x4
 5267 01e2 91       		.byte	0x91
 5268 01e3 FC7C     		.sleb128 -388
 5269 01e5 93       		.byte	0x93
 5270 01e6 04       		.uleb128 0x4
 5271 01e7 44020000 		.4byte	.LVL65
 5272 01eb E4030000 		.4byte	.LVL85
 5273 01ef 0800     		.2byte	0x8
ARM GAS  /tmp/ccfh54Yn.s 			page 110


 5274 01f1 90       		.byte	0x90
 5275 01f2 50       		.uleb128 0x50
 5276 01f3 93       		.byte	0x93
 5277 01f4 04       		.uleb128 0x4
 5278 01f5 90       		.byte	0x90
 5279 01f6 52       		.uleb128 0x52
 5280 01f7 93       		.byte	0x93
 5281 01f8 04       		.uleb128 0x4
 5282 01f9 E4030000 		.4byte	.LVL85
 5283 01fd 9E040000 		.4byte	.LVL103
 5284 0201 0900     		.2byte	0x9
 5285 0203 91       		.byte	0x91
 5286 0204 F87C     		.sleb128 -392
 5287 0206 93       		.byte	0x93
 5288 0207 04       		.uleb128 0x4
 5289 0208 90       		.byte	0x90
 5290 0209 52       		.uleb128 0x52
 5291 020a 93       		.byte	0x93
 5292 020b 04       		.uleb128 0x4
 5293 020c 9E040000 		.4byte	.LVL103
 5294 0210 BE040000 		.4byte	.LVL105
 5295 0214 0800     		.2byte	0x8
 5296 0216 90       		.byte	0x90
 5297 0217 50       		.uleb128 0x50
 5298 0218 93       		.byte	0x93
 5299 0219 04       		.uleb128 0x4
 5300 021a 90       		.byte	0x90
 5301 021b 52       		.uleb128 0x52
 5302 021c 93       		.byte	0x93
 5303 021d 04       		.uleb128 0x4
 5304 021e BE040000 		.4byte	.LVL105
 5305 0222 36050000 		.4byte	.LVL113
 5306 0226 0900     		.2byte	0x9
 5307 0228 91       		.byte	0x91
 5308 0229 F87C     		.sleb128 -392
 5309 022b 93       		.byte	0x93
 5310 022c 04       		.uleb128 0x4
 5311 022d 90       		.byte	0x90
 5312 022e 52       		.uleb128 0x52
 5313 022f 93       		.byte	0x93
 5314 0230 04       		.uleb128 0x4
 5315 0231 36050000 		.4byte	.LVL113
 5316 0235 AA050000 		.4byte	.LVL121
 5317 0239 0800     		.2byte	0x8
 5318 023b 90       		.byte	0x90
 5319 023c 50       		.uleb128 0x50
 5320 023d 93       		.byte	0x93
 5321 023e 04       		.uleb128 0x4
 5322 023f 90       		.byte	0x90
 5323 0240 52       		.uleb128 0x52
 5324 0241 93       		.byte	0x93
 5325 0242 04       		.uleb128 0x4
 5326 0243 AA050000 		.4byte	.LVL121
 5327 0247 DC050000 		.4byte	.LVL125
 5328 024b 0900     		.2byte	0x9
 5329 024d 91       		.byte	0x91
 5330 024e F87C     		.sleb128 -392
ARM GAS  /tmp/ccfh54Yn.s 			page 111


 5331 0250 93       		.byte	0x93
 5332 0251 04       		.uleb128 0x4
 5333 0252 90       		.byte	0x90
 5334 0253 52       		.uleb128 0x52
 5335 0254 93       		.byte	0x93
 5336 0255 04       		.uleb128 0x4
 5337 0256 DC050000 		.4byte	.LVL125
 5338 025a 62060000 		.4byte	.LVL136
 5339 025e 0800     		.2byte	0x8
 5340 0260 90       		.byte	0x90
 5341 0261 50       		.uleb128 0x50
 5342 0262 93       		.byte	0x93
 5343 0263 04       		.uleb128 0x4
 5344 0264 90       		.byte	0x90
 5345 0265 52       		.uleb128 0x52
 5346 0266 93       		.byte	0x93
 5347 0267 04       		.uleb128 0x4
 5348 0268 62060000 		.4byte	.LVL136
 5349 026c 94060000 		.4byte	.LVL140
 5350 0270 0900     		.2byte	0x9
 5351 0272 91       		.byte	0x91
 5352 0273 F87C     		.sleb128 -392
 5353 0275 93       		.byte	0x93
 5354 0276 04       		.uleb128 0x4
 5355 0277 90       		.byte	0x90
 5356 0278 52       		.uleb128 0x52
 5357 0279 93       		.byte	0x93
 5358 027a 04       		.uleb128 0x4
 5359 027b 94060000 		.4byte	.LVL140
 5360 027f D4060000 		.4byte	.LVL145
 5361 0283 0800     		.2byte	0x8
 5362 0285 90       		.byte	0x90
 5363 0286 50       		.uleb128 0x50
 5364 0287 93       		.byte	0x93
 5365 0288 04       		.uleb128 0x4
 5366 0289 90       		.byte	0x90
 5367 028a 52       		.uleb128 0x52
 5368 028b 93       		.byte	0x93
 5369 028c 04       		.uleb128 0x4
 5370 028d D4060000 		.4byte	.LVL145
 5371 0291 00070000 		.4byte	.LVL148
 5372 0295 0900     		.2byte	0x9
 5373 0297 91       		.byte	0x91
 5374 0298 F87C     		.sleb128 -392
 5375 029a 93       		.byte	0x93
 5376 029b 04       		.uleb128 0x4
 5377 029c 90       		.byte	0x90
 5378 029d 52       		.uleb128 0x52
 5379 029e 93       		.byte	0x93
 5380 029f 04       		.uleb128 0x4
 5381 02a0 00070000 		.4byte	.LVL148
 5382 02a4 4E070000 		.4byte	.LFE5
 5383 02a8 0800     		.2byte	0x8
 5384 02aa 90       		.byte	0x90
 5385 02ab 50       		.uleb128 0x50
 5386 02ac 93       		.byte	0x93
 5387 02ad 04       		.uleb128 0x4
ARM GAS  /tmp/ccfh54Yn.s 			page 112


 5388 02ae 90       		.byte	0x90
 5389 02af 52       		.uleb128 0x52
 5390 02b0 93       		.byte	0x93
 5391 02b1 04       		.uleb128 0x4
 5392 02b2 00000000 		.4byte	0
 5393 02b6 00000000 		.4byte	0
 5394              	.LVUS25:
 5395 02ba 00       		.uleb128 .LVU223
 5396 02bb 00       		.uleb128 .LVU230
 5397 02bc 00       		.uleb128 .LVU230
 5398 02bd 00       		.uleb128 0
 5399              	.LLST25:
 5400 02be 5C000000 		.4byte	.LVL48
 5401 02c2 75000000 		.4byte	.LVL49-1
 5402 02c6 0800     		.2byte	0x8
 5403 02c8 90       		.byte	0x90
 5404 02c9 51       		.uleb128 0x51
 5405 02ca 93       		.byte	0x93
 5406 02cb 04       		.uleb128 0x4
 5407 02cc 90       		.byte	0x90
 5408 02cd 41       		.uleb128 0x41
 5409 02ce 93       		.byte	0x93
 5410 02cf 04       		.uleb128 0x4
 5411 02d0 75000000 		.4byte	.LVL49-1
 5412 02d4 4E070000 		.4byte	.LFE5
 5413 02d8 0800     		.2byte	0x8
 5414 02da 90       		.byte	0x90
 5415 02db 51       		.uleb128 0x51
 5416 02dc 93       		.byte	0x93
 5417 02dd 04       		.uleb128 0x4
 5418 02de 90       		.byte	0x90
 5419 02df 53       		.uleb128 0x53
 5420 02e0 93       		.byte	0x93
 5421 02e1 04       		.uleb128 0x4
 5422 02e2 00000000 		.4byte	0
 5423 02e6 00000000 		.4byte	0
 5424              	.LVUS26:
 5425 02ea 04       		.uleb128 .LVU313
 5426 02eb 00       		.uleb128 .LVU330
 5427 02ec 00       		.uleb128 .LVU330
 5428 02ed 01       		.uleb128 .LVU336
 5429 02ee 01       		.uleb128 .LVU336
 5430 02ef 00       		.uleb128 .LVU347
 5431 02f0 01       		.uleb128 .LVU348
 5432 02f1 01       		.uleb128 .LVU404
 5433 02f2 00       		.uleb128 .LVU453
 5434 02f3 02       		.uleb128 .LVU455
 5435 02f4 02       		.uleb128 .LVU455
 5436 02f5 00       		.uleb128 .LVU461
 5437 02f6 00       		.uleb128 .LVU506
 5438 02f7 00       		.uleb128 .LVU561
 5439 02f8 00       		.uleb128 .LVU561
 5440 02f9 00       		.uleb128 .LVU563
 5441 02fa 00       		.uleb128 .LVU563
 5442 02fb 04       		.uleb128 .LVU583
 5443 02fc 00       		.uleb128 .LVU614
 5444 02fd 00       		.uleb128 .LVU639
ARM GAS  /tmp/ccfh54Yn.s 			page 113


 5445 02fe 00       		.uleb128 .LVU639
 5446 02ff 00       		.uleb128 .LVU642
 5447 0300 00       		.uleb128 .LVU642
 5448 0301 00       		.uleb128 .LVU643
 5449 0302 00       		.uleb128 .LVU643
 5450 0303 00       		.uleb128 0
 5451              	.LLST26:
 5452 0304 BA020000 		.4byte	.LVL70
 5453 0308 FE020000 		.4byte	.LVL75
 5454 030c 0200     		.2byte	0x2
 5455 030e 30       		.byte	0x30
 5456 030f 9F       		.byte	0x9f
 5457 0310 FE020000 		.4byte	.LVL75
 5458 0314 1A030000 		.4byte	.LVL76
 5459 0318 0100     		.2byte	0x1
 5460 031a 54       		.byte	0x54
 5461 031b 1A030000 		.4byte	.LVL76
 5462 031f 52030000 		.4byte	.LVL77
 5463 0323 0200     		.2byte	0x2
 5464 0325 32       		.byte	0x32
 5465 0326 9F       		.byte	0x9f
 5466 0327 52030000 		.4byte	.LVL77
 5467 032b 08040000 		.4byte	.LVL88
 5468 032f 0200     		.2byte	0x2
 5469 0331 33       		.byte	0x33
 5470 0332 9F       		.byte	0x9f
 5471 0333 9E040000 		.4byte	.LVL103
 5472 0337 9E040000 		.4byte	.LVL103
 5473 033b 0200     		.2byte	0x2
 5474 033d 30       		.byte	0x30
 5475 033e 9F       		.byte	0x9f
 5476 033f 9E040000 		.4byte	.LVL103
 5477 0343 BE040000 		.4byte	.LVL105
 5478 0347 0200     		.2byte	0x2
 5479 0349 31       		.byte	0x31
 5480 034a 9F       		.byte	0x9f
 5481 034b 36050000 		.4byte	.LVL113
 5482 034f DC050000 		.4byte	.LVL125
 5483 0353 0100     		.2byte	0x1
 5484 0355 54       		.byte	0x54
 5485 0356 DC050000 		.4byte	.LVL125
 5486 035a FC050000 		.4byte	.LVL128
 5487 035e 0200     		.2byte	0x2
 5488 0360 30       		.byte	0x30
 5489 0361 9F       		.byte	0x9f
 5490 0362 FC050000 		.4byte	.LVL128
 5491 0366 10060000 		.4byte	.LVL131
 5492 036a 0200     		.2byte	0x2
 5493 036c 32       		.byte	0x32
 5494 036d 9F       		.byte	0x9f
 5495 036e 94060000 		.4byte	.LVL140
 5496 0372 00070000 		.4byte	.LVL148
 5497 0376 0100     		.2byte	0x1
 5498 0378 54       		.byte	0x54
 5499 0379 00070000 		.4byte	.LVL148
 5500 037d 1C070000 		.4byte	.LVL151
 5501 0381 0200     		.2byte	0x2
ARM GAS  /tmp/ccfh54Yn.s 			page 114


 5502 0383 31       		.byte	0x31
 5503 0384 9F       		.byte	0x9f
 5504 0385 1C070000 		.4byte	.LVL151
 5505 0389 32070000 		.4byte	.LVL153
 5506 038d 0200     		.2byte	0x2
 5507 038f 32       		.byte	0x32
 5508 0390 9F       		.byte	0x9f
 5509 0391 32070000 		.4byte	.LVL153
 5510 0395 4E070000 		.4byte	.LFE5
 5511 0399 0200     		.2byte	0x2
 5512 039b 33       		.byte	0x33
 5513 039c 9F       		.byte	0x9f
 5514 039d 00000000 		.4byte	0
 5515 03a1 00000000 		.4byte	0
 5516              	.LVUS27:
 5517 03a5 00       		.uleb128 .LVU316
 5518 03a6 00       		.uleb128 .LVU327
 5519 03a7 02       		.uleb128 .LVU337
 5520 03a8 00       		.uleb128 .LVU347
 5521 03a9 03       		.uleb128 .LVU456
 5522 03aa 00       		.uleb128 .LVU461
 5523 03ab 00       		.uleb128 .LVU561
 5524 03ac 00       		.uleb128 .LVU595
 5525 03ad 00       		.uleb128 .LVU639
 5526 03ae 00       		.uleb128 .LVU643
 5527              	.LLST27:
 5528 03af C2020000 		.4byte	.LVL71
 5529 03b3 E8020000 		.4byte	.LVL74
 5530 03b7 0200     		.2byte	0x2
 5531 03b9 90       		.byte	0x90
 5532 03ba 54       		.uleb128 0x54
 5533 03bb 1A030000 		.4byte	.LVL76
 5534 03bf 52030000 		.4byte	.LVL77
 5535 03c3 0200     		.2byte	0x2
 5536 03c5 90       		.byte	0x90
 5537 03c6 54       		.uleb128 0x54
 5538 03c7 9E040000 		.4byte	.LVL103
 5539 03cb BE040000 		.4byte	.LVL105
 5540 03cf 0200     		.2byte	0x2
 5541 03d1 90       		.byte	0x90
 5542 03d2 54       		.uleb128 0x54
 5543 03d3 DC050000 		.4byte	.LVL125
 5544 03d7 3E060000 		.4byte	.LVL134
 5545 03db 0200     		.2byte	0x2
 5546 03dd 90       		.byte	0x90
 5547 03de 54       		.uleb128 0x54
 5548 03df 00070000 		.4byte	.LVL148
 5549 03e3 32070000 		.4byte	.LVL153
 5550 03e7 0200     		.2byte	0x2
 5551 03e9 90       		.byte	0x90
 5552 03ea 54       		.uleb128 0x54
 5553 03eb 00000000 		.4byte	0
 5554 03ef 00000000 		.4byte	0
 5555              	.LVUS28:
 5556 03f3 01       		.uleb128 .LVU321
 5557 03f4 00       		.uleb128 .LVU561
 5558 03f5 00       		.uleb128 .LVU563
ARM GAS  /tmp/ccfh54Yn.s 			page 115


 5559 03f6 00       		.uleb128 0
 5560              	.LLST28:
 5561 03f7 D8020000 		.4byte	.LVL73
 5562 03fb DC050000 		.4byte	.LVL125
 5563 03ff 0600     		.2byte	0x6
 5564 0401 9E       		.byte	0x9e
 5565 0402 04       		.uleb128 0x4
 5566 0403 3333733F 		.4byte	0x3f733333
 5567 0407 FC050000 		.4byte	.LVL128
 5568 040b 4E070000 		.4byte	.LFE5
 5569 040f 0600     		.2byte	0x6
 5570 0411 9E       		.byte	0x9e
 5571 0412 04       		.uleb128 0x4
 5572 0413 3333733F 		.4byte	0x3f733333
 5573 0417 00000000 		.4byte	0
 5574 041b 00000000 		.4byte	0
 5575              	.LVUS29:
 5576 041f 02       		.uleb128 .LVU322
 5577 0420 00       		.uleb128 .LVU561
 5578 0421 00       		.uleb128 .LVU563
 5579 0422 00       		.uleb128 0
 5580              	.LLST29:
 5581 0423 D8020000 		.4byte	.LVL73
 5582 0427 DC050000 		.4byte	.LVL125
 5583 042b 0600     		.2byte	0x6
 5584 042d 9E       		.byte	0x9e
 5585 042e 04       		.uleb128 0x4
 5586 042f 0AD7233C 		.4byte	0x3c23d70a
 5587 0433 FC050000 		.4byte	.LVL128
 5588 0437 4E070000 		.4byte	.LFE5
 5589 043b 0600     		.2byte	0x6
 5590 043d 9E       		.byte	0x9e
 5591 043e 04       		.uleb128 0x4
 5592 043f 0AD7233C 		.4byte	0x3c23d70a
 5593 0443 00000000 		.4byte	0
 5594 0447 00000000 		.4byte	0
 5595              	.LVUS30:
 5596 044b 00       		.uleb128 .LVU383
 5597 044c 00       		.uleb128 .LVU453
 5598 044d 00       		.uleb128 .LVU461
 5599 044e 00       		.uleb128 .LVU506
 5600 044f 00       		.uleb128 .LVU541
 5601 0450 00       		.uleb128 .LVU561
 5602 0451 00       		.uleb128 .LVU595
 5603 0452 00       		.uleb128 .LVU614
 5604 0453 00       		.uleb128 .LVU624
 5605 0454 00       		.uleb128 .LVU639
 5606              	.LLST30:
 5607 0455 B0030000 		.4byte	.LVL81
 5608 0459 9E040000 		.4byte	.LVL103
 5609 045d 0200     		.2byte	0x2
 5610 045f 90       		.byte	0x90
 5611 0460 54       		.uleb128 0x54
 5612 0461 BE040000 		.4byte	.LVL105
 5613 0465 36050000 		.4byte	.LVL113
 5614 0469 0200     		.2byte	0x2
 5615 046b 90       		.byte	0x90
ARM GAS  /tmp/ccfh54Yn.s 			page 116


 5616 046c 54       		.uleb128 0x54
 5617 046d 7E050000 		.4byte	.LVL119
 5618 0471 DC050000 		.4byte	.LVL125
 5619 0475 0200     		.2byte	0x2
 5620 0477 90       		.byte	0x90
 5621 0478 54       		.uleb128 0x54
 5622 0479 3E060000 		.4byte	.LVL134
 5623 047d 94060000 		.4byte	.LVL140
 5624 0481 0200     		.2byte	0x2
 5625 0483 90       		.byte	0x90
 5626 0484 54       		.uleb128 0x54
 5627 0485 B2060000 		.4byte	.LVL142
 5628 0489 00070000 		.4byte	.LVL148
 5629 048d 0200     		.2byte	0x2
 5630 048f 90       		.byte	0x90
 5631 0490 54       		.uleb128 0x54
 5632 0491 00000000 		.4byte	0
 5633 0495 00000000 		.4byte	0
 5634              	.LVUS31:
 5635 0499 00       		.uleb128 .LVU393
 5636 049a 00       		.uleb128 .LVU453
 5637 049b 00       		.uleb128 .LVU461
 5638 049c 00       		.uleb128 .LVU506
 5639 049d 01       		.uleb128 .LVU553
 5640 049e 00       		.uleb128 .LVU561
 5641 049f 01       		.uleb128 .LVU606
 5642 04a0 00       		.uleb128 .LVU614
 5643 04a1 01       		.uleb128 .LVU632
 5644 04a2 00       		.uleb128 .LVU639
 5645              	.LLST31:
 5646 04a3 DC030000 		.4byte	.LVL84
 5647 04a7 9E040000 		.4byte	.LVL103
 5648 04ab 0200     		.2byte	0x2
 5649 04ad 90       		.byte	0x90
 5650 04ae 55       		.uleb128 0x55
 5651 04af BE040000 		.4byte	.LVL105
 5652 04b3 36050000 		.4byte	.LVL113
 5653 04b7 0200     		.2byte	0x2
 5654 04b9 90       		.byte	0x90
 5655 04ba 55       		.uleb128 0x55
 5656 04bb AE050000 		.4byte	.LVL122
 5657 04bf DC050000 		.4byte	.LVL125
 5658 04c3 0200     		.2byte	0x2
 5659 04c5 90       		.byte	0x90
 5660 04c6 55       		.uleb128 0x55
 5661 04c7 66060000 		.4byte	.LVL137
 5662 04cb 94060000 		.4byte	.LVL140
 5663 04cf 0200     		.2byte	0x2
 5664 04d1 90       		.byte	0x90
 5665 04d2 55       		.uleb128 0x55
 5666 04d3 D0060000 		.4byte	.LVL144
 5667 04d7 00070000 		.4byte	.LVL148
 5668 04db 0200     		.2byte	0x2
 5669 04dd 90       		.byte	0x90
 5670 04de 55       		.uleb128 0x55
 5671 04df 00000000 		.4byte	0
 5672 04e3 00000000 		.4byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 117


 5673              	.LVUS32:
 5674 04e7 00       		.uleb128 .LVU396
 5675 04e8 00       		.uleb128 .LVU453
 5676 04e9 00       		.uleb128 .LVU461
 5677 04ea 00       		.uleb128 .LVU506
 5678 04eb 02       		.uleb128 .LVU554
 5679 04ec 00       		.uleb128 .LVU561
 5680 04ed 02       		.uleb128 .LVU607
 5681 04ee 00       		.uleb128 .LVU614
 5682 04ef 00       		.uleb128 .LVU634
 5683 04f0 00       		.uleb128 .LVU639
 5684              	.LLST32:
 5685 04f1 E4030000 		.4byte	.LVL85
 5686 04f5 9E040000 		.4byte	.LVL103
 5687 04f9 0200     		.2byte	0x2
 5688 04fb 90       		.byte	0x90
 5689 04fc 50       		.uleb128 0x50
 5690 04fd BE040000 		.4byte	.LVL105
 5691 0501 36050000 		.4byte	.LVL113
 5692 0505 0200     		.2byte	0x2
 5693 0507 90       		.byte	0x90
 5694 0508 50       		.uleb128 0x50
 5695 0509 AE050000 		.4byte	.LVL122
 5696 050d DC050000 		.4byte	.LVL125
 5697 0511 0200     		.2byte	0x2
 5698 0513 90       		.byte	0x90
 5699 0514 50       		.uleb128 0x50
 5700 0515 66060000 		.4byte	.LVL137
 5701 0519 94060000 		.4byte	.LVL140
 5702 051d 0200     		.2byte	0x2
 5703 051f 90       		.byte	0x90
 5704 0520 50       		.uleb128 0x50
 5705 0521 D4060000 		.4byte	.LVL145
 5706 0525 00070000 		.4byte	.LVL148
 5707 0529 0200     		.2byte	0x2
 5708 052b 90       		.byte	0x90
 5709 052c 50       		.uleb128 0x50
 5710 052d 00000000 		.4byte	0
 5711 0531 00000000 		.4byte	0
 5712              	.LVUS33:
 5713 0535 01       		.uleb128 .LVU397
 5714 0536 01       		.uleb128 .LVU404
 5715 0537 01       		.uleb128 .LVU404
 5716 0538 00       		.uleb128 .LVU411
 5717 0539 03       		.uleb128 .LVU555
 5718 053a 00       		.uleb128 .LVU561
 5719 053b 03       		.uleb128 .LVU608
 5720 053c 00       		.uleb128 .LVU614
 5721 053d 01       		.uleb128 .LVU635
 5722 053e 00       		.uleb128 .LVU639
 5723              	.LLST33:
 5724 053f E4030000 		.4byte	.LVL85
 5725 0543 08040000 		.4byte	.LVL88
 5726 0547 0200     		.2byte	0x2
 5727 0549 32       		.byte	0x32
 5728 054a 9F       		.byte	0x9f
 5729 054b 08040000 		.4byte	.LVL88
ARM GAS  /tmp/ccfh54Yn.s 			page 118


 5730 054f 14040000 		.4byte	.LVL89
 5731 0553 0300     		.2byte	0x3
 5732 0555 91       		.byte	0x91
 5733 0556 F47C     		.sleb128 -396
 5734 0558 AE050000 		.4byte	.LVL122
 5735 055c DC050000 		.4byte	.LVL125
 5736 0560 0200     		.2byte	0x2
 5737 0562 33       		.byte	0x33
 5738 0563 9F       		.byte	0x9f
 5739 0564 66060000 		.4byte	.LVL137
 5740 0568 94060000 		.4byte	.LVL140
 5741 056c 0200     		.2byte	0x2
 5742 056e 33       		.byte	0x33
 5743 056f 9F       		.byte	0x9f
 5744 0570 D4060000 		.4byte	.LVL145
 5745 0574 00070000 		.4byte	.LVL148
 5746 0578 0200     		.2byte	0x2
 5747 057a 32       		.byte	0x32
 5748 057b 9F       		.byte	0x9f
 5749 057c 00000000 		.4byte	0
 5750 0580 00000000 		.4byte	0
 5751              	.LVUS34:
 5752 0584 02       		.uleb128 .LVU398
 5753 0585 01       		.uleb128 .LVU404
 5754 0586 01       		.uleb128 .LVU404
 5755 0587 00       		.uleb128 .LVU442
 5756 0588 04       		.uleb128 .LVU556
 5757 0589 00       		.uleb128 .LVU561
 5758 058a 04       		.uleb128 .LVU609
 5759 058b 00       		.uleb128 .LVU614
 5760 058c 02       		.uleb128 .LVU636
 5761 058d 00       		.uleb128 .LVU639
 5762              	.LLST34:
 5763 058e E4030000 		.4byte	.LVL85
 5764 0592 08040000 		.4byte	.LVL88
 5765 0596 0200     		.2byte	0x2
 5766 0598 34       		.byte	0x34
 5767 0599 9F       		.byte	0x9f
 5768 059a 08040000 		.4byte	.LVL88
 5769 059e 60040000 		.4byte	.LVL98
 5770 05a2 0100     		.2byte	0x1
 5771 05a4 5A       		.byte	0x5a
 5772 05a5 AE050000 		.4byte	.LVL122
 5773 05a9 DC050000 		.4byte	.LVL125
 5774 05ad 0200     		.2byte	0x2
 5775 05af 31       		.byte	0x31
 5776 05b0 9F       		.byte	0x9f
 5777 05b1 66060000 		.4byte	.LVL137
 5778 05b5 94060000 		.4byte	.LVL140
 5779 05b9 0200     		.2byte	0x2
 5780 05bb 31       		.byte	0x31
 5781 05bc 9F       		.byte	0x9f
 5782 05bd D4060000 		.4byte	.LVL145
 5783 05c1 00070000 		.4byte	.LVL148
 5784 05c5 0200     		.2byte	0x2
 5785 05c7 34       		.byte	0x34
 5786 05c8 9F       		.byte	0x9f
ARM GAS  /tmp/ccfh54Yn.s 			page 119


 5787 05c9 00000000 		.4byte	0
 5788 05cd 00000000 		.4byte	0
 5789              	.LVUS35:
 5790 05d1 00       		.uleb128 .LVU431
 5791 05d2 00       		.uleb128 .LVU435
 5792 05d3 00       		.uleb128 .LVU436
 5793 05d4 00       		.uleb128 .LVU442
 5794              	.LLST35:
 5795 05d5 36040000 		.4byte	.LVL95
 5796 05d9 46040000 		.4byte	.LVL96
 5797 05dd 0100     		.2byte	0x1
 5798 05df 50       		.byte	0x50
 5799 05e0 52040000 		.4byte	.LVL97
 5800 05e4 60040000 		.4byte	.LVL98
 5801 05e8 0100     		.2byte	0x1
 5802 05ea 50       		.byte	0x50
 5803 05eb 00000000 		.4byte	0
 5804 05ef 00000000 		.4byte	0
 5805              	.LVUS36:
 5806 05f3 00       		.uleb128 .LVU442
 5807 05f4 00       		.uleb128 .LVU453
 5808 05f5 00       		.uleb128 .LVU461
 5809 05f6 00       		.uleb128 .LVU465
 5810 05f7 00       		.uleb128 .LVU465
 5811 05f8 07       		.uleb128 .LVU479
 5812 05f9 07       		.uleb128 .LVU479
 5813 05fa 00       		.uleb128 .LVU506
 5814              	.LLST36:
 5815 05fb 60040000 		.4byte	.LVL98
 5816 05ff 9E040000 		.4byte	.LVL103
 5817 0603 0100     		.2byte	0x1
 5818 0605 54       		.byte	0x54
 5819 0606 BE040000 		.4byte	.LVL105
 5820 060a CC040000 		.4byte	.LVL106
 5821 060e 0100     		.2byte	0x1
 5822 0610 54       		.byte	0x54
 5823 0611 CC040000 		.4byte	.LVL106
 5824 0615 FE040000 		.4byte	.LVL108
 5825 0619 0300     		.2byte	0x3
 5826 061b 74       		.byte	0x74
 5827 061c 7F       		.sleb128 -1
 5828 061d 9F       		.byte	0x9f
 5829 061e FE040000 		.4byte	.LVL108
 5830 0622 36050000 		.4byte	.LVL113
 5831 0626 0100     		.2byte	0x1
 5832 0628 54       		.byte	0x54
 5833 0629 00000000 		.4byte	0
 5834 062d 00000000 		.4byte	0
 5835              	.LVUS53:
 5836 0631 00       		.uleb128 .LVU552
 5837 0632 00       		.uleb128 .LVU557
 5838              	.LLST53:
 5839 0633 AE050000 		.4byte	.LVL122
 5840 0637 CE050000 		.4byte	.LVL123
 5841 063b 0200     		.2byte	0x2
 5842 063d 90       		.byte	0x90
 5843 063e 40       		.uleb128 0x40
ARM GAS  /tmp/ccfh54Yn.s 			page 120


 5844 063f 00000000 		.4byte	0
 5845 0643 00000000 		.4byte	0
 5846              	.LVUS55:
 5847 0647 00       		.uleb128 .LVU631
 5848 0648 00       		.uleb128 .LVU637
 5849              	.LLST55:
 5850 0649 D0060000 		.4byte	.LVL144
 5851 064d F4060000 		.4byte	.LVL146
 5852 0651 0200     		.2byte	0x2
 5853 0653 90       		.byte	0x90
 5854 0654 40       		.uleb128 0x40
 5855 0655 00000000 		.4byte	0
 5856 0659 00000000 		.4byte	0
 5857              	.LVUS54:
 5858 065d 00       		.uleb128 .LVU605
 5859 065e 00       		.uleb128 .LVU610
 5860              	.LLST54:
 5861 065f 66060000 		.4byte	.LVL137
 5862 0663 86060000 		.4byte	.LVL138
 5863 0667 0200     		.2byte	0x2
 5864 0669 90       		.byte	0x90
 5865 066a 40       		.uleb128 0x40
 5866 066b 00000000 		.4byte	0
 5867 066f 00000000 		.4byte	0
 5868              	.LVUS39:
 5869 0673 00       		.uleb128 .LVU389
 5870 0674 00       		.uleb128 .LVU399
 5871 0675 00       		.uleb128 .LVU399
 5872 0676 00       		.uleb128 .LVU402
 5873              	.LLST39:
 5874 0677 CC030000 		.4byte	.LVL83
 5875 067b FC030000 		.4byte	.LVL86
 5876 067f 0200     		.2byte	0x2
 5877 0681 90       		.byte	0x90
 5878 0682 40       		.uleb128 0x40
 5879 0683 FC030000 		.4byte	.LVL86
 5880 0687 05040000 		.4byte	.LVL87-1
 5881 068b 0200     		.2byte	0x2
 5882 068d 90       		.byte	0x90
 5883 068e 4F       		.uleb128 0x4f
 5884 068f 00000000 		.4byte	0
 5885 0693 00000000 		.4byte	0
 5886              	.LVUS44:
 5887 0697 00       		.uleb128 .LVU442
 5888 0698 02       		.uleb128 .LVU449
 5889 0699 02       		.uleb128 .LVU449
 5890 069a 00       		.uleb128 .LVU452
 5891 069b 00       		.uleb128 .LVU461
 5892 069c 00       		.uleb128 .LVU506
 5893              	.LLST44:
 5894 069d 60040000 		.4byte	.LVL98
 5895 06a1 90040000 		.4byte	.LVL101
 5896 06a5 0100     		.2byte	0x1
 5897 06a7 59       		.byte	0x59
 5898 06a8 90040000 		.4byte	.LVL101
 5899 06ac 9C040000 		.4byte	.LVL102
 5900 06b0 0300     		.2byte	0x3
ARM GAS  /tmp/ccfh54Yn.s 			page 121


 5901 06b2 79       		.byte	0x79
 5902 06b3 01       		.sleb128 1
 5903 06b4 9F       		.byte	0x9f
 5904 06b5 BE040000 		.4byte	.LVL105
 5905 06b9 36050000 		.4byte	.LVL113
 5906 06bd 0100     		.2byte	0x1
 5907 06bf 59       		.byte	0x59
 5908 06c0 00000000 		.4byte	0
 5909 06c4 00000000 		.4byte	0
 5910              	.LVUS45:
 5911 06c8 00       		.uleb128 .LVU445
 5912 06c9 00       		.uleb128 .LVU447
 5913 06ca 00       		.uleb128 .LVU461
 5914 06cb 00       		.uleb128 .LVU471
 5915              	.LLST45:
 5916 06cc 86040000 		.4byte	.LVL100
 5917 06d0 90040000 		.4byte	.LVL101
 5918 06d4 0200     		.2byte	0x2
 5919 06d6 90       		.byte	0x90
 5920 06d7 40       		.uleb128 0x40
 5921 06d8 BE040000 		.4byte	.LVL105
 5922 06dc E1040000 		.4byte	.LVL107-1
 5923 06e0 0200     		.2byte	0x2
 5924 06e2 90       		.byte	0x90
 5925 06e3 40       		.uleb128 0x40
 5926 06e4 00000000 		.4byte	0
 5927 06e8 00000000 		.4byte	0
 5928              	.LVUS46:
 5929 06ec 01       		.uleb128 .LVU473
 5930 06ed 05       		.uleb128 .LVU477
 5931              	.LLST46:
 5932 06ee FE040000 		.4byte	.LVL108
 5933 06f2 FE040000 		.4byte	.LVL108
 5934 06f6 0700     		.2byte	0x7
 5935 06f8 91       		.byte	0x91
 5936 06f9 F47C     		.sleb128 -396
 5937 06fb 06       		.byte	0x6
 5938 06fc 23       		.byte	0x23
 5939 06fd 3C       		.uleb128 0x3c
 5940 06fe 9F       		.byte	0x9f
 5941 06ff 00000000 		.4byte	0
 5942 0703 00000000 		.4byte	0
 5943              	.LVUS47:
 5944 0707 03       		.uleb128 .LVU475
 5945 0708 01       		.uleb128 .LVU496
 5946              	.LLST47:
 5947 0709 FE040000 		.4byte	.LVL108
 5948 070d 2C050000 		.4byte	.LVL111
 5949 0711 0700     		.2byte	0x7
 5950 0713 91       		.byte	0x91
 5951 0714 F47C     		.sleb128 -396
 5952 0716 06       		.byte	0x6
 5953 0717 23       		.byte	0x23
 5954 0718 3E       		.uleb128 0x3e
 5955 0719 9F       		.byte	0x9f
 5956 071a 00000000 		.4byte	0
 5957 071e 00000000 		.4byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 122


 5958              	.LVUS48:
 5959 0722 03       		.uleb128 .LVU475
 5960 0723 01       		.uleb128 .LVU496
 5961              	.LLST48:
 5962 0724 FE040000 		.4byte	.LVL108
 5963 0728 2C050000 		.4byte	.LVL111
 5964 072c 0700     		.2byte	0x7
 5965 072e 91       		.byte	0x91
 5966 072f F47C     		.sleb128 -396
 5967 0731 06       		.byte	0x6
 5968 0732 23       		.byte	0x23
 5969 0733 3C       		.uleb128 0x3c
 5970 0734 9F       		.byte	0x9f
 5971 0735 00000000 		.4byte	0
 5972 0739 00000000 		.4byte	0
 5973              	.LVUS49:
 5974 073d 00       		.uleb128 .LVU489
 5975 073e 00       		.uleb128 .LVU494
 5976 073f 00       		.uleb128 .LVU494
 5977 0740 01       		.uleb128 .LVU496
 5978              	.LLST49:
 5979 0741 18050000 		.4byte	.LVL109
 5980 0745 28050000 		.4byte	.LVL110
 5981 0749 0100     		.2byte	0x1
 5982 074b 53       		.byte	0x53
 5983 074c 28050000 		.4byte	.LVL110
 5984 0750 2C050000 		.4byte	.LVL111
 5985 0754 0600     		.2byte	0x6
 5986 0756 91       		.byte	0x91
 5987 0757 F47C     		.sleb128 -396
 5988 0759 06       		.byte	0x6
 5989 075a 23       		.byte	0x23
 5990 075b 3E       		.uleb128 0x3e
 5991 075c 00000000 		.4byte	0
 5992 0760 00000000 		.4byte	0
 5993              	.LVUS50:
 5994 0764 03       		.uleb128 .LVU498
 5995 0765 01       		.uleb128 .LVU504
 5996              	.LLST50:
 5997 0766 2C050000 		.4byte	.LVL111
 5998 076a 34050000 		.4byte	.LVL112
 5999 076e 0700     		.2byte	0x7
 6000 0770 91       		.byte	0x91
 6001 0771 F47C     		.sleb128 -396
 6002 0773 06       		.byte	0x6
 6003 0774 23       		.byte	0x23
 6004 0775 3F       		.uleb128 0x3f
 6005 0776 9F       		.byte	0x9f
 6006 0777 00000000 		.4byte	0
 6007 077b 00000000 		.4byte	0
 6008              	.LVUS51:
 6009 077f 03       		.uleb128 .LVU498
 6010 0780 01       		.uleb128 .LVU504
 6011              	.LLST51:
 6012 0781 2C050000 		.4byte	.LVL111
 6013 0785 34050000 		.4byte	.LVL112
 6014 0789 0700     		.2byte	0x7
ARM GAS  /tmp/ccfh54Yn.s 			page 123


 6015 078b 91       		.byte	0x91
 6016 078c F47C     		.sleb128 -396
 6017 078e 06       		.byte	0x6
 6018 078f 23       		.byte	0x23
 6019 0790 3D       		.uleb128 0x3d
 6020 0791 9F       		.byte	0x9f
 6021 0792 00000000 		.4byte	0
 6022 0796 00000000 		.4byte	0
 6023              	.LVUS52:
 6024 079a 05       		.uleb128 .LVU500
 6025 079b 01       		.uleb128 .LVU504
 6026              	.LLST52:
 6027 079c 2C050000 		.4byte	.LVL111
 6028 07a0 34050000 		.4byte	.LVL112
 6029 07a4 0100     		.2byte	0x1
 6030 07a6 51       		.byte	0x51
 6031 07a7 00000000 		.4byte	0
 6032 07ab 00000000 		.4byte	0
 6033              	.LVUS37:
 6034 07af 03       		.uleb128 .LVU358
 6035 07b0 05       		.uleb128 .LVU360
 6036 07b1 03       		.uleb128 .LVU514
 6037 07b2 00       		.uleb128 .LVU520
 6038 07b3 00       		.uleb128 .LVU520
 6039 07b4 00       		.uleb128 .LVU522
 6040 07b5 03       		.uleb128 .LVU566
 6041 07b6 00       		.uleb128 .LVU571
 6042 07b7 00       		.uleb128 .LVU571
 6043 07b8 00       		.uleb128 .LVU573
 6044 07b9 03       		.uleb128 .LVU649
 6045 07ba 00       		.uleb128 .LVU652
 6046              	.LLST37:
 6047 07bb 70030000 		.4byte	.LVL78
 6048 07bf 70030000 		.4byte	.LVL78
 6049 07c3 0400     		.2byte	0x4
 6050 07c5 91       		.byte	0x91
 6051 07c6 F87E     		.sleb128 -136
 6052 07c8 9F       		.byte	0x9f
 6053 07c9 4A050000 		.4byte	.LVL114
 6054 07cd 56050000 		.4byte	.LVL115
 6055 07d1 0400     		.2byte	0x4
 6056 07d3 91       		.byte	0x91
 6057 07d4 F87E     		.sleb128 -136
 6058 07d6 9F       		.byte	0x9f
 6059 07d7 56050000 		.4byte	.LVL115
 6060 07db 58050000 		.4byte	.LVL116
 6061 07df 0100     		.2byte	0x1
 6062 07e1 5B       		.byte	0x5b
 6063 07e2 FC050000 		.4byte	.LVL128
 6064 07e6 0A060000 		.4byte	.LVL129
 6065 07ea 0400     		.2byte	0x4
 6066 07ec 91       		.byte	0x91
 6067 07ed F87E     		.sleb128 -136
 6068 07ef 9F       		.byte	0x9f
 6069 07f0 0A060000 		.4byte	.LVL129
 6070 07f4 0C060000 		.4byte	.LVL130
 6071 07f8 0100     		.2byte	0x1
ARM GAS  /tmp/ccfh54Yn.s 			page 124


 6072 07fa 5B       		.byte	0x5b
 6073 07fb 48070000 		.4byte	.LVL155
 6074 07ff 4A070000 		.4byte	.LVL156
 6075 0803 0400     		.2byte	0x4
 6076 0805 91       		.byte	0x91
 6077 0806 F87E     		.sleb128 -136
 6078 0808 9F       		.byte	0x9f
 6079 0809 00000000 		.4byte	0
 6080 080d 00000000 		.4byte	0
 6081              	.LVUS38:
 6082 0811 07       		.uleb128 .LVU362
 6083 0812 09       		.uleb128 .LVU364
 6084 0813 02       		.uleb128 .LVU524
 6085 0814 00       		.uleb128 .LVU527
 6086 0815 02       		.uleb128 .LVU575
 6087 0816 00       		.uleb128 .LVU579
 6088 0817 02       		.uleb128 .LVU654
 6089 0818 00       		.uleb128 .LVU657
 6090              	.LLST38:
 6091 0819 70030000 		.4byte	.LVL78
 6092 081d 70030000 		.4byte	.LVL78
 6093 0821 0400     		.2byte	0x4
 6094 0823 91       		.byte	0x91
 6095 0824 847F     		.sleb128 -124
 6096 0826 9F       		.byte	0x9f
 6097 0827 58050000 		.4byte	.LVL116
 6098 082b 5A050000 		.4byte	.LVL117
 6099 082f 0400     		.2byte	0x4
 6100 0831 91       		.byte	0x91
 6101 0832 847F     		.sleb128 -124
 6102 0834 9F       		.byte	0x9f
 6103 0835 0C060000 		.4byte	.LVL130
 6104 0839 10060000 		.4byte	.LVL131
 6105 083d 0400     		.2byte	0x4
 6106 083f 91       		.byte	0x91
 6107 0840 847F     		.sleb128 -124
 6108 0842 9F       		.byte	0x9f
 6109 0843 4A070000 		.4byte	.LVL156
 6110 0847 4C070000 		.4byte	.LVL157
 6111 084b 0400     		.2byte	0x4
 6112 084d 91       		.byte	0x91
 6113 084e 847F     		.sleb128 -124
 6114 0850 9F       		.byte	0x9f
 6115 0851 00000000 		.4byte	0
 6116 0855 00000000 		.4byte	0
 6117              	.LVUS40:
 6118 0859 04       		.uleb128 .LVU407
 6119 085a 00       		.uleb128 .LVU412
 6120              	.LLST40:
 6121 085b 08040000 		.4byte	.LVL88
 6122 085f 16040000 		.4byte	.LVL90
 6123 0863 0400     		.2byte	0x4
 6124 0865 91       		.byte	0x91
 6125 0866 907F     		.sleb128 -112
 6126 0868 9F       		.byte	0x9f
 6127 0869 00000000 		.4byte	0
 6128 086d 00000000 		.4byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 125


 6129              	.LVUS41:
 6130 0871 02       		.uleb128 .LVU414
 6131 0872 00       		.uleb128 .LVU417
 6132              	.LLST41:
 6133 0873 16040000 		.4byte	.LVL90
 6134 0877 18040000 		.4byte	.LVL91
 6135 087b 0400     		.2byte	0x4
 6136 087d 91       		.byte	0x91
 6137 087e 9C7F     		.sleb128 -100
 6138 0880 9F       		.byte	0x9f
 6139 0881 00000000 		.4byte	0
 6140 0885 00000000 		.4byte	0
 6141              	.LVUS42:
 6142 0889 02       		.uleb128 .LVU419
 6143 088a 00       		.uleb128 .LVU422
 6144              	.LLST42:
 6145 088b 18040000 		.4byte	.LVL91
 6146 088f 1A040000 		.4byte	.LVL92
 6147 0893 0400     		.2byte	0x4
 6148 0895 91       		.byte	0x91
 6149 0896 A87F     		.sleb128 -88
 6150 0898 9F       		.byte	0x9f
 6151 0899 00000000 		.4byte	0
 6152 089d 00000000 		.4byte	0
 6153              	.LVUS43:
 6154 08a1 02       		.uleb128 .LVU424
 6155 08a2 00       		.uleb128 .LVU427
 6156              	.LLST43:
 6157 08a3 1A040000 		.4byte	.LVL92
 6158 08a7 1C040000 		.4byte	.LVL93
 6159 08ab 0400     		.2byte	0x4
 6160 08ad 91       		.byte	0x91
 6161 08ae B47F     		.sleb128 -76
 6162 08b0 9F       		.byte	0x9f
 6163 08b1 00000000 		.4byte	0
 6164 08b5 00000000 		.4byte	0
 6165              	.LLST0:
 6166 08b9 00000000 		.4byte	.LFB4
 6167 08bd 12000000 		.4byte	.LCFI0
 6168 08c1 0200     		.2byte	0x2
 6169 08c3 7D       		.byte	0x7d
 6170 08c4 00       		.sleb128 0
 6171 08c5 12000000 		.4byte	.LCFI0
 6172 08c9 16000000 		.4byte	.LCFI1
 6173 08cd 0200     		.2byte	0x2
 6174 08cf 7D       		.byte	0x7d
 6175 08d0 0C       		.sleb128 12
 6176 08d1 16000000 		.4byte	.LCFI1
 6177 08d5 18000000 		.4byte	.LCFI2
 6178 08d9 0200     		.2byte	0x2
 6179 08db 7D       		.byte	0x7d
 6180 08dc 14       		.sleb128 20
 6181 08dd 18000000 		.4byte	.LCFI2
 6182 08e1 4C010000 		.4byte	.LCFI3
 6183 08e5 0300     		.2byte	0x3
 6184 08e7 7D       		.byte	0x7d
 6185 08e8 F800     		.sleb128 120
ARM GAS  /tmp/ccfh54Yn.s 			page 126


 6186 08ea 4C010000 		.4byte	.LCFI3
 6187 08ee 50010000 		.4byte	.LCFI4
 6188 08f2 0200     		.2byte	0x2
 6189 08f4 7D       		.byte	0x7d
 6190 08f5 14       		.sleb128 20
 6191 08f6 50010000 		.4byte	.LCFI4
 6192 08fa 52010000 		.4byte	.LCFI5
 6193 08fe 0200     		.2byte	0x2
 6194 0900 7D       		.byte	0x7d
 6195 0901 0C       		.sleb128 12
 6196 0902 52010000 		.4byte	.LCFI5
 6197 0906 9E010000 		.4byte	.LFE4
 6198 090a 0300     		.2byte	0x3
 6199 090c 7D       		.byte	0x7d
 6200 090d F800     		.sleb128 120
 6201 090f 00000000 		.4byte	0
 6202 0913 00000000 		.4byte	0
 6203              	.LVUS1:
 6204 0917 00       		.uleb128 0
 6205 0918 00       		.uleb128 .LVU11
 6206 0919 00       		.uleb128 .LVU11
 6207 091a 00       		.uleb128 0
 6208              	.LLST1:
 6209 091b 00000000 		.4byte	.LVL0
 6210 091f 4D000000 		.4byte	.LVL2-1
 6211 0923 0100     		.2byte	0x1
 6212 0925 50       		.byte	0x50
 6213 0926 4D000000 		.4byte	.LVL2-1
 6214 092a 9E010000 		.4byte	.LFE4
 6215 092e 0100     		.2byte	0x1
 6216 0930 54       		.byte	0x54
 6217 0931 00000000 		.4byte	0
 6218 0935 00000000 		.4byte	0
 6219              	.LVUS2:
 6220 0939 00       		.uleb128 .LVU9
 6221 093a 00       		.uleb128 .LVU57
 6222 093b 00       		.uleb128 .LVU62
 6223 093c 00       		.uleb128 .LVU64
 6224 093d 00       		.uleb128 .LVU64
 6225 093e 00       		.uleb128 .LVU80
 6226 093f 00       		.uleb128 .LVU80
 6227 0940 00       		.uleb128 .LVU82
 6228 0941 00       		.uleb128 .LVU82
 6229 0942 00       		.uleb128 0
 6230              	.LLST2:
 6231 0943 4A000000 		.4byte	.LVL1
 6232 0947 DA000000 		.4byte	.LVL8
 6233 094b 0800     		.2byte	0x8
 6234 094d 90       		.byte	0x90
 6235 094e 51       		.uleb128 0x51
 6236 094f 93       		.byte	0x93
 6237 0950 04       		.uleb128 0x4
 6238 0951 90       		.byte	0x90
 6239 0952 50       		.uleb128 0x50
 6240 0953 93       		.byte	0x93
 6241 0954 04       		.uleb128 0x4
 6242 0955 52010000 		.4byte	.LVL13
ARM GAS  /tmp/ccfh54Yn.s 			page 127


 6243 0959 56010000 		.4byte	.LVL14
 6244 095d 0800     		.2byte	0x8
 6245 095f 90       		.byte	0x90
 6246 0960 51       		.uleb128 0x51
 6247 0961 93       		.byte	0x93
 6248 0962 04       		.uleb128 0x4
 6249 0963 90       		.byte	0x90
 6250 0964 50       		.uleb128 0x50
 6251 0965 93       		.byte	0x93
 6252 0966 04       		.uleb128 0x4
 6253 0967 56010000 		.4byte	.LVL14
 6254 096b 78010000 		.4byte	.LVL15
 6255 096f 0600     		.2byte	0x6
 6256 0971 93       		.byte	0x93
 6257 0972 04       		.uleb128 0x4
 6258 0973 90       		.byte	0x90
 6259 0974 50       		.uleb128 0x50
 6260 0975 93       		.byte	0x93
 6261 0976 04       		.uleb128 0x4
 6262 0977 78010000 		.4byte	.LVL15
 6263 097b 7C010000 		.4byte	.LVL16
 6264 097f 0800     		.2byte	0x8
 6265 0981 90       		.byte	0x90
 6266 0982 51       		.uleb128 0x51
 6267 0983 93       		.byte	0x93
 6268 0984 04       		.uleb128 0x4
 6269 0985 90       		.byte	0x90
 6270 0986 50       		.uleb128 0x50
 6271 0987 93       		.byte	0x93
 6272 0988 04       		.uleb128 0x4
 6273 0989 7C010000 		.4byte	.LVL16
 6274 098d 9E010000 		.4byte	.LFE4
 6275 0991 0600     		.2byte	0x6
 6276 0993 90       		.byte	0x90
 6277 0994 51       		.uleb128 0x51
 6278 0995 93       		.byte	0x93
 6279 0996 04       		.uleb128 0x4
 6280 0997 93       		.byte	0x93
 6281 0998 04       		.uleb128 0x4
 6282 0999 00000000 		.4byte	0
 6283 099d 00000000 		.4byte	0
 6284              	.LLST11:
 6285 09a1 00000000 		.4byte	.LFB3
 6286 09a5 04000000 		.4byte	.LCFI8
 6287 09a9 0200     		.2byte	0x2
 6288 09ab 7D       		.byte	0x7d
 6289 09ac 00       		.sleb128 0
 6290 09ad 04000000 		.4byte	.LCFI8
 6291 09b1 08000000 		.4byte	.LCFI9
 6292 09b5 0200     		.2byte	0x2
 6293 09b7 7D       		.byte	0x7d
 6294 09b8 18       		.sleb128 24
 6295 09b9 08000000 		.4byte	.LCFI9
 6296 09bd 0A000000 		.4byte	.LCFI10
 6297 09c1 0200     		.2byte	0x2
 6298 09c3 7D       		.byte	0x7d
 6299 09c4 20       		.sleb128 32
ARM GAS  /tmp/ccfh54Yn.s 			page 128


 6300 09c5 0A000000 		.4byte	.LCFI10
 6301 09c9 86000000 		.4byte	.LCFI11
 6302 09cd 0200     		.2byte	0x2
 6303 09cf 7D       		.byte	0x7d
 6304 09d0 38       		.sleb128 56
 6305 09d1 86000000 		.4byte	.LCFI11
 6306 09d5 8A000000 		.4byte	.LCFI12
 6307 09d9 0200     		.2byte	0x2
 6308 09db 7D       		.byte	0x7d
 6309 09dc 20       		.sleb128 32
 6310 09dd 8A000000 		.4byte	.LCFI12
 6311 09e1 8E000000 		.4byte	.LCFI13
 6312 09e5 0200     		.2byte	0x2
 6313 09e7 7D       		.byte	0x7d
 6314 09e8 18       		.sleb128 24
 6315 09e9 8E000000 		.4byte	.LCFI13
 6316 09ed 06010000 		.4byte	.LCFI14
 6317 09f1 0200     		.2byte	0x2
 6318 09f3 7D       		.byte	0x7d
 6319 09f4 38       		.sleb128 56
 6320 09f5 06010000 		.4byte	.LCFI14
 6321 09f9 0A010000 		.4byte	.LCFI15
 6322 09fd 0200     		.2byte	0x2
 6323 09ff 7D       		.byte	0x7d
 6324 0a00 20       		.sleb128 32
 6325 0a01 0A010000 		.4byte	.LCFI15
 6326 0a05 0E010000 		.4byte	.LCFI16
 6327 0a09 0200     		.2byte	0x2
 6328 0a0b 7D       		.byte	0x7d
 6329 0a0c 18       		.sleb128 24
 6330 0a0d 0E010000 		.4byte	.LCFI16
 6331 0a11 1C010000 		.4byte	.LFE3
 6332 0a15 0200     		.2byte	0x2
 6333 0a17 7D       		.byte	0x7d
 6334 0a18 38       		.sleb128 56
 6335 0a19 00000000 		.4byte	0
 6336 0a1d 00000000 		.4byte	0
 6337              	.LVUS12:
 6338 0a21 00       		.uleb128 0
 6339 0a22 00       		.uleb128 .LVU145
 6340 0a23 00       		.uleb128 .LVU145
 6341 0a24 00       		.uleb128 .LVU178
 6342 0a25 00       		.uleb128 .LVU178
 6343 0a26 00       		.uleb128 0
 6344              	.LLST12:
 6345 0a27 00000000 		.4byte	.LVL23
 6346 0a2b 2B000000 		.4byte	.LVL25-1
 6347 0a2f 0100     		.2byte	0x1
 6348 0a31 50       		.byte	0x50
 6349 0a32 2B000000 		.4byte	.LVL25-1
 6350 0a36 DE000000 		.4byte	.LVL39
 6351 0a3a 0100     		.2byte	0x1
 6352 0a3c 55       		.byte	0x55
 6353 0a3d DE000000 		.4byte	.LVL39
 6354 0a41 1C010000 		.4byte	.LFE3
 6355 0a45 0400     		.2byte	0x4
 6356 0a47 F3       		.byte	0xf3
ARM GAS  /tmp/ccfh54Yn.s 			page 129


 6357 0a48 01       		.uleb128 0x1
 6358 0a49 50       		.byte	0x50
 6359 0a4a 9F       		.byte	0x9f
 6360 0a4b 00000000 		.4byte	0
 6361 0a4f 00000000 		.4byte	0
 6362              	.LVUS13:
 6363 0a53 00       		.uleb128 0
 6364 0a54 00       		.uleb128 .LVU145
 6365 0a55 00       		.uleb128 .LVU145
 6366 0a56 00       		.uleb128 0
 6367              	.LLST13:
 6368 0a57 00000000 		.4byte	.LVL23
 6369 0a5b 2B000000 		.4byte	.LVL25-1
 6370 0a5f 0100     		.2byte	0x1
 6371 0a61 51       		.byte	0x51
 6372 0a62 2B000000 		.4byte	.LVL25-1
 6373 0a66 1C010000 		.4byte	.LFE3
 6374 0a6a 0100     		.2byte	0x1
 6375 0a6c 54       		.byte	0x54
 6376 0a6d 00000000 		.4byte	0
 6377 0a71 00000000 		.4byte	0
 6378              	.LVUS14:
 6379 0a75 00       		.uleb128 0
 6380 0a76 00       		.uleb128 .LVU142
 6381 0a77 00       		.uleb128 .LVU142
 6382 0a78 00       		.uleb128 .LVU173
 6383 0a79 00       		.uleb128 .LVU173
 6384 0a7a 00       		.uleb128 0
 6385              	.LLST14:
 6386 0a7b 00000000 		.4byte	.LVL23
 6387 0a7f 18000000 		.4byte	.LVL24
 6388 0a83 0200     		.2byte	0x2
 6389 0a85 90       		.byte	0x90
 6390 0a86 42       		.uleb128 0x42
 6391 0a87 18000000 		.4byte	.LVL24
 6392 0a8b AE000000 		.4byte	.LVL36
 6393 0a8f 0200     		.2byte	0x2
 6394 0a91 90       		.byte	0x90
 6395 0a92 51       		.uleb128 0x51
 6396 0a93 AE000000 		.4byte	.LVL36
 6397 0a97 1C010000 		.4byte	.LFE3
 6398 0a9b 0600     		.2byte	0x6
 6399 0a9d F3       		.byte	0xf3
 6400 0a9e 03       		.uleb128 0x3
 6401 0a9f F5       		.byte	0xf5
 6402 0aa0 42       		.uleb128 0x42
 6403 0aa1 29       		.uleb128 0x29
 6404 0aa2 9F       		.byte	0x9f
 6405 0aa3 00000000 		.4byte	0
 6406 0aa7 00000000 		.4byte	0
 6407              	.LVUS15:
 6408 0aab 00       		.uleb128 0
 6409 0aac 00       		.uleb128 .LVU145
 6410 0aad 00       		.uleb128 .LVU145
 6411 0aae 00       		.uleb128 0
 6412              	.LLST15:
 6413 0aaf 00000000 		.4byte	.LVL23
ARM GAS  /tmp/ccfh54Yn.s 			page 130


 6414 0ab3 2B000000 		.4byte	.LVL25-1
 6415 0ab7 0100     		.2byte	0x1
 6416 0ab9 52       		.byte	0x52
 6417 0aba 2B000000 		.4byte	.LVL25-1
 6418 0abe 1C010000 		.4byte	.LFE3
 6419 0ac2 0400     		.2byte	0x4
 6420 0ac4 F3       		.byte	0xf3
 6421 0ac5 01       		.uleb128 0x1
 6422 0ac6 52       		.byte	0x52
 6423 0ac7 9F       		.byte	0x9f
 6424 0ac8 00000000 		.4byte	0
 6425 0acc 00000000 		.4byte	0
 6426              	.LVUS16:
 6427 0ad0 02       		.uleb128 .LVU136
 6428 0ad1 00       		.uleb128 .LVU154
 6429 0ad2 00       		.uleb128 .LVU154
 6430 0ad3 01       		.uleb128 .LVU157
 6431 0ad4 01       		.uleb128 .LVU157
 6432 0ad5 00       		.uleb128 .LVU158
 6433 0ad6 00       		.uleb128 .LVU158
 6434 0ad7 00       		.uleb128 .LVU164
 6435 0ad8 00       		.uleb128 .LVU164
 6436 0ad9 01       		.uleb128 .LVU165
 6437 0ada 01       		.uleb128 .LVU165
 6438 0adb 00       		.uleb128 .LVU168
 6439 0adc 00       		.uleb128 .LVU168
 6440 0add 00       		.uleb128 0
 6441              	.LLST16:
 6442 0ade 00000000 		.4byte	.LVL23
 6443 0ae2 58000000 		.4byte	.LVL29
 6444 0ae6 0200     		.2byte	0x2
 6445 0ae8 30       		.byte	0x30
 6446 0ae9 9F       		.byte	0x9f
 6447 0aea 58000000 		.4byte	.LVL29
 6448 0aee 62000000 		.4byte	.LVL30
 6449 0af2 0100     		.2byte	0x1
 6450 0af4 56       		.byte	0x56
 6451 0af5 62000000 		.4byte	.LVL30
 6452 0af9 68000000 		.4byte	.LVL31
 6453 0afd 0300     		.2byte	0x3
 6454 0aff 76       		.byte	0x76
 6455 0b00 01       		.sleb128 1
 6456 0b01 9F       		.byte	0x9f
 6457 0b02 68000000 		.4byte	.LVL31
 6458 0b06 8E000000 		.4byte	.LVL33
 6459 0b0a 0100     		.2byte	0x1
 6460 0b0c 56       		.byte	0x56
 6461 0b0d 8E000000 		.4byte	.LVL33
 6462 0b11 8E000000 		.4byte	.LVL33
 6463 0b15 0200     		.2byte	0x2
 6464 0b17 30       		.byte	0x30
 6465 0b18 9F       		.byte	0x9f
 6466 0b19 8E000000 		.4byte	.LVL33
 6467 0b1d 9A000000 		.4byte	.LVL34
 6468 0b21 0200     		.2byte	0x2
 6469 0b23 31       		.byte	0x31
 6470 0b24 9F       		.byte	0x9f
ARM GAS  /tmp/ccfh54Yn.s 			page 131


 6471 0b25 9A000000 		.4byte	.LVL34
 6472 0b29 1C010000 		.4byte	.LFE3
 6473 0b2d 0100     		.2byte	0x1
 6474 0b2f 56       		.byte	0x56
 6475 0b30 00000000 		.4byte	0
 6476 0b34 00000000 		.4byte	0
 6477              	.LVUS17:
 6478 0b38 00       		.uleb128 .LVU148
 6479 0b39 00       		.uleb128 .LVU163
 6480 0b3a 00       		.uleb128 .LVU164
 6481 0b3b 00       		.uleb128 .LVU195
 6482 0b3c 00       		.uleb128 .LVU196
 6483 0b3d 00       		.uleb128 0
 6484              	.LLST17:
 6485 0b3e 40000000 		.4byte	.LVL26
 6486 0b42 8A000000 		.4byte	.LVL32
 6487 0b46 0200     		.2byte	0x2
 6488 0b48 90       		.byte	0x90
 6489 0b49 50       		.uleb128 0x50
 6490 0b4a 8E000000 		.4byte	.LVL33
 6491 0b4e 0A010000 		.4byte	.LVL42
 6492 0b52 0200     		.2byte	0x2
 6493 0b54 90       		.byte	0x90
 6494 0b55 50       		.uleb128 0x50
 6495 0b56 0E010000 		.4byte	.LVL43
 6496 0b5a 1C010000 		.4byte	.LFE3
 6497 0b5e 0200     		.2byte	0x2
 6498 0b60 90       		.byte	0x90
 6499 0b61 50       		.uleb128 0x50
 6500 0b62 00000000 		.4byte	0
 6501 0b66 00000000 		.4byte	0
 6502              	.LVUS18:
 6503 0b6a 00       		.uleb128 .LVU151
 6504 0b6b 00       		.uleb128 .LVU171
 6505              	.LLST18:
 6506 0b6c 4C000000 		.4byte	.LVL28
 6507 0b70 A6000000 		.4byte	.LVL35
 6508 0b74 0200     		.2byte	0x2
 6509 0b76 90       		.byte	0x90
 6510 0b77 40       		.uleb128 0x40
 6511 0b78 00000000 		.4byte	0
 6512 0b7c 00000000 		.4byte	0
 6513              	.LVUS19:
 6514 0b80 00       		.uleb128 .LVU173
 6515 0b81 00       		.uleb128 0
 6516              	.LLST19:
 6517 0b82 AE000000 		.4byte	.LVL36
 6518 0b86 1C010000 		.4byte	.LFE3
 6519 0b8a 0200     		.2byte	0x2
 6520 0b8c 90       		.byte	0x90
 6521 0b8d 51       		.uleb128 0x51
 6522 0b8e 00000000 		.4byte	0
 6523 0b92 00000000 		.4byte	0
 6524              	.LVUS3:
 6525 0b96 00       		.uleb128 .LVU105
 6526 0b97 00       		.uleb128 0
 6527              	.LLST3:
ARM GAS  /tmp/ccfh54Yn.s 			page 132


 6528 0b98 02000000 		.4byte	.LVL19
 6529 0b9c 0A000000 		.4byte	.LFE1
 6530 0ba0 0100     		.2byte	0x1
 6531 0ba2 53       		.byte	0x53
 6532 0ba3 00000000 		.4byte	0
 6533 0ba7 00000000 		.4byte	0
 6534              	.LLST4:
 6535 0bab 00000000 		.4byte	.LFB2
 6536 0baf 0C000000 		.4byte	.LCFI6
 6537 0bb3 0200     		.2byte	0x2
 6538 0bb5 7D       		.byte	0x7d
 6539 0bb6 00       		.sleb128 0
 6540 0bb7 0C000000 		.4byte	.LCFI6
 6541 0bbb 16000000 		.4byte	.LCFI7
 6542 0bbf 0200     		.2byte	0x2
 6543 0bc1 7D       		.byte	0x7d
 6544 0bc2 04       		.sleb128 4
 6545 0bc3 16000000 		.4byte	.LCFI7
 6546 0bc7 18000000 		.4byte	.LFE2
 6547 0bcb 0200     		.2byte	0x2
 6548 0bcd 7D       		.byte	0x7d
 6549 0bce 00       		.sleb128 0
 6550 0bcf 00000000 		.4byte	0
 6551 0bd3 00000000 		.4byte	0
 6552              	.LVUS5:
 6553 0bd7 02       		.uleb128 .LVU113
 6554 0bd8 01       		.uleb128 .LVU126
 6555              	.LLST5:
 6556 0bd9 00000000 		.4byte	.LVL20
 6557 0bdd 12000000 		.4byte	.LVL22
 6558 0be1 0300     		.2byte	0x3
 6559 0be3 70       		.byte	0x70
 6560 0be4 02       		.sleb128 2
 6561 0be5 9F       		.byte	0x9f
 6562 0be6 00000000 		.4byte	0
 6563 0bea 00000000 		.4byte	0
 6564              	.LVUS6:
 6565 0bee 02       		.uleb128 .LVU113
 6566 0bef 01       		.uleb128 .LVU126
 6567              	.LLST6:
 6568 0bf0 00000000 		.4byte	.LVL20
 6569 0bf4 12000000 		.4byte	.LVL22
 6570 0bf8 0100     		.2byte	0x1
 6571 0bfa 50       		.byte	0x50
 6572 0bfb 00000000 		.4byte	0
 6573 0bff 00000000 		.4byte	0
 6574              	.LVUS7:
 6575 0c03 00       		.uleb128 .LVU116
 6576 0c04 01       		.uleb128 .LVU126
 6577              	.LLST7:
 6578 0c05 02000000 		.4byte	.LVL21
 6579 0c09 12000000 		.4byte	.LVL22
 6580 0c0d 0100     		.2byte	0x1
 6581 0c0f 51       		.byte	0x51
 6582 0c10 00000000 		.4byte	0
 6583 0c14 00000000 		.4byte	0
 6584              	.LVUS8:
ARM GAS  /tmp/ccfh54Yn.s 			page 133


 6585 0c18 03       		.uleb128 .LVU128
 6586 0c19 07       		.uleb128 .LVU132
 6587              	.LLST8:
 6588 0c1a 12000000 		.4byte	.LVL22
 6589 0c1e 12000000 		.4byte	.LVL22
 6590 0c22 0300     		.2byte	0x3
 6591 0c24 70       		.byte	0x70
 6592 0c25 03       		.sleb128 3
 6593 0c26 9F       		.byte	0x9f
 6594 0c27 00000000 		.4byte	0
 6595 0c2b 00000000 		.4byte	0
 6596              	.LVUS9:
 6597 0c2f 03       		.uleb128 .LVU128
 6598 0c30 07       		.uleb128 .LVU132
 6599              	.LLST9:
 6600 0c31 12000000 		.4byte	.LVL22
 6601 0c35 12000000 		.4byte	.LVL22
 6602 0c39 0300     		.2byte	0x3
 6603 0c3b 70       		.byte	0x70
 6604 0c3c 01       		.sleb128 1
 6605 0c3d 9F       		.byte	0x9f
 6606 0c3e 00000000 		.4byte	0
 6607 0c42 00000000 		.4byte	0
 6608              	.LVUS10:
 6609 0c46 05       		.uleb128 .LVU130
 6610 0c47 07       		.uleb128 .LVU132
 6611              	.LLST10:
 6612 0c48 12000000 		.4byte	.LVL22
 6613 0c4c 12000000 		.4byte	.LVL22
 6614 0c50 0100     		.2byte	0x1
 6615 0c52 53       		.byte	0x53
 6616 0c53 00000000 		.4byte	0
 6617 0c57 00000000 		.4byte	0
 6618              		.section	.debug_aranges,"",%progbits
 6619 0000 44000000 		.4byte	0x44
 6620 0004 0200     		.2byte	0x2
 6621 0006 00000000 		.4byte	.Ldebug_info0
 6622 000a 04       		.byte	0x4
 6623 000b 00       		.byte	0
 6624 000c 0000     		.2byte	0
 6625 000e 0000     		.2byte	0
 6626 0010 00000000 		.4byte	.LFB4
 6627 0014 9E010000 		.4byte	.LFE4-.LFB4
 6628 0018 00000000 		.4byte	.LFB0
 6629 001c 06000000 		.4byte	.LFE0-.LFB0
 6630 0020 00000000 		.4byte	.LFB1
 6631 0024 0A000000 		.4byte	.LFE1-.LFB1
 6632 0028 00000000 		.4byte	.LFB2
 6633 002c 18000000 		.4byte	.LFE2-.LFB2
 6634 0030 00000000 		.4byte	.LFB3
 6635 0034 1C010000 		.4byte	.LFE3-.LFB3
 6636 0038 00000000 		.4byte	.LFB5
 6637 003c 4E070000 		.4byte	.LFE5-.LFB5
 6638 0040 00000000 		.4byte	0
 6639 0044 00000000 		.4byte	0
 6640              		.section	.debug_ranges,"",%progbits
 6641              	.Ldebug_ranges0:
ARM GAS  /tmp/ccfh54Yn.s 			page 134


 6642 0000 00000000 		.4byte	.LBB30
 6643 0004 02000000 		.4byte	.LBE30
 6644 0008 0C000000 		.4byte	.LBB36
 6645 000c 12000000 		.4byte	.LBE36
 6646 0010 00000000 		.4byte	0
 6647 0014 00000000 		.4byte	0
 6648 0018 02000000 		.4byte	.LBB33
 6649 001c 0A000000 		.4byte	.LBE33
 6650 0020 12000000 		.4byte	.LBB37
 6651 0024 12000000 		.4byte	.LBE37
 6652 0028 00000000 		.4byte	0
 6653 002c 00000000 		.4byte	0
 6654 0030 9A000000 		.4byte	.LBB38
 6655 0034 02010000 		.4byte	.LBE38
 6656 0038 0E010000 		.4byte	.LBB39
 6657 003c 1C010000 		.4byte	.LBE39
 6658 0040 00000000 		.4byte	0
 6659 0044 00000000 		.4byte	0
 6660 0048 62030000 		.4byte	.LBB40
 6661 004c 64030000 		.4byte	.LBE40
 6662 0050 68030000 		.4byte	.LBB50
 6663 0054 6A030000 		.4byte	.LBE50
 6664 0058 70030000 		.4byte	.LBB58
 6665 005c 70030000 		.4byte	.LBE58
 6666 0060 4A050000 		.4byte	.LBB96
 6667 0064 4C050000 		.4byte	.LBE96
 6668 0068 56050000 		.4byte	.LBB98
 6669 006c 58050000 		.4byte	.LBE98
 6670 0070 FC050000 		.4byte	.LBB102
 6671 0074 FE050000 		.4byte	.LBE102
 6672 0078 0A060000 		.4byte	.LBB104
 6673 007c 0C060000 		.4byte	.LBE104
 6674 0080 3E070000 		.4byte	.LBB109
 6675 0084 40070000 		.4byte	.LBE109
 6676 0088 48070000 		.4byte	.LBB110
 6677 008c 4A070000 		.4byte	.LBE110
 6678 0090 00000000 		.4byte	0
 6679 0094 00000000 		.4byte	0
 6680 0098 6A030000 		.4byte	.LBB51
 6681 009c 6C030000 		.4byte	.LBE51
 6682 00a0 70030000 		.4byte	.LBB59
 6683 00a4 70030000 		.4byte	.LBE59
 6684 00a8 58050000 		.4byte	.LBB99
 6685 00ac 5A050000 		.4byte	.LBE99
 6686 00b0 0C060000 		.4byte	.LBB105
 6687 00b4 0C060000 		.4byte	.LBE105
 6688 00b8 0E060000 		.4byte	.LBB106
 6689 00bc 10060000 		.4byte	.LBE106
 6690 00c0 4A070000 		.4byte	.LBB111
 6691 00c4 4C070000 		.4byte	.LBE111
 6692 00c8 00000000 		.4byte	0
 6693 00cc 00000000 		.4byte	0
 6694 00d0 70030000 		.4byte	.LBB60
 6695 00d4 7C030000 		.4byte	.LBE60
 6696 00d8 7E030000 		.4byte	.LBB61
 6697 00dc 08040000 		.4byte	.LBE61
 6698 00e0 00000000 		.4byte	0
ARM GAS  /tmp/ccfh54Yn.s 			page 135


 6699 00e4 00000000 		.4byte	0
 6700 00e8 08040000 		.4byte	.LBB62
 6701 00ec 0A040000 		.4byte	.LBE62
 6702 00f0 14040000 		.4byte	.LBB65
 6703 00f4 16040000 		.4byte	.LBE65
 6704 00f8 00000000 		.4byte	0
 6705 00fc 00000000 		.4byte	0
 6706 0100 58040000 		.4byte	.LBB72
 6707 0104 5C040000 		.4byte	.LBE72
 6708 0108 5E040000 		.4byte	.LBB94
 6709 010c 9E040000 		.4byte	.LBE94
 6710 0110 BE040000 		.4byte	.LBB95
 6711 0114 36050000 		.4byte	.LBE95
 6712 0118 00000000 		.4byte	0
 6713 011c 00000000 		.4byte	0
 6714 0120 58040000 		.4byte	.LBB73
 6715 0124 5A040000 		.4byte	.LBE73
 6716 0128 5E040000 		.4byte	.LBB92
 6717 012c 90040000 		.4byte	.LBE92
 6718 0130 BE040000 		.4byte	.LBB93
 6719 0134 36050000 		.4byte	.LBE93
 6720 0138 00000000 		.4byte	0
 6721 013c 00000000 		.4byte	0
 6722 0140 FE040000 		.4byte	.LBB74
 6723 0144 FE040000 		.4byte	.LBE74
 6724 0148 14050000 		.4byte	.LBB91
 6725 014c 36050000 		.4byte	.LBE91
 6726 0150 00000000 		.4byte	0
 6727 0154 00000000 		.4byte	0
 6728 0158 FE040000 		.4byte	.LBB76
 6729 015c FE040000 		.4byte	.LBE76
 6730 0160 14050000 		.4byte	.LBB81
 6731 0164 1C050000 		.4byte	.LBE81
 6732 0168 20050000 		.4byte	.LBB86
 6733 016c 24050000 		.4byte	.LBE86
 6734 0170 28050000 		.4byte	.LBB88
 6735 0174 2C050000 		.4byte	.LBE88
 6736 0178 00000000 		.4byte	0
 6737 017c 00000000 		.4byte	0
 6738 0180 1C050000 		.4byte	.LBB82
 6739 0184 20050000 		.4byte	.LBE82
 6740 0188 24050000 		.4byte	.LBB87
 6741 018c 28050000 		.4byte	.LBE87
 6742 0190 2C050000 		.4byte	.LBB89
 6743 0194 34050000 		.4byte	.LBE89
 6744 0198 00000000 		.4byte	0
 6745 019c 00000000 		.4byte	0
 6746 01a0 4E050000 		.4byte	.LBB97
 6747 01a4 56050000 		.4byte	.LBE97
 6748 01a8 5A050000 		.4byte	.LBB100
 6749 01ac 70050000 		.4byte	.LBE100
 6750 01b0 74050000 		.4byte	.LBB101
 6751 01b4 D8050000 		.4byte	.LBE101
 6752 01b8 00000000 		.4byte	0
 6753 01bc 00000000 		.4byte	0
 6754 01c0 FE050000 		.4byte	.LBB103
 6755 01c4 0A060000 		.4byte	.LBE103
ARM GAS  /tmp/ccfh54Yn.s 			page 136


 6756 01c8 10060000 		.4byte	.LBB107
 6757 01cc 90060000 		.4byte	.LBE107
 6758 01d0 00000000 		.4byte	0
 6759 01d4 00000000 		.4byte	0
 6760 01d8 00000000 		.4byte	.LFB4
 6761 01dc 9E010000 		.4byte	.LFE4
 6762 01e0 00000000 		.4byte	.LFB0
 6763 01e4 06000000 		.4byte	.LFE0
 6764 01e8 00000000 		.4byte	.LFB1
 6765 01ec 0A000000 		.4byte	.LFE1
 6766 01f0 00000000 		.4byte	.LFB2
 6767 01f4 18000000 		.4byte	.LFE2
 6768 01f8 00000000 		.4byte	.LFB3
 6769 01fc 1C010000 		.4byte	.LFE3
 6770 0200 00000000 		.4byte	.LFB5
 6771 0204 4E070000 		.4byte	.LFE5
 6772 0208 00000000 		.4byte	0
 6773 020c 00000000 		.4byte	0
 6774              		.section	.debug_line,"",%progbits
 6775              	.Ldebug_line0:
 6776 0000 E2090000 		.section	.debug_str,"MS",%progbits,1
 6776      03004000 
 6776      00000201 
 6776      FB0E0D00 
 6776      01010101 
 6777              	.LASF61:
 6778 0000 73696465 		.ascii	"sideNormal\000"
 6778      4E6F726D 
 6778      616C00
 6779              	.LASF58:
 6780 000b 72656C61 		.ascii	"relativeTol\000"
 6780      74697665 
 6780      546F6C00 
 6781              	.LASF66:
 6782 0017 6E656745 		.ascii	"negEdge\000"
 6782      64676500 
 6783              	.LASF25:
 6784 001f 746F7271 		.ascii	"torque\000"
 6784      756500
 6785              	.LASF27:
 6786 0026 66726963 		.ascii	"friction\000"
 6786      74696F6E 
 6786      00
 6787              	.LASF82:
 6788 002f 636C6970 		.ascii	"clipEdge\000"
 6788      45646765 
 6788      00
 6789              	.LASF64:
 6790 0038 6E656753 		.ascii	"negSide\000"
 6790      69646500 
 6791              	.LASF5:
 6792 0040 696E4564 		.ascii	"inEdge1\000"
 6792      67653100 
 6793              	.LASF7:
 6794 0048 696E4564 		.ascii	"inEdge2\000"
 6794      67653200 
 6795              	.LASF62:
ARM GAS  /tmp/ccfh54Yn.s 			page 137


 6796 0050 696E6369 		.ascii	"incidentEdge\000"
 6796      64656E74 
 6796      45646765 
 6796      00
 6797              	.LASF52:
 6798 005d 526F7442 		.ascii	"RotBT\000"
 6798      5400
 6799              	.LASF72:
 6800 0063 474E5520 		.ascii	"GNU C17 9.2.1 20191025 (release) [ARM/arm-9-branch "
 6800      43313720 
 6800      392E322E 
 6800      31203230 
 6800      31393130 
 6801 0096 72657669 		.ascii	"revision 277599] -mthumb -mcpu=cortex-m7 -mfloat-ab"
 6801      73696F6E 
 6801      20323737 
 6801      3539395D 
 6801      202D6D74 
 6802 00c9 693D6861 		.ascii	"i=hard -mfpu=fpv5-sp-d16 -march=armv7e-m+fpv5 -g -g"
 6802      7264202D 
 6802      6D667075 
 6802      3D667076 
 6802      352D7370 
 6803 00fc 64776172 		.ascii	"dwarf-2 -O2 -falign-functions=16 -fomit-frame-point"
 6803      662D3220 
 6803      2D4F3220 
 6803      2D66616C 
 6803      69676E2D 
 6804 012f 6572202D 		.ascii	"er -ffunction-sections -fdata-sections\000"
 6804      6666756E 
 6804      6374696F 
 6804      6E2D7365 
 6804      6374696F 
 6805              	.LASF84:
 6806 0156 64697374 		.ascii	"distance0\000"
 6806      616E6365 
 6806      3000
 6807              	.LASF85:
 6808 0160 64697374 		.ascii	"distance1\000"
 6808      616E6365 
 6808      3100
 6809              	.LASF36:
 6810 016a 41786973 		.ascii	"Axis\000"
 6810      00
 6811              	.LASF103:
 6812 016f 436F6D70 		.ascii	"ComputeIncidentEdge\000"
 6812      75746549 
 6812      6E636964 
 6812      656E7445 
 6812      64676500 
 6813              	.LASF76:
 6814 0183 526F7454 		.ascii	"RotT\000"
 6814      00
 6815              	.LASF45:
 6816 0188 626F6479 		.ascii	"bodyA\000"
 6816      4100
 6817              	.LASF40:
ARM GAS  /tmp/ccfh54Yn.s 			page 138


 6818 018e 45444745 		.ascii	"EDGE2\000"
 6818      3200
 6819              	.LASF22:
 6820 0194 76656C6F 		.ascii	"velocity\000"
 6820      63697479 
 6820      00
 6821              	.LASF100:
 6822 019d 5369676E 		.ascii	"Sign\000"
 6822      00
 6823              	.LASF13:
 6824 01a2 706F7369 		.ascii	"position\000"
 6824      74696F6E 
 6824      00
 6825              	.LASF11:
 6826 01ab 76616C75 		.ascii	"value\000"
 6826      6500
 6827              	.LASF24:
 6828 01b1 666F7263 		.ascii	"force\000"
 6828      6500
 6829              	.LASF42:
 6830 01b7 45444745 		.ascii	"EDGE4\000"
 6830      3400
 6831              	.LASF94:
 6832 01bd 5472616E 		.ascii	"Transpose\000"
 6832      73706F73 
 6832      6500
 6833              	.LASF79:
 6834 01c7 436C6970 		.ascii	"ClipSegmentToLine\000"
 6834      5365676D 
 6834      656E7454 
 6834      6F4C696E 
 6834      6500
 6835              	.LASF39:
 6836 01d9 45444745 		.ascii	"EDGE1\000"
 6836      3100
 6837              	.LASF18:
 6838 01df 62696173 		.ascii	"bias\000"
 6838      00
 6839              	.LASF41:
 6840 01e4 45444745 		.ascii	"EDGE3\000"
 6840      3300
 6841              	.LASF74:
 6842 01ea 2F686F6D 		.ascii	"/home/george/projects/Playdate/Box2D-Lite-C\000"
 6842      652F6765 
 6842      6F726765 
 6842      2F70726F 
 6842      6A656374 
 6843              	.LASF101:
 6844 0216 73756D56 		.ascii	"sumVec2\000"
 6844      65633200 
 6845              	.LASF26:
 6846 021e 77696474 		.ascii	"width\000"
 6846      6800
 6847              	.LASF49:
 6848 0224 526F7441 		.ascii	"RotA\000"
 6848      00
 6849              	.LASF50:
ARM GAS  /tmp/ccfh54Yn.s 			page 139


 6850 0229 526F7442 		.ascii	"RotB\000"
 6850      00
 6851              	.LASF9:
 6852 022e 666C6F61 		.ascii	"float\000"
 6852      7400
 6853              	.LASF63:
 6854 0234 66726F6E 		.ascii	"front\000"
 6854      7400
 6855              	.LASF98:
 6856 023a 41627376 		.ascii	"Absv\000"
 6856      00
 6857              	.LASF93:
 6858 023f 696E6974 		.ascii	"initMat22\000"
 6858      4D617432 
 6858      3200
 6859              	.LASF86:
 6860 0249 696E7465 		.ascii	"interp\000"
 6860      727000
 6861              	.LASF54:
 6862 0250 61627343 		.ascii	"absCT\000"
 6862      5400
 6863              	.LASF15:
 6864 0256 73657061 		.ascii	"separation\000"
 6864      72617469 
 6864      6F6E00
 6865              	.LASF81:
 6866 0261 6F666673 		.ascii	"offset\000"
 6866      657400
 6867              	.LASF97:
 6868 0268 4162734D 		.ascii	"AbsM\000"
 6868      00
 6869              	.LASF83:
 6870 026d 6E756D4F 		.ascii	"numOut\000"
 6870      757400
 6871              	.LASF37:
 6872 0274 45646765 		.ascii	"EdgeNumbers\000"
 6872      4E756D62 
 6872      65727300 
 6873              	.LASF59:
 6874 0280 6162736F 		.ascii	"absoluteTol\000"
 6874      6C757465 
 6874      546F6C00 
 6875              	.LASF102:
 6876 028c 46656174 		.ascii	"FeaturePair\000"
 6876      75726550 
 6876      61697200 
 6877              	.LASF78:
 6878 0298 436F6C6C 		.ascii	"Collide\000"
 6878      69646500 
 6879              	.LASF21:
 6880 02a0 726F7461 		.ascii	"rotation\000"
 6880      74696F6E 
 6880      00
 6881              	.LASF33:
 6882 02a9 46414345 		.ascii	"FACE_B_X\000"
 6882      5F425F58 
 6882      00
ARM GAS  /tmp/ccfh54Yn.s 			page 140


 6883              	.LASF34:
 6884 02b2 46414345 		.ascii	"FACE_B_Y\000"
 6884      5F425F59 
 6884      00
 6885              	.LASF44:
 6886 02bb 636F6E74 		.ascii	"contacts\000"
 6886      61637473 
 6886      00
 6887              	.LASF35:
 6888 02c4 756E7369 		.ascii	"unsigned char\000"
 6888      676E6564 
 6888      20636861 
 6888      7200
 6889              	.LASF80:
 6890 02d2 764F7574 		.ascii	"vOut\000"
 6890      00
 6891              	.LASF2:
 6892 02d7 636F6C31 		.ascii	"col1\000"
 6892      00
 6893              	.LASF3:
 6894 02dc 636F6C32 		.ascii	"col2\000"
 6894      00
 6895              	.LASF57:
 6896 02e1 61786973 		.ascii	"axis\000"
 6896      00
 6897              	.LASF19:
 6898 02e6 66656174 		.ascii	"feature\000"
 6898      75726500 
 6899              	.LASF31:
 6900 02ee 46414345 		.ascii	"FACE_A_X\000"
 6900      5F415F58 
 6900      00
 6901              	.LASF32:
 6902 02f7 46414345 		.ascii	"FACE_A_Y\000"
 6902      5F415F59 
 6902      00
 6903              	.LASF17:
 6904 0300 6D617373 		.ascii	"massTangent\000"
 6904      54616E67 
 6904      656E7400 
 6905              	.LASF16:
 6906 030c 6D617373 		.ascii	"massNormal\000"
 6906      4E6F726D 
 6906      616C00
 6907              	.LASF90:
 6908 0317 6D696E75 		.ascii	"minusVec2\000"
 6908      73566563 
 6908      3200
 6909              	.LASF89:
 6910 0321 696E6974 		.ascii	"initClipVertex\000"
 6910      436C6970 
 6910      56657274 
 6910      657800
 6911              	.LASF23:
 6912 0330 616E6775 		.ascii	"angularVelocity\000"
 6912      6C617256 
 6912      656C6F63 
ARM GAS  /tmp/ccfh54Yn.s 			page 141


 6912      69747900 
 6913              	.LASF70:
 6914 0340 6E756D43 		.ascii	"numContacts\000"
 6914      6F6E7461 
 6914      63747300 
 6915              	.LASF1:
 6916 034c 4D617432 		.ascii	"Mat22\000"
 6916      3200
 6917              	.LASF10:
 6918 0352 63686172 		.ascii	"char\000"
 6918      00
 6919              	.LASF99:
 6920 0357 73756266 		.ascii	"subfromVec2\000"
 6920      726F6D56 
 6920      65633200 
 6921              	.LASF4:
 6922 0363 45646765 		.ascii	"Edges\000"
 6922      7300
 6923              	.LASF67:
 6924 0369 706F7345 		.ascii	"posEdge\000"
 6924      64676500 
 6925              	.LASF68:
 6926 0371 636C6970 		.ascii	"clipPoints1\000"
 6926      506F696E 
 6926      74733100 
 6927              	.LASF69:
 6928 037d 636C6970 		.ascii	"clipPoints2\000"
 6928      506F696E 
 6928      74733200 
 6929              	.LASF46:
 6930 0389 626F6479 		.ascii	"bodyB\000"
 6930      4200
 6931              	.LASF95:
 6932 038f 6D61746D 		.ascii	"matmul\000"
 6932      756C00
 6933              	.LASF20:
 6934 0396 426F6479 		.ascii	"Body\000"
 6934      00
 6935              	.LASF96:
 6936 039b 6D61746D 		.ascii	"matmulMM\000"
 6936      756C4D4D 
 6936      00
 6937              	.LASF55:
 6938 03a4 66616365 		.ascii	"faceA\000"
 6938      4100
 6939              	.LASF56:
 6940 03aa 66616365 		.ascii	"faceB\000"
 6940      4200
 6941              	.LASF14:
 6942 03b0 6E6F726D 		.ascii	"normal\000"
 6942      616C00
 6943              	.LASF88:
 6944 03b7 53776170 		.ascii	"Swap\000"
 6944      00
 6945              	.LASF92:
 6946 03bc 64696666 		.ascii	"diffVec2\000"
 6946      56656332 
ARM GAS  /tmp/ccfh54Yn.s 			page 142


 6946      00
 6947              	.LASF87:
 6948 03c5 466C6970 		.ascii	"Flip\000"
 6948      00
 6949              	.LASF47:
 6950 03ca 706F7341 		.ascii	"posA\000"
 6950      00
 6951              	.LASF48:
 6952 03cf 706F7342 		.ascii	"posB\000"
 6952      00
 6953              	.LASF65:
 6954 03d4 706F7353 		.ascii	"posSide\000"
 6954      69646500 
 6955              	.LASF73:
 6956 03dc 7372632F 		.ascii	"src/collide.c\000"
 6956      636F6C6C 
 6956      6964652E 
 6956      6300
 6957              	.LASF91:
 6958 03ea 7363616C 		.ascii	"scaledVec2\000"
 6958      65645665 
 6958      633200
 6959              	.LASF51:
 6960 03f5 526F7441 		.ascii	"RotAT\000"
 6960      5400
 6961              	.LASF28:
 6962 03fb 6D617373 		.ascii	"mass\000"
 6962      00
 6963              	.LASF38:
 6964 0400 4E4F5F45 		.ascii	"NO_EDGE\000"
 6964      44474500 
 6965              	.LASF6:
 6966 0408 6F757445 		.ascii	"outEdge1\000"
 6966      64676531 
 6966      00
 6967              	.LASF8:
 6968 0411 6F757445 		.ascii	"outEdge2\000"
 6968      64676532 
 6968      00
 6969              	.LASF53:
 6970 041a 61627343 		.ascii	"absC\000"
 6970      00
 6971              	.LASF77:
 6972 041f 6E416273 		.ascii	"nAbs\000"
 6972      00
 6973              	.LASF0:
 6974 0424 56656332 		.ascii	"Vec2\000"
 6974      00
 6975              	.LASF12:
 6976 0429 436F6E74 		.ascii	"Contact\000"
 6976      61637400 
 6977              	.LASF71:
 6978 0431 73696465 		.ascii	"side\000"
 6978      00
 6979              	.LASF75:
 6980 0436 756E7369 		.ascii	"unsigned int\000"
 6980      676E6564 
ARM GAS  /tmp/ccfh54Yn.s 			page 143


 6980      20696E74 
 6980      00
 6981              	.LASF30:
 6982 0443 696E7649 		.ascii	"invI\000"
 6982      00
 6983              	.LASF43:
 6984 0448 436C6970 		.ascii	"ClipVertex\000"
 6984      56657274 
 6984      657800
 6985              	.LASF60:
 6986 0453 66726F6E 		.ascii	"frontNormal\000"
 6986      744E6F72 
 6986      6D616C00 
 6987              	.LASF29:
 6988 045f 696E764D 		.ascii	"invMass\000"
 6988      61737300 
 6989              		.ident	"GCC: (15:9-2019-q4-0ubuntu1) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599]"
ARM GAS  /tmp/ccfh54Yn.s 			page 144


DEFINED SYMBOLS
                            *ABS*:0000000000000000 collide.c
     /tmp/ccfh54Yn.s:76     .text.ComputeIncidentEdge:0000000000000000 $t
     /tmp/ccfh54Yn.s:84     .text.ComputeIncidentEdge:0000000000000000 ComputeIncidentEdge
     /tmp/ccfh54Yn.s:403    .text.initClipVertex:0000000000000000 $t
     /tmp/ccfh54Yn.s:411    .text.initClipVertex:0000000000000000 initClipVertex
     /tmp/ccfh54Yn.s:431    .text.Swap:0000000000000000 $t
     /tmp/ccfh54Yn.s:439    .text.Swap:0000000000000000 Swap
     /tmp/ccfh54Yn.s:470    .text.Flip:0000000000000000 $t
     /tmp/ccfh54Yn.s:478    .text.Flip:0000000000000000 Flip
     /tmp/ccfh54Yn.s:559    .text.ClipSegmentToLine:0000000000000000 $t
     /tmp/ccfh54Yn.s:567    .text.ClipSegmentToLine:0000000000000000 ClipSegmentToLine
     /tmp/ccfh54Yn.s:839    .text.Collide:0000000000000000 $t
     /tmp/ccfh54Yn.s:847    .text.Collide:0000000000000000 Collide
     /tmp/ccfh54Yn.s:2092   .text.Collide:00000000000005f4 $d
     /tmp/ccfh54Yn.s:2105   .text.Collide:00000000000005fc $t

UNDEFINED SYMBOLS
Transpose
matmul
minusVec2
Absv
Sign
sumVec2
Dot
diffVec2
scaledVec2
initMat22
matmulMM
AbsM
subfromVec2
